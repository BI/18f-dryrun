/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(3);


/***/ },
/* 1 */,
/* 2 */,
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* REACT HOT LOADER */ if (false) { (function () { var ReactHotAPI = require("/Users/jackcompton/projects/18f-dryrun/node_modules/react-hot-loader/node_modules/react-hot-api/modules/index.js"), RootInstanceProvider = require("/Users/jackcompton/projects/18f-dryrun/node_modules/react-hot-loader/RootInstanceProvider.js"), ReactMount = require("react/lib/ReactMount"), React = require("react"); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } (function () {

	var $ = __webpack_require__(39);
	var jQuery = $;
	var qd = __webpack_require__(14),
	    inflection = __webpack_require__(32),
	    dc = __webpack_require__(15),
	    fastclick = __webpack_require__(33),
	    dtip = __webpack_require__(16)(d3);

	var foundation = __webpack_require__(35);
	var foundationOffcanvas = __webpack_require__(37);

	__webpack_require__(18);
	__webpack_require__(20);
	__webpack_require__(22);
	__webpack_require__(24);

	$(document).ready(function() {
		$(document).foundation();	
	});


	$(document).ready(function(){
		loadDataAndRender($('#aging-type').val())

		//load data based on year selected
		$('#aging-type').on("change", function(){
			loadDataAndRender(this.value);
		});

	//make request for data based on year and load data for the chart
	function loadDataAndRender(agingType) {
		$('#loading').removeClass('loaded');

		//make the request
		$.get("proposals/history/" + agingType + ".json", function(data, status) {
			measureColumn = "cnt_proposals"
			crossfilterData = crossfilter(data);
			daysToAward = crossfilterData.dimension(function(d) {return d.award_days;});
			daysToAwardGroup =  daysToAward.group().reduceSum(function(d){
				  return Math.round(d[measureColumn]) || 0;
			});
			fiscalYear = crossfilterData.dimension(function(d) {return d.fiscal_year;})
			fiscalYearGroup =  fiscalYear.group().reduceSum(function(d){
				  return Math.round(d[measureColumn]) || 0;
			});
			programArea = crossfilterData.dimension(function(d) {return d.program_area_name;})
			programAreaGroup =  programArea.group().reduceSum(function(d){
				  return Math.round(d[measureColumn]) || 0;
			});
			program = crossfilterData.dimension(function(d) {return d.program_name;})
			programGroup =  program.group().reduceSum(function(d){
				  return Math.round(d[measureColumn]) || 0;
			});

			daysToAwardDomain = [daysToAward.bottom(1)[0].award_days, daysToAward.top(1)[0].award_days];
			daysToAwardChart = dc.barChart('#daysToAwardChart')
								 .x(d3.scale.linear().domain(daysToAwardDomain))
								 .width(500)
								 .height(350)
								 .elasticY(true)
								 .elasticX(true)
								 .dimension(daysToAward)
								 .group(daysToAwardGroup);



			toolTipFunction = function(chartName, subselector){

					return function(){
				        var tt = d3.tip()
				          .attr('class', 'd3-tip-mouse')
				          .attr('id', 'd3-tip-'+chartName)
				          .positionAnchor('mouse')
				          .html(function (d) {
				            return "<label>" + (d.key || d.data.key) + "</label><br/>" + (d.value || d.data.value);
				          });

				        var rows = d3.selectAll('#'+chartName+' '+subselector);

				        //HACK: tried to use .call like the map but onresize x cant be found, had to do this on the pie charts also
				        if (!d3.select('#d3-tip-'+chartName).empty()) d3.select('#d3-tip-'+chartName).remove();

				        rows.call(tt);
				        rows.on('mouseover', tt.show)
				            .on('mouseout', tt.hide)
				            .on('mousemove', tt.updatePosition);
				            //.on('click', tt.hide);
				    };

			};

			fiscalYearDomain = [];
			firstYear = fiscalYear.bottom(1)[0].fiscal_year;
			lastYear = fiscalYear.top(1)[0].fiscal_year;
			for(var y = firstYear; y < lastYear; y++){
				fiscalYearDomain.push(y);
			}
			fiscalYearChart = dc.barChart('#fiscalYearChart')						 
								 .width(500)
								 .height(350)
								 .dimension(fiscalYear)
								 .group(fiscalYearGroup)
								 .elasticY(true)
							     .renderTitle(false)
							     .x(d3.scale.ordinal().domain(fiscalYearDomain))
							     .xUnits(dc.units.ordinal);

			fiscalYearChart.renderlet(toolTipFunction('fiscalYearChart','rect.bar'));


			programAreaChart = dc.rowChart('#programAreaChart');
			programAreaChart
				.dimension(programArea)
				.group(programAreaGroup)
				.ordering(function(d) { return -d.value})
			    .cap(30)
			    .height(600)
			    .width(500)
			    .renderTitle(false)
			    .elasticX(true)
			    .xAxis()
			      .ticks(4);

			programAreaChart.renderlet(toolTipFunction('programAreaChart','g.row'));

			programChart = dc.rowChart('#programChart');
			programChart
				.dimension(program)
				.group(programGroup)
				.ordering(function(d) { return -d.value})
			    .cap(30)
			    .height(600)
			    .width(500)
			    .renderTitle(false)
			    .elasticX(true)
			    .xAxis()
			      .ticks(4);

			programChart.renderlet(toolTipFunction('programChart','g.row'));

			filterBuilder = dc.filterBuilder('#filterBuilder')
		      .filterSources([{chart: programAreaChart, icon: 'globe', label: "Program Area"},
		        {chart: programChart, icon: 'tag', label: "Program"},
		        {chart: fiscalYearChart, icon: 'institution', label: "Fiscal Year"}]);
			
			dc.renderAll();
			$('#loading').addClass('loaded');
		});
	}

	});






	/* REACT HOT LOADER */ })(); if (false) { (function () { module.hot.dispose(function (data) { data.makeHot = module.makeHot; }); if (module.exports && module.makeHot) { var makeExportsHot = require("/Users/jackcompton/projects/18f-dryrun/node_modules/react-hot-loader/makeExportsHot.js"), foundReactClasses = false; if (makeExportsHot(module, require("react"))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot not apply hot update to " + "history_dashboard.js" + ": " + err.message); } }); } } })(); }

/***/ },
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	var d3 = __webpack_require__(52);

	var qd = {
	 // slideOut: require('./slide-out'),
	 // dataSelector: require('./data-selector')
	}

	var currency = d3.format("$,");
	var number = d3.format(",");
	var currency2p = d3.format("$,.2r");
	var number2p = d3.format(",.2r");

	qd.currencyFormat = function(d){
	  var rounded = Math.round(d);
	  if (Math.abs(rounded) < 10) return d3.format("$")(rounded);
	  return currency(rounded);
	}
	qd.numberFormat = function(d){
	  var rounded = Math.round(d);
	  if (Math.abs(rounded) < 10) return rounded;
	  return number(rounded);
	};
	qd.bigCurrencyFormat = function(d){
	  var abs = Math.abs(d);
	  if(abs/1e12 >= 1) {
	    return generateBigFormatter(d, "currency") + "t";
	  }
	  else if (abs/1e9 >= 1) {
	   return generateBigFormatter(d, "currency") + "b";
	  }else if(abs/1e6 >= 1){
	   return generateBigFormatter(d, "currency") + "m";
	  }else if(abs/1e3 >= 1){
	   return generateBigFormatter(d, "currency") + "k";
	  }else{
	   return qd.currencyFormat(d);
	  }
	}
	qd.bigNumberFormat = function(d){
	  var abs = Math.abs(d);
	  if(abs/1e12 >= 1) {
	    return generateBigFormatter(d, "number") + "t";
	  }
	  else if (abs/1e9 >= 1) {
	   return generateBigFormatter(d, "number") + "b";
	  }else if(abs/1e6 >= 1){
	   return generateBigFormatter(d, "number") + "m";
	  }else if(abs/1e3 >= 1){
	   return generateBigFormatter(d, "number") + "k";
	  }else{
	   return qd.numberFormat(d);
	  }
	}

	generateBigFormatter = function(d, type) {
	  var digitLength, dividedNumber, truncatedNumber;
	  var number = Math.abs(d);
	  if(number/1e12 >= 1) {
	    dividedNumber = number/1e12;
	  }
	  else if (number/1e9 >= 1) {
	   dividedNumber = number/1e9;
	  }else if(number/1e6 >= 1){
	   dividedNumber = number/1e6;
	  }else if(number/1e3 >= 1){
	   dividedNumber = number/1e3;
	  }
	  digitLength = String(Math.floor(dividedNumber)).length;
	  if(digitLength === 1) digitLength = 2;
	  if(type === "currency")
	    return d3.format("$,." + String(digitLength) + "r")(dividedNumber);
	  else if(type === "number")
	    return d3.format(",." + String(digitLength) + "r")(dividedNumber);
	};

	qd.wireupDataAll = function(chartList, datConf){
	  chartList.forEach(function(chart){
	    if (chart.wireUpData !== undefined) chart.wireUpData(datConf);
	  });
	}

	qd.resizeAll = function(chartList){
	  chartList.forEach(function(chart){
	    if(chart.resize !== undefined) chart.resize();
	  });   
	}

	qd.dataConfigMixin = __webpack_require__(42);
	qd.dataConfigurator = __webpack_require__(43);

	module.exports = qd;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var dc = __webpack_require__(51),
	    jQuery = __webpack_require__(39);
	var $ = jQuery;

	var dcCustom = {
	  filterTrail: __webpack_require__(44),
	  filterBuilder: __webpack_require__(45),
	  selectControl: __webpack_require__(46),
	  dynatableComponent: __webpack_require__(47),
	  audioDash: __webpack_require__(48)
	}

	jQuery.extend(dc, dcCustom);

	module.exports = dc;


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// d3.tip
	// Copyright (c) 2013 Justin Palmer
	//
	// Tooltips for d3.js SVG visualizations

	(function (root, factory) {
	  if (true) {
	    // AMD. Register as an anonymous module with d3 as a dependency.
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(52)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
	  } else if (typeof module === 'object' && module.exports) {
	    // CommonJS
	    module.exports = function(d3) {
	      d3.tip = factory(d3)
	      return d3.tip
	    }
	  } else {
	    // Browser global.
	    factory(root.d3)
	  }
	}(this, function (d3) {

	  // Public - contructs a new tooltip
	  //
	  // Returns a tip
	  d3.tip = function() {
	    var direction = d3_tip_direction,
	        offset    = d3_tip_offset,
	        html      = d3_tip_html,
	        node      = initNode(),
	        svg       = null,
	        point     = null,
	        target    = null,
	        positionAnchor = d3_tip_positionAnchor;

	    function tip(vis) {
	      svg = getSVGNode(vis)
	      point = svg.createSVGPoint()
	      document.body.appendChild(node)
	    }

	    // Public - show the tooltip on the screen
	    //
	    // Returns a tip
	    tip.show = function() {
	      var args = Array.prototype.slice.call(arguments)
	      if(args[args.length - 1] instanceof SVGElement) target = args.pop()

	      var content = html.apply(this, args),
	          poffset = offset.apply(this, args),
	          dir     = direction.apply(this, args),
	          nodel   = d3.select(node),
	          i       = directions.length,
	          coords,
	          scrollTop  = document.documentElement.scrollTop || document.body.scrollTop,
	          scrollLeft = document.documentElement.scrollLeft || document.body.scrollLeft

	      nodel.html(content)
	        .style({ opacity: 1, 'pointer-events': 'all' })

	      while(i--) nodel.classed(directions[i], false)
	      coords = direction_callbacks.get(dir).apply(this)
	      var rightEdge =  coords.left + poffset[1] + scrollLeft + nodel.property('offsetWidth');
	      var bottomEdge = coords.top +  poffset[0] + scrollTop + nodel.property('offsetHeight');
	      var overFlowRight = tipOverFlowRight(rightEdge);
	      var overFlowBottom = tipOverFlowBottom(bottomEdge);
	      var leftEdge = coords.left + poffset[1] + scrollLeft;
	      var overFlowLeft = tipOverFlowLeft(leftEdge);
	      var topEdge = coords.top + poffset[0] + scrollTop;

	      if(overFlowRight) leftEdge -= overFlowRight;
	      if(overFlowLeft) leftEdge += overFlowLeft;
	      if(overFlowBottom) topEdge -= overFlowBottom;

	      if(positionAnchor() === 'shape') {
	        nodel.classed(dir, true).style({
	          top: topEdge + 'px',
	          left: leftEdge + 'px'
	        });
	      }
	      else if(positionAnchor() === 'mouse') {
	        nodel.classed(dir, true);
	        tip.updatePosition(poffset);
	      }
	      
	      return tip
	    }

	    // Public - hide the tooltip
	    //
	    // Returns a tip
	    tip.hide = function() {
	      var nodel = d3.select(node)
	      nodel.style({ opacity: 0, 'pointer-events': 'none' })
	      return tip
	    }

	    //Public - update position of tooltip based on mouse
	    //
	    // Returns a tip
	    tip.updatePosition = function(v) {
	      var nodel = d3.select(node);
	      var mouseX = d3.mouse(d3.select("html").node())[0] + 10;
	      var mouseY = d3.mouse(d3.select("html").node())[1] + 20;
	      var rightEdge = mouseX + nodel.property('offsetWidth');
	      var bottomEdge = mouseY + nodel.property('offsetHeight');
	      var overFlowRight = tipOverFlowRight(rightEdge);
	      var overFlowLeft = tipOverFlowLeft(mouseX);
	      var overFlowBottom = tipOverFlowBottom(bottomEdge);

	      if(v.length) {
	        mouseX += v[0];
	        mouseY += v[1];
	      }
	      if(overFlowRight) mouseX -= overFlowRight;
	      if(overFlowLeft) mouseX += overFlowLeft;
	      if(overFlowBottom) mouseY -= overFlowBottom;

	      nodel.style({
	        top: mouseY + 'px',
	        left: mouseX + 'px'
	      });
	      return tip;
	    };

	    function tipOverFlowRight(rightEdge) {
	      var windowWidth = window.outerWidth;
	      if(rightEdge > windowWidth)
	        return rightEdge - windowWidth;
	      else
	        return false;
	    }

	    function tipOverFlowLeft(leftEdge) {
	      var windowWidth = window.outerWidth;
	      if(leftEdge < 0)
	        return -(leftEdge);
	      else
	        return false;
	    }

	    function tipOverFlowBottom(bottomEdge) {
	      var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
	      var windowHeight = window.innerHeight + scrollTop;
	      if(bottomEdge > windowHeight)
	        return bottomEdge - windowHeight;
	      else
	        return false;
	    }
	    // Public: Proxy attr calls to the d3 tip container.  Sets or gets attribute value.
	    //
	    // n - name of the attribute
	    // v - value of the attribute
	    //
	    // Returns tip or attribute value
	    tip.attr = function(n, v) {
	      if (arguments.length < 2 && typeof n === 'string') {
	        return d3.select(node).attr(n)
	      } else {
	        var args =  Array.prototype.slice.call(arguments)
	        d3.selection.prototype.attr.apply(d3.select(node), args)
	      }

	      return tip
	    }

	    // Public: Proxy style calls to the d3 tip container.  Sets or gets a style value.
	    //
	    // n - name of the property
	    // v - value of the property
	    //
	    // Returns tip or style property value
	    tip.style = function(n, v) {
	      if (arguments.length < 2 && typeof n === 'string') {
	        return d3.select(node).style(n)
	      } else {
	        var args =  Array.prototype.slice.call(arguments)
	        d3.selection.prototype.style.apply(d3.select(node), args)
	      }

	      return tip
	    }

	    // Public: Set or get the direction of the tooltip
	    //
	    // v - One of n(north), s(south), e(east), or w(west), nw(northwest),
	    //     sw(southwest), ne(northeast) or se(southeast)
	    //
	    // Returns tip or direction
	    tip.direction = function(v) {
	      if (!arguments.length) return direction
	      direction = v == null ? v : d3.functor(v)

	      return tip
	    }

	    // Public: Set or get the position anchor of the tool tip.
	    //
	    // v - either 'ordinal' - the default position that uses ordinal positioning
	    // or 'mouse' - to position the tool tip wherever the mouse goes on the selected node
	    //
	    // Returns tip or position
	    tip.positionAnchor = function(v) {
	      if (!arguments.length) return positionAnchor;
	      positionAnchor = v == null ? v : d3.functor(v);

	      return tip;
	    };

	    // Public: Sets or gets the offset of the tip
	    //
	    // v - Array of [x, y] offset
	    //
	    // Returns offset or
	    tip.offset = function(v) {
	      if (!arguments.length) return offset
	      offset = v == null ? v : d3.functor(v)

	      return tip
	    }

	    // Public: sets or gets the html value of the tooltip
	    //
	    // v - String value of the tip
	    //
	    // Returns html value or tip
	    tip.html = function(v) {
	      if (!arguments.length) return html
	      html = v == null ? v : d3.functor(v)

	      return tip
	    }

	    function d3_tip_direction() { return 'n' }
	    function d3_tip_offset() { return [0, 0] }
	    function d3_tip_html() { return ' ' }
	    function d3_tip_positionAnchor() { return 'shape';}

	    var direction_callbacks = d3.map({
	      n:  direction_n,
	      s:  direction_s,
	      e:  direction_e,
	      w:  direction_w,
	      nw: direction_nw,
	      ne: direction_ne,
	      sw: direction_sw,
	      se: direction_se
	    }),

	    directions = direction_callbacks.keys()

	    function direction_n() {
	      var bbox = getScreenBBox()
	      return {
	        top:  bbox.n.y - node.offsetHeight,
	        left: bbox.n.x - node.offsetWidth / 2
	      }
	    }

	    function direction_s() {
	      var bbox = getScreenBBox()
	      return {
	        top:  bbox.s.y,
	        left: bbox.s.x - node.offsetWidth / 2
	      }
	    }

	    function direction_e() {
	      var bbox = getScreenBBox()
	      return {
	        top:  bbox.e.y - node.offsetHeight / 2,
	        left: bbox.e.x
	      }
	    }

	    function direction_w() {
	      var bbox = getScreenBBox()
	      return {
	        top:  bbox.w.y - node.offsetHeight / 2,
	        left: bbox.w.x - node.offsetWidth
	      }
	    }

	    function direction_nw() {
	      var bbox = getScreenBBox()
	      return {
	        top:  bbox.nw.y - node.offsetHeight,
	        left: bbox.nw.x - node.offsetWidth
	      }
	    }

	    function direction_ne() {
	      var bbox = getScreenBBox()
	      return {
	        top:  bbox.ne.y - node.offsetHeight,
	        left: bbox.ne.x
	      }
	    }

	    function direction_sw() {
	      var bbox = getScreenBBox()
	      return {
	        top:  bbox.sw.y,
	        left: bbox.sw.x - node.offsetWidth
	      }
	    }

	    function direction_se() {
	      var bbox = getScreenBBox()
	      return {
	        top:  bbox.se.y,
	        left: bbox.e.x
	      }
	    }

	    function initNode() {
	      var node = d3.select(document.createElement('div'))
	      node.style({
	        position: 'absolute',
	        top: 0,
	        opacity: 0,
	        'pointer-events': 'none',
	        'box-sizing': 'border-box'
	      })

	      return node.node()
	    }

	    function getSVGNode(el) {
	      el = el.node()
	      if(el.tagName.toLowerCase() === 'svg')
	        return el

	      return el.ownerSVGElement
	    }

	    // Private - gets the screen coordinates of a shape
	    //
	    // Given a shape on the screen, will return an SVGPoint for the directions
	    // n(north), s(south), e(east), w(west), ne(northeast), se(southeast), nw(northwest),
	    // sw(southwest).
	    //
	    //    +-+-+
	    //    |   |
	    //    +   +
	    //    |   |
	    //    +-+-+
	    //
	    // Returns an Object {n, s, e, w, nw, sw, ne, se}
	    function getScreenBBox() {
	      var targetel   = target || d3.event.target;

	      while ('undefined' === typeof targetel.getScreenCTM && 'undefined' === targetel.parentNode) {
	          targetel = targetel.parentNode;
	      }

	      var bbox       = {},
	          matrix     = targetel.getScreenCTM(),
	          tbbox      = targetel.getBBox(),
	          width      = tbbox.width,
	          height     = tbbox.height,
	          x          = tbbox.x,
	          y          = tbbox.y

	      point.x = x
	      point.y = y
	      bbox.nw = point.matrixTransform(matrix)
	      point.x += width
	      bbox.ne = point.matrixTransform(matrix)
	      point.y += height
	      bbox.se = point.matrixTransform(matrix)
	      point.x -= width
	      bbox.sw = point.matrixTransform(matrix)
	      point.y -= height / 2
	      bbox.w  = point.matrixTransform(matrix)
	      point.x += width
	      bbox.e = point.matrixTransform(matrix)
	      point.x -= width / 2
	      point.y -= height / 2
	      bbox.n = point.matrixTransform(matrix)
	      point.y += height
	      bbox.s = point.matrixTransform(matrix)

	      return bbox
	    }

	    return tip
	  };
	  return d3.tip
	}));


/***/ },
/* 17 */,
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(19);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(34)(content, {});
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		module.hot.accept("!!/Users/jackcompton/projects/18f-dryrun/node_modules/css-loader/index.js!/Users/jackcompton/projects/18f-dryrun/node_modules/dc-custom/node_modules/dc/dc.css", function() {
			var newContent = require("!!/Users/jackcompton/projects/18f-dryrun/node_modules/css-loader/index.js!/Users/jackcompton/projects/18f-dryrun/node_modules/dc-custom/node_modules/dc/dc.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(50)();
	exports.push([module.id, "div.dc-chart {\n    float: left;\n}\n\n.dc-chart rect.bar {\n    stroke: none;\n    cursor: pointer;\n}\n\n.dc-chart rect.bar:hover {\n    fill-opacity: .5;\n}\n\n.dc-chart rect.stack1 {\n    stroke: none;\n    fill: red;\n}\n\n.dc-chart rect.stack2 {\n    stroke: none;\n    fill: green;\n}\n\n.dc-chart rect.deselected {\n    stroke: none;\n    fill: #ccc;\n}\n\n.dc-chart .empty-chart .pie-slice path {\n    fill: #FFEEEE;\n    cursor: default;\n}\n\n.dc-chart .empty-chart .pie-slice {\n    cursor: default;\n}\n\n.dc-chart .pie-slice {\n    fill: white;\n    font-size: 12px;\n    cursor: pointer;\n}\n\n.dc-chart .pie-slice.external{\n    fill: black;\n}\n\n.dc-chart .pie-slice :hover {\n    fill-opacity: .8;\n}\n\n.dc-chart .pie-slice.highlight {\n    fill-opacity: .8;\n}\n\n.dc-chart .selected path {\n    stroke-width: 3;\n    stroke: #ccc;\n    fill-opacity: 1;\n}\n\n.dc-chart .deselected path {\n    stroke: none;\n    fill-opacity: .5;\n    fill: #ccc;\n}\n\n.dc-chart .axis path, .axis line {\n    fill: none;\n    stroke: #000;\n    shape-rendering: crispEdges;\n}\n\n.dc-chart .axis text {\n    font: 10px sans-serif;\n}\n\n.dc-chart .grid-line {\n    fill: none;\n    stroke: #ccc;\n    opacity: .5;\n    shape-rendering: crispEdges;\n}\n\n.dc-chart .grid-line line {\n    fill: none;\n    stroke: #ccc;\n    opacity: .5;\n    shape-rendering: crispEdges;\n}\n\n.dc-chart .brush rect.background {\n    z-index: -999;\n}\n\n.dc-chart .brush rect.extent {\n    fill: steelblue;\n    fill-opacity: .125;\n}\n\n.dc-chart .brush .resize path {\n    fill: #eee;\n    stroke: #666;\n}\n\n.dc-chart path.line {\n    fill: none;\n    stroke-width: 1.5px;\n}\n\n.dc-chart circle.dot {\n    stroke: none;\n}\n\n.dc-chart g.dc-tooltip path {\n    fill: none;\n    stroke: grey;\n    stroke-opacity: .8;\n}\n\n.dc-chart path.area {\n    fill-opacity: .3;\n    stroke: none;\n}\n\n.dc-chart .node {\n    font-size: 0.7em;\n    cursor: pointer;\n}\n\n.dc-chart .node :hover {\n    fill-opacity: .8;\n}\n\n.dc-chart .selected circle {\n    stroke-width: 3;\n    stroke: #ccc;\n    fill-opacity: 1;\n}\n\n.dc-chart .deselected circle {\n    stroke: none;\n    fill-opacity: .5;\n    fill: #ccc;\n}\n\n.dc-chart .bubble {\n    stroke: none;\n    fill-opacity: 0.6;\n}\n\n.dc-data-count {\n    float: right;\n    margin-top: 15px;\n    margin-right: 15px;\n}\n\n.dc-data-count .filter-count {\n    color: #3182bd;\n    font-weight: bold;\n}\n\n.dc-data-count .total-count {\n    color: #3182bd;\n    font-weight: bold;\n}\n\n.dc-data-table {\n}\n\n.dc-chart g.state {\n    cursor: pointer;\n}\n\n.dc-chart g.state :hover {\n    fill-opacity: .8;\n}\n\n.dc-chart g.state path {\n    stroke: white;\n}\n\n.dc-chart g.selected path {\n}\n\n.dc-chart g.deselected path {\n    fill: grey;\n}\n\n.dc-chart g.selected text {\n}\n\n.dc-chart g.deselected text {\n    display: none;\n}\n\n.dc-chart g.county path {\n    stroke: white;\n    fill: none;\n}\n\n.dc-chart g.debug rect {\n    fill: blue;\n    fill-opacity: .2;\n}\n\n.dc-chart g.row rect {\n    fill-opacity: 0.8;\n    cursor: pointer;\n}\n\n.dc-chart g.row rect:hover {\n    fill-opacity: 0.6;\n}\n\n.dc-chart g.row text {\n    fill: white;\n    font-size: 12px;\n    cursor: pointer;\n}\n\n.dc-legend {\n    font-size: 11px;\n}\n\n.dc-legend-item {\n    cursor: pointer;\n}\n\n.dc-chart g.axis text {\n    /* Makes it so the user can't accidentally click and select text that is meant as a label only */\n    -webkit-user-select: none; /* Chrome/Safari */\n    -moz-user-select: none; /* Firefox */\n    -ms-user-select: none; /* IE10 */\n    -o-user-select: none;\n    user-select: none;\n    pointer-events: none;\n}\n\n.dc-chart path.highlight {\n    stroke-width: 3;\n    fill-opacity: 1;\n    stroke-opacity: 1;\n}\n\n.dc-chart .highlight {\n    fill-opacity: 1;\n    stroke-opacity: 1;\n}\n\n.dc-chart .fadeout {\n    fill-opacity: 0.2;\n    stroke-opacity: 0.2;\n}\n\n.dc-chart path.dc-symbol, g.dc-legend-item.fadeout {\n    fill-opacity: 0.5;\n    stroke-opacity: 0.5;\n}\n\n.dc-hard .number-display {\n    float: none;\n}\n\n.dc-chart .box text {\n    font: 10px sans-serif;\n    -webkit-user-select: none; /* Chrome/Safari */\n    -moz-user-select: none; /* Firefox */\n    -ms-user-select: none; /* IE10 */\n    -o-user-select: none;\n    user-select: none;\n    pointer-events: none;\n}\n\n.dc-chart .box line,\n.dc-chart .box circle {\n    fill: #fff;\n    stroke: #000;\n    stroke-width: 1.5px;\n}\n\n.dc-chart .box rect {\n    stroke: #000;\n    stroke-width: 1.5px;\n}\n\n.dc-chart .box .center {\n    stroke-dasharray: 3,3;\n}\n\n.dc-chart .box .outlier {\n    fill: none;\n    stroke: #ccc;\n}\n\n.dc-chart .box.deselected .box {\n    fill: #ccc;\n}\n\n.dc-chart .box.deselected {\n    opacity: .5;\n}\n\n.dc-chart .symbol{\n    stroke: none;\n}\n\n.dc-chart .heatmap .box-group.deselected rect {\n    stroke: none;\n    fill-opacity: .5;\n    fill: #ccc;\n}\n\n.dc-chart .heatmap g.axis text {\n    pointer-events: all;\n    cursor: pointer;\n}\n\n.dc-arc-gauge-background {\n    fill: #9BE8D4;\n}\n\n.dc-arc-gauge-foreground {\n    fill: #04ADB0;\n}\n\n.dc-sankey g.node.Central rect{\n    stroke: blue;    \n}\n\n.dc-bar-gauge-background {\n    fill: #04ADB0;\n    opacity: .7;\n}\n\n.dc-bar-gauge-foreground {\n    fill: #9BE8D4; \n    opacity: .7;\n}\n\n.dc-bar-gauge .axis path, .axis line {\n    fill: none;\n    stroke: #000;\n    shape-rendering: crispEdges;\n    opacity: .5;\n}\n\n.dc-bar-gauge .axis text {\n    font: 10px sans-serif;\n}\n\n.dc-bar-gauge .grid-line {\n    fill: none;\n    stroke: #ccc;\n    opacity: .5;\n    shape-rendering: crispEdges;\n}\n\n\n.dc-bar-gauge .marker-line {\n    fill:none;\n    stroke: #000;\n    opacity: 1;\n    shape-rendering: crispEdges;\n}\n\n.dc-bar-gauge .marker-rect {\n    fill: green;\n}\n\n.dc-zoom-button {\n    background-color: #FFF;\n    color: #555;\n    cursor: pointer;\n    width: 20px;\n    font-size: 10px;\n    text-align: center;\n    border: 1px solid #CCC;\n    border-radius: 4px;\n}\n.dc-zoom-button div {\n    font-size: 14px;\n    text-align: center;\n    font-weight: bold;\n}\n.dc-zoom-button .in {\n    border-bottom: 1px solid #CCC;\n}\n\n.dc-zoom-reset {\n    background-color: #FFF;\n    font-size: 10px;\n    cursor: pointer;\n    width: 60px;\n    text-align: center;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n}", ""]);

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(21);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(34)(content, {});
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		module.hot.accept("!!/Users/jackcompton/projects/18f-dryrun/node_modules/css-loader/index.js!/Users/jackcompton/projects/18f-dryrun/node_modules/sass-loader/index.js!/Users/jackcompton/projects/18f-dryrun/app/assets/stylesheets/18f.scss", function() {
			var newContent = require("!!/Users/jackcompton/projects/18f-dryrun/node_modules/css-loader/index.js!/Users/jackcompton/projects/18f-dryrun/node_modules/sass-loader/index.js!/Users/jackcompton/projects/18f-dryrun/app/assets/stylesheets/18f.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(50)();
	exports.push([module.id, "meta.foundation-version {\n  font-family: \"/{{VERSION}}/\"; }\n\nmeta.foundation-mq-small {\n  font-family: \"/only screen/\";\n  width: 0; }\n\nmeta.foundation-mq-small-only {\n  font-family: \"/only screen and (max-width: 40em)/\";\n  width: 0; }\n\nmeta.foundation-mq-medium {\n  font-family: \"/only screen and (min-width:40.0625em)/\";\n  width: 40.0625em; }\n\nmeta.foundation-mq-medium-only {\n  font-family: \"/only screen and (min-width:40.0625em) and (max-width:64em)/\";\n  width: 40.0625em; }\n\nmeta.foundation-mq-large {\n  font-family: \"/only screen and (min-width:64.0625em)/\";\n  width: 64.0625em; }\n\nmeta.foundation-mq-large-only {\n  font-family: \"/only screen and (min-width:64.0625em) and (max-width:90em)/\";\n  width: 64.0625em; }\n\nmeta.foundation-mq-xlarge {\n  font-family: \"/only screen and (min-width:90.0625em)/\";\n  width: 90.0625em; }\n\nmeta.foundation-mq-xlarge-only {\n  font-family: \"/only screen and (min-width:90.0625em) and (max-width:120em)/\";\n  width: 90.0625em; }\n\nmeta.foundation-mq-xxlarge {\n  font-family: \"/only screen and (min-width:120.0625em)/\";\n  width: 120.0625em; }\n\nmeta.foundation-data-attribute-namespace {\n  font-family: false; }\n\nhtml, body {\n  height: 100%; }\n\nhtml {\n  box-sizing: border-box; }\n\n*, *:before, *:after {\n  -webkit-box-sizing: inherit;\n  -moz-box-sizing: inherit;\n  box-sizing: inherit; }\n\nhtml, body {\n  font-size: 100%; }\n\nbody {\n  background: #fff;\n  color: #222;\n  cursor: auto;\n  font-family: \"Helvetica Neue\", Helvetica, Roboto, Arial, sans-serif;\n  font-style: normal;\n  font-weight: normal;\n  line-height: 1.5;\n  margin: 0;\n  padding: 0;\n  position: relative; }\n\na:hover {\n  cursor: pointer; }\n\nimg {\n  max-width: 100%;\n  height: auto; }\n\nimg {\n  -ms-interpolation-mode: bicubic; }\n\n#map_canvas img, #map_canvas embed, #map_canvas object, .map_canvas img, .map_canvas embed, .map_canvas object, .mqa-display img, .mqa-display embed, .mqa-display object {\n  max-width: none !important; }\n\n.left {\n  float: left !important; }\n\n.right {\n  float: right !important; }\n\n.clearfix:before, .clearfix:after {\n  content: \" \";\n  display: table; }\n.clearfix:after {\n  clear: both; }\n\n.hide {\n  display: none; }\n\n.invisible {\n  visibility: hidden; }\n\n.antialiased {\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale; }\n\nimg {\n  display: inline-block;\n  vertical-align: middle; }\n\ntextarea {\n  height: auto;\n  min-height: 50px; }\n\nselect {\n  width: 100%; }\n\n.row {\n  margin: 0 auto;\n  max-width: 150rem;\n  width: 100%; }\n  .row:before, .row:after {\n    content: \" \";\n    display: table; }\n  .row:after {\n    clear: both; }\n  .row.collapse > .column, .row.collapse > .columns {\n    padding-left: 0;\n    padding-right: 0; }\n  .row.collapse .row {\n    margin-left: 0;\n    margin-right: 0; }\n  .row .row {\n    margin: 0 -0.9375rem;\n    max-width: none;\n    width: auto; }\n    .row .row:before, .row .row:after {\n      content: \" \";\n      display: table; }\n    .row .row:after {\n      clear: both; }\n    .row .row.collapse {\n      margin: 0;\n      max-width: none;\n      width: auto; }\n      .row .row.collapse:before, .row .row.collapse:after {\n        content: \" \";\n        display: table; }\n      .row .row.collapse:after {\n        clear: both; }\n\n.column, .columns {\n  padding-left: 0.9375rem;\n  padding-right: 0.9375rem;\n  width: 100%;\n  float: left; }\n\n[class*=\"column\"] + [class*=\"column\"]:last-child {\n  float: right; }\n\n[class*=\"column\"] + [class*=\"column\"].end {\n  float: left; }\n\n@media only screen {\n  .small-push-0 {\n    position: relative;\n    left: 0;\n    right: auto; }\n  .small-pull-0 {\n    position: relative;\n    right: 0;\n    left: auto; }\n  .small-push-1 {\n    position: relative;\n    left: 8.33333%;\n    right: auto; }\n  .small-pull-1 {\n    position: relative;\n    right: 8.33333%;\n    left: auto; }\n  .small-push-2 {\n    position: relative;\n    left: 16.66667%;\n    right: auto; }\n  .small-pull-2 {\n    position: relative;\n    right: 16.66667%;\n    left: auto; }\n  .small-push-3 {\n    position: relative;\n    left: 25%;\n    right: auto; }\n  .small-pull-3 {\n    position: relative;\n    right: 25%;\n    left: auto; }\n  .small-push-4 {\n    position: relative;\n    left: 33.33333%;\n    right: auto; }\n  .small-pull-4 {\n    position: relative;\n    right: 33.33333%;\n    left: auto; }\n  .small-push-5 {\n    position: relative;\n    left: 41.66667%;\n    right: auto; }\n  .small-pull-5 {\n    position: relative;\n    right: 41.66667%;\n    left: auto; }\n  .small-push-6 {\n    position: relative;\n    left: 50%;\n    right: auto; }\n  .small-pull-6 {\n    position: relative;\n    right: 50%;\n    left: auto; }\n  .small-push-7 {\n    position: relative;\n    left: 58.33333%;\n    right: auto; }\n  .small-pull-7 {\n    position: relative;\n    right: 58.33333%;\n    left: auto; }\n  .small-push-8 {\n    position: relative;\n    left: 66.66667%;\n    right: auto; }\n  .small-pull-8 {\n    position: relative;\n    right: 66.66667%;\n    left: auto; }\n  .small-push-9 {\n    position: relative;\n    left: 75%;\n    right: auto; }\n  .small-pull-9 {\n    position: relative;\n    right: 75%;\n    left: auto; }\n  .small-push-10 {\n    position: relative;\n    left: 83.33333%;\n    right: auto; }\n  .small-pull-10 {\n    position: relative;\n    right: 83.33333%;\n    left: auto; }\n  .small-push-11 {\n    position: relative;\n    left: 91.66667%;\n    right: auto; }\n  .small-pull-11 {\n    position: relative;\n    right: 91.66667%;\n    left: auto; }\n  .column, .columns {\n    position: relative;\n    padding-left: 0.9375rem;\n    padding-right: 0.9375rem;\n    float: left; }\n  .small-1 {\n    width: 8.33333%; }\n  .small-2 {\n    width: 16.66667%; }\n  .small-3 {\n    width: 25%; }\n  .small-4 {\n    width: 33.33333%; }\n  .small-5 {\n    width: 41.66667%; }\n  .small-6 {\n    width: 50%; }\n  .small-7 {\n    width: 58.33333%; }\n  .small-8 {\n    width: 66.66667%; }\n  .small-9 {\n    width: 75%; }\n  .small-10 {\n    width: 83.33333%; }\n  .small-11 {\n    width: 91.66667%; }\n  .small-12 {\n    width: 100%; }\n  .small-offset-0 {\n    margin-left: 0 !important; }\n  .small-offset-1 {\n    margin-left: 8.33333% !important; }\n  .small-offset-2 {\n    margin-left: 16.66667% !important; }\n  .small-offset-3 {\n    margin-left: 25% !important; }\n  .small-offset-4 {\n    margin-left: 33.33333% !important; }\n  .small-offset-5 {\n    margin-left: 41.66667% !important; }\n  .small-offset-6 {\n    margin-left: 50% !important; }\n  .small-offset-7 {\n    margin-left: 58.33333% !important; }\n  .small-offset-8 {\n    margin-left: 66.66667% !important; }\n  .small-offset-9 {\n    margin-left: 75% !important; }\n  .small-offset-10 {\n    margin-left: 83.33333% !important; }\n  .small-offset-11 {\n    margin-left: 91.66667% !important; }\n  .small-reset-order {\n    float: left;\n    left: auto;\n    margin-left: 0;\n    margin-right: 0;\n    right: auto; }\n  .column.small-centered, .columns.small-centered {\n    margin-left: auto;\n    margin-right: auto;\n    float: none; }\n  .column.small-uncentered, .columns.small-uncentered {\n    float: left;\n    margin-left: 0;\n    margin-right: 0; }\n  .column.small-centered:last-child, .columns.small-centered:last-child {\n    float: none; }\n  .column.small-uncentered:last-child, .columns.small-uncentered:last-child {\n    float: left; }\n  .column.small-uncentered.opposite, .columns.small-uncentered.opposite {\n    float: right; }\n  .row.small-collapse > .column, .row.small-collapse > .columns {\n    padding-left: 0;\n    padding-right: 0; }\n  .row.small-collapse .row {\n    margin-left: 0;\n    margin-right: 0; }\n  .row.small-uncollapse > .column, .row.small-uncollapse > .columns {\n    padding-left: 0.9375rem;\n    padding-right: 0.9375rem;\n    float: left; } }\n\n@media only screen and (min-width:40.0625em) {\n  .medium-push-0 {\n    position: relative;\n    left: 0;\n    right: auto; }\n  .medium-pull-0 {\n    position: relative;\n    right: 0;\n    left: auto; }\n  .medium-push-1 {\n    position: relative;\n    left: 8.33333%;\n    right: auto; }\n  .medium-pull-1 {\n    position: relative;\n    right: 8.33333%;\n    left: auto; }\n  .medium-push-2 {\n    position: relative;\n    left: 16.66667%;\n    right: auto; }\n  .medium-pull-2 {\n    position: relative;\n    right: 16.66667%;\n    left: auto; }\n  .medium-push-3 {\n    position: relative;\n    left: 25%;\n    right: auto; }\n  .medium-pull-3 {\n    position: relative;\n    right: 25%;\n    left: auto; }\n  .medium-push-4 {\n    position: relative;\n    left: 33.33333%;\n    right: auto; }\n  .medium-pull-4 {\n    position: relative;\n    right: 33.33333%;\n    left: auto; }\n  .medium-push-5 {\n    position: relative;\n    left: 41.66667%;\n    right: auto; }\n  .medium-pull-5 {\n    position: relative;\n    right: 41.66667%;\n    left: auto; }\n  .medium-push-6 {\n    position: relative;\n    left: 50%;\n    right: auto; }\n  .medium-pull-6 {\n    position: relative;\n    right: 50%;\n    left: auto; }\n  .medium-push-7 {\n    position: relative;\n    left: 58.33333%;\n    right: auto; }\n  .medium-pull-7 {\n    position: relative;\n    right: 58.33333%;\n    left: auto; }\n  .medium-push-8 {\n    position: relative;\n    left: 66.66667%;\n    right: auto; }\n  .medium-pull-8 {\n    position: relative;\n    right: 66.66667%;\n    left: auto; }\n  .medium-push-9 {\n    position: relative;\n    left: 75%;\n    right: auto; }\n  .medium-pull-9 {\n    position: relative;\n    right: 75%;\n    left: auto; }\n  .medium-push-10 {\n    position: relative;\n    left: 83.33333%;\n    right: auto; }\n  .medium-pull-10 {\n    position: relative;\n    right: 83.33333%;\n    left: auto; }\n  .medium-push-11 {\n    position: relative;\n    left: 91.66667%;\n    right: auto; }\n  .medium-pull-11 {\n    position: relative;\n    right: 91.66667%;\n    left: auto; }\n  .column, .columns {\n    position: relative;\n    padding-left: 0.9375rem;\n    padding-right: 0.9375rem;\n    float: left; }\n  .medium-1 {\n    width: 8.33333%; }\n  .medium-2 {\n    width: 16.66667%; }\n  .medium-3 {\n    width: 25%; }\n  .medium-4 {\n    width: 33.33333%; }\n  .medium-5 {\n    width: 41.66667%; }\n  .medium-6 {\n    width: 50%; }\n  .medium-7 {\n    width: 58.33333%; }\n  .medium-8 {\n    width: 66.66667%; }\n  .medium-9 {\n    width: 75%; }\n  .medium-10 {\n    width: 83.33333%; }\n  .medium-11 {\n    width: 91.66667%; }\n  .medium-12 {\n    width: 100%; }\n  .medium-offset-0 {\n    margin-left: 0 !important; }\n  .medium-offset-1 {\n    margin-left: 8.33333% !important; }\n  .medium-offset-2 {\n    margin-left: 16.66667% !important; }\n  .medium-offset-3 {\n    margin-left: 25% !important; }\n  .medium-offset-4 {\n    margin-left: 33.33333% !important; }\n  .medium-offset-5 {\n    margin-left: 41.66667% !important; }\n  .medium-offset-6 {\n    margin-left: 50% !important; }\n  .medium-offset-7 {\n    margin-left: 58.33333% !important; }\n  .medium-offset-8 {\n    margin-left: 66.66667% !important; }\n  .medium-offset-9 {\n    margin-left: 75% !important; }\n  .medium-offset-10 {\n    margin-left: 83.33333% !important; }\n  .medium-offset-11 {\n    margin-left: 91.66667% !important; }\n  .medium-reset-order {\n    float: left;\n    left: auto;\n    margin-left: 0;\n    margin-right: 0;\n    right: auto; }\n  .column.medium-centered, .columns.medium-centered {\n    margin-left: auto;\n    margin-right: auto;\n    float: none; }\n  .column.medium-uncentered, .columns.medium-uncentered {\n    float: left;\n    margin-left: 0;\n    margin-right: 0; }\n  .column.medium-centered:last-child, .columns.medium-centered:last-child {\n    float: none; }\n  .column.medium-uncentered:last-child, .columns.medium-uncentered:last-child {\n    float: left; }\n  .column.medium-uncentered.opposite, .columns.medium-uncentered.opposite {\n    float: right; }\n  .row.medium-collapse > .column, .row.medium-collapse > .columns {\n    padding-left: 0;\n    padding-right: 0; }\n  .row.medium-collapse .row {\n    margin-left: 0;\n    margin-right: 0; }\n  .row.medium-uncollapse > .column, .row.medium-uncollapse > .columns {\n    padding-left: 0.9375rem;\n    padding-right: 0.9375rem;\n    float: left; }\n  .push-0 {\n    position: relative;\n    left: 0;\n    right: auto; }\n  .pull-0 {\n    position: relative;\n    right: 0;\n    left: auto; }\n  .push-1 {\n    position: relative;\n    left: 8.33333%;\n    right: auto; }\n  .pull-1 {\n    position: relative;\n    right: 8.33333%;\n    left: auto; }\n  .push-2 {\n    position: relative;\n    left: 16.66667%;\n    right: auto; }\n  .pull-2 {\n    position: relative;\n    right: 16.66667%;\n    left: auto; }\n  .push-3 {\n    position: relative;\n    left: 25%;\n    right: auto; }\n  .pull-3 {\n    position: relative;\n    right: 25%;\n    left: auto; }\n  .push-4 {\n    position: relative;\n    left: 33.33333%;\n    right: auto; }\n  .pull-4 {\n    position: relative;\n    right: 33.33333%;\n    left: auto; }\n  .push-5 {\n    position: relative;\n    left: 41.66667%;\n    right: auto; }\n  .pull-5 {\n    position: relative;\n    right: 41.66667%;\n    left: auto; }\n  .push-6 {\n    position: relative;\n    left: 50%;\n    right: auto; }\n  .pull-6 {\n    position: relative;\n    right: 50%;\n    left: auto; }\n  .push-7 {\n    position: relative;\n    left: 58.33333%;\n    right: auto; }\n  .pull-7 {\n    position: relative;\n    right: 58.33333%;\n    left: auto; }\n  .push-8 {\n    position: relative;\n    left: 66.66667%;\n    right: auto; }\n  .pull-8 {\n    position: relative;\n    right: 66.66667%;\n    left: auto; }\n  .push-9 {\n    position: relative;\n    left: 75%;\n    right: auto; }\n  .pull-9 {\n    position: relative;\n    right: 75%;\n    left: auto; }\n  .push-10 {\n    position: relative;\n    left: 83.33333%;\n    right: auto; }\n  .pull-10 {\n    position: relative;\n    right: 83.33333%;\n    left: auto; }\n  .push-11 {\n    position: relative;\n    left: 91.66667%;\n    right: auto; }\n  .pull-11 {\n    position: relative;\n    right: 91.66667%;\n    left: auto; } }\n\n@media only screen and (min-width:64.0625em) {\n  .large-push-0 {\n    position: relative;\n    left: 0;\n    right: auto; }\n  .large-pull-0 {\n    position: relative;\n    right: 0;\n    left: auto; }\n  .large-push-1 {\n    position: relative;\n    left: 8.33333%;\n    right: auto; }\n  .large-pull-1 {\n    position: relative;\n    right: 8.33333%;\n    left: auto; }\n  .large-push-2 {\n    position: relative;\n    left: 16.66667%;\n    right: auto; }\n  .large-pull-2 {\n    position: relative;\n    right: 16.66667%;\n    left: auto; }\n  .large-push-3 {\n    position: relative;\n    left: 25%;\n    right: auto; }\n  .large-pull-3 {\n    position: relative;\n    right: 25%;\n    left: auto; }\n  .large-push-4 {\n    position: relative;\n    left: 33.33333%;\n    right: auto; }\n  .large-pull-4 {\n    position: relative;\n    right: 33.33333%;\n    left: auto; }\n  .large-push-5 {\n    position: relative;\n    left: 41.66667%;\n    right: auto; }\n  .large-pull-5 {\n    position: relative;\n    right: 41.66667%;\n    left: auto; }\n  .large-push-6 {\n    position: relative;\n    left: 50%;\n    right: auto; }\n  .large-pull-6 {\n    position: relative;\n    right: 50%;\n    left: auto; }\n  .large-push-7 {\n    position: relative;\n    left: 58.33333%;\n    right: auto; }\n  .large-pull-7 {\n    position: relative;\n    right: 58.33333%;\n    left: auto; }\n  .large-push-8 {\n    position: relative;\n    left: 66.66667%;\n    right: auto; }\n  .large-pull-8 {\n    position: relative;\n    right: 66.66667%;\n    left: auto; }\n  .large-push-9 {\n    position: relative;\n    left: 75%;\n    right: auto; }\n  .large-pull-9 {\n    position: relative;\n    right: 75%;\n    left: auto; }\n  .large-push-10 {\n    position: relative;\n    left: 83.33333%;\n    right: auto; }\n  .large-pull-10 {\n    position: relative;\n    right: 83.33333%;\n    left: auto; }\n  .large-push-11 {\n    position: relative;\n    left: 91.66667%;\n    right: auto; }\n  .large-pull-11 {\n    position: relative;\n    right: 91.66667%;\n    left: auto; }\n  .column, .columns {\n    position: relative;\n    padding-left: 0.9375rem;\n    padding-right: 0.9375rem;\n    float: left; }\n  .large-1 {\n    width: 8.33333%; }\n  .large-2 {\n    width: 16.66667%; }\n  .large-3 {\n    width: 25%; }\n  .large-4 {\n    width: 33.33333%; }\n  .large-5 {\n    width: 41.66667%; }\n  .large-6 {\n    width: 50%; }\n  .large-7 {\n    width: 58.33333%; }\n  .large-8 {\n    width: 66.66667%; }\n  .large-9 {\n    width: 75%; }\n  .large-10 {\n    width: 83.33333%; }\n  .large-11 {\n    width: 91.66667%; }\n  .large-12 {\n    width: 100%; }\n  .large-offset-0 {\n    margin-left: 0 !important; }\n  .large-offset-1 {\n    margin-left: 8.33333% !important; }\n  .large-offset-2 {\n    margin-left: 16.66667% !important; }\n  .large-offset-3 {\n    margin-left: 25% !important; }\n  .large-offset-4 {\n    margin-left: 33.33333% !important; }\n  .large-offset-5 {\n    margin-left: 41.66667% !important; }\n  .large-offset-6 {\n    margin-left: 50% !important; }\n  .large-offset-7 {\n    margin-left: 58.33333% !important; }\n  .large-offset-8 {\n    margin-left: 66.66667% !important; }\n  .large-offset-9 {\n    margin-left: 75% !important; }\n  .large-offset-10 {\n    margin-left: 83.33333% !important; }\n  .large-offset-11 {\n    margin-left: 91.66667% !important; }\n  .large-reset-order {\n    float: left;\n    left: auto;\n    margin-left: 0;\n    margin-right: 0;\n    right: auto; }\n  .column.large-centered, .columns.large-centered {\n    margin-left: auto;\n    margin-right: auto;\n    float: none; }\n  .column.large-uncentered, .columns.large-uncentered {\n    float: left;\n    margin-left: 0;\n    margin-right: 0; }\n  .column.large-centered:last-child, .columns.large-centered:last-child {\n    float: none; }\n  .column.large-uncentered:last-child, .columns.large-uncentered:last-child {\n    float: left; }\n  .column.large-uncentered.opposite, .columns.large-uncentered.opposite {\n    float: right; }\n  .row.large-collapse > .column, .row.large-collapse > .columns {\n    padding-left: 0;\n    padding-right: 0; }\n  .row.large-collapse .row {\n    margin-left: 0;\n    margin-right: 0; }\n  .row.large-uncollapse > .column, .row.large-uncollapse > .columns {\n    padding-left: 0.9375rem;\n    padding-right: 0.9375rem;\n    float: left; }\n  .push-0 {\n    position: relative;\n    left: 0;\n    right: auto; }\n  .pull-0 {\n    position: relative;\n    right: 0;\n    left: auto; }\n  .push-1 {\n    position: relative;\n    left: 8.33333%;\n    right: auto; }\n  .pull-1 {\n    position: relative;\n    right: 8.33333%;\n    left: auto; }\n  .push-2 {\n    position: relative;\n    left: 16.66667%;\n    right: auto; }\n  .pull-2 {\n    position: relative;\n    right: 16.66667%;\n    left: auto; }\n  .push-3 {\n    position: relative;\n    left: 25%;\n    right: auto; }\n  .pull-3 {\n    position: relative;\n    right: 25%;\n    left: auto; }\n  .push-4 {\n    position: relative;\n    left: 33.33333%;\n    right: auto; }\n  .pull-4 {\n    position: relative;\n    right: 33.33333%;\n    left: auto; }\n  .push-5 {\n    position: relative;\n    left: 41.66667%;\n    right: auto; }\n  .pull-5 {\n    position: relative;\n    right: 41.66667%;\n    left: auto; }\n  .push-6 {\n    position: relative;\n    left: 50%;\n    right: auto; }\n  .pull-6 {\n    position: relative;\n    right: 50%;\n    left: auto; }\n  .push-7 {\n    position: relative;\n    left: 58.33333%;\n    right: auto; }\n  .pull-7 {\n    position: relative;\n    right: 58.33333%;\n    left: auto; }\n  .push-8 {\n    position: relative;\n    left: 66.66667%;\n    right: auto; }\n  .pull-8 {\n    position: relative;\n    right: 66.66667%;\n    left: auto; }\n  .push-9 {\n    position: relative;\n    left: 75%;\n    right: auto; }\n  .pull-9 {\n    position: relative;\n    right: 75%;\n    left: auto; }\n  .push-10 {\n    position: relative;\n    left: 83.33333%;\n    right: auto; }\n  .pull-10 {\n    position: relative;\n    right: 83.33333%;\n    left: auto; }\n  .push-11 {\n    position: relative;\n    left: 91.66667%;\n    right: auto; }\n  .pull-11 {\n    position: relative;\n    right: 91.66667%;\n    left: auto; } }\n\n@media only screen and (min-width:90.0625em) {\n  .xlarge-push-0 {\n    position: relative;\n    left: 0;\n    right: auto; }\n  .xlarge-pull-0 {\n    position: relative;\n    right: 0;\n    left: auto; }\n  .xlarge-push-1 {\n    position: relative;\n    left: 8.33333%;\n    right: auto; }\n  .xlarge-pull-1 {\n    position: relative;\n    right: 8.33333%;\n    left: auto; }\n  .xlarge-push-2 {\n    position: relative;\n    left: 16.66667%;\n    right: auto; }\n  .xlarge-pull-2 {\n    position: relative;\n    right: 16.66667%;\n    left: auto; }\n  .xlarge-push-3 {\n    position: relative;\n    left: 25%;\n    right: auto; }\n  .xlarge-pull-3 {\n    position: relative;\n    right: 25%;\n    left: auto; }\n  .xlarge-push-4 {\n    position: relative;\n    left: 33.33333%;\n    right: auto; }\n  .xlarge-pull-4 {\n    position: relative;\n    right: 33.33333%;\n    left: auto; }\n  .xlarge-push-5 {\n    position: relative;\n    left: 41.66667%;\n    right: auto; }\n  .xlarge-pull-5 {\n    position: relative;\n    right: 41.66667%;\n    left: auto; }\n  .xlarge-push-6 {\n    position: relative;\n    left: 50%;\n    right: auto; }\n  .xlarge-pull-6 {\n    position: relative;\n    right: 50%;\n    left: auto; }\n  .xlarge-push-7 {\n    position: relative;\n    left: 58.33333%;\n    right: auto; }\n  .xlarge-pull-7 {\n    position: relative;\n    right: 58.33333%;\n    left: auto; }\n  .xlarge-push-8 {\n    position: relative;\n    left: 66.66667%;\n    right: auto; }\n  .xlarge-pull-8 {\n    position: relative;\n    right: 66.66667%;\n    left: auto; }\n  .xlarge-push-9 {\n    position: relative;\n    left: 75%;\n    right: auto; }\n  .xlarge-pull-9 {\n    position: relative;\n    right: 75%;\n    left: auto; }\n  .xlarge-push-10 {\n    position: relative;\n    left: 83.33333%;\n    right: auto; }\n  .xlarge-pull-10 {\n    position: relative;\n    right: 83.33333%;\n    left: auto; }\n  .xlarge-push-11 {\n    position: relative;\n    left: 91.66667%;\n    right: auto; }\n  .xlarge-pull-11 {\n    position: relative;\n    right: 91.66667%;\n    left: auto; }\n  .column, .columns {\n    position: relative;\n    padding-left: 0.9375rem;\n    padding-right: 0.9375rem;\n    float: left; }\n  .xlarge-1 {\n    width: 8.33333%; }\n  .xlarge-2 {\n    width: 16.66667%; }\n  .xlarge-3 {\n    width: 25%; }\n  .xlarge-4 {\n    width: 33.33333%; }\n  .xlarge-5 {\n    width: 41.66667%; }\n  .xlarge-6 {\n    width: 50%; }\n  .xlarge-7 {\n    width: 58.33333%; }\n  .xlarge-8 {\n    width: 66.66667%; }\n  .xlarge-9 {\n    width: 75%; }\n  .xlarge-10 {\n    width: 83.33333%; }\n  .xlarge-11 {\n    width: 91.66667%; }\n  .xlarge-12 {\n    width: 100%; }\n  .xlarge-offset-0 {\n    margin-left: 0 !important; }\n  .xlarge-offset-1 {\n    margin-left: 8.33333% !important; }\n  .xlarge-offset-2 {\n    margin-left: 16.66667% !important; }\n  .xlarge-offset-3 {\n    margin-left: 25% !important; }\n  .xlarge-offset-4 {\n    margin-left: 33.33333% !important; }\n  .xlarge-offset-5 {\n    margin-left: 41.66667% !important; }\n  .xlarge-offset-6 {\n    margin-left: 50% !important; }\n  .xlarge-offset-7 {\n    margin-left: 58.33333% !important; }\n  .xlarge-offset-8 {\n    margin-left: 66.66667% !important; }\n  .xlarge-offset-9 {\n    margin-left: 75% !important; }\n  .xlarge-offset-10 {\n    margin-left: 83.33333% !important; }\n  .xlarge-offset-11 {\n    margin-left: 91.66667% !important; }\n  .xlarge-reset-order {\n    float: left;\n    left: auto;\n    margin-left: 0;\n    margin-right: 0;\n    right: auto; }\n  .column.xlarge-centered, .columns.xlarge-centered {\n    margin-left: auto;\n    margin-right: auto;\n    float: none; }\n  .column.xlarge-uncentered, .columns.xlarge-uncentered {\n    float: left;\n    margin-left: 0;\n    margin-right: 0; }\n  .column.xlarge-centered:last-child, .columns.xlarge-centered:last-child {\n    float: none; }\n  .column.xlarge-uncentered:last-child, .columns.xlarge-uncentered:last-child {\n    float: left; }\n  .column.xlarge-uncentered.opposite, .columns.xlarge-uncentered.opposite {\n    float: right; }\n  .row.xlarge-collapse > .column, .row.xlarge-collapse > .columns {\n    padding-left: 0;\n    padding-right: 0; }\n  .row.xlarge-collapse .row {\n    margin-left: 0;\n    margin-right: 0; }\n  .row.xlarge-uncollapse > .column, .row.xlarge-uncollapse > .columns {\n    padding-left: 0.9375rem;\n    padding-right: 0.9375rem;\n    float: left; } }\n\n@media only screen and (min-width:120.0625em) {\n  .xxlarge-push-0 {\n    position: relative;\n    left: 0;\n    right: auto; }\n  .xxlarge-pull-0 {\n    position: relative;\n    right: 0;\n    left: auto; }\n  .xxlarge-push-1 {\n    position: relative;\n    left: 8.33333%;\n    right: auto; }\n  .xxlarge-pull-1 {\n    position: relative;\n    right: 8.33333%;\n    left: auto; }\n  .xxlarge-push-2 {\n    position: relative;\n    left: 16.66667%;\n    right: auto; }\n  .xxlarge-pull-2 {\n    position: relative;\n    right: 16.66667%;\n    left: auto; }\n  .xxlarge-push-3 {\n    position: relative;\n    left: 25%;\n    right: auto; }\n  .xxlarge-pull-3 {\n    position: relative;\n    right: 25%;\n    left: auto; }\n  .xxlarge-push-4 {\n    position: relative;\n    left: 33.33333%;\n    right: auto; }\n  .xxlarge-pull-4 {\n    position: relative;\n    right: 33.33333%;\n    left: auto; }\n  .xxlarge-push-5 {\n    position: relative;\n    left: 41.66667%;\n    right: auto; }\n  .xxlarge-pull-5 {\n    position: relative;\n    right: 41.66667%;\n    left: auto; }\n  .xxlarge-push-6 {\n    position: relative;\n    left: 50%;\n    right: auto; }\n  .xxlarge-pull-6 {\n    position: relative;\n    right: 50%;\n    left: auto; }\n  .xxlarge-push-7 {\n    position: relative;\n    left: 58.33333%;\n    right: auto; }\n  .xxlarge-pull-7 {\n    position: relative;\n    right: 58.33333%;\n    left: auto; }\n  .xxlarge-push-8 {\n    position: relative;\n    left: 66.66667%;\n    right: auto; }\n  .xxlarge-pull-8 {\n    position: relative;\n    right: 66.66667%;\n    left: auto; }\n  .xxlarge-push-9 {\n    position: relative;\n    left: 75%;\n    right: auto; }\n  .xxlarge-pull-9 {\n    position: relative;\n    right: 75%;\n    left: auto; }\n  .xxlarge-push-10 {\n    position: relative;\n    left: 83.33333%;\n    right: auto; }\n  .xxlarge-pull-10 {\n    position: relative;\n    right: 83.33333%;\n    left: auto; }\n  .xxlarge-push-11 {\n    position: relative;\n    left: 91.66667%;\n    right: auto; }\n  .xxlarge-pull-11 {\n    position: relative;\n    right: 91.66667%;\n    left: auto; }\n  .column, .columns {\n    position: relative;\n    padding-left: 0.9375rem;\n    padding-right: 0.9375rem;\n    float: left; }\n  .xxlarge-1 {\n    width: 8.33333%; }\n  .xxlarge-2 {\n    width: 16.66667%; }\n  .xxlarge-3 {\n    width: 25%; }\n  .xxlarge-4 {\n    width: 33.33333%; }\n  .xxlarge-5 {\n    width: 41.66667%; }\n  .xxlarge-6 {\n    width: 50%; }\n  .xxlarge-7 {\n    width: 58.33333%; }\n  .xxlarge-8 {\n    width: 66.66667%; }\n  .xxlarge-9 {\n    width: 75%; }\n  .xxlarge-10 {\n    width: 83.33333%; }\n  .xxlarge-11 {\n    width: 91.66667%; }\n  .xxlarge-12 {\n    width: 100%; }\n  .xxlarge-offset-0 {\n    margin-left: 0 !important; }\n  .xxlarge-offset-1 {\n    margin-left: 8.33333% !important; }\n  .xxlarge-offset-2 {\n    margin-left: 16.66667% !important; }\n  .xxlarge-offset-3 {\n    margin-left: 25% !important; }\n  .xxlarge-offset-4 {\n    margin-left: 33.33333% !important; }\n  .xxlarge-offset-5 {\n    margin-left: 41.66667% !important; }\n  .xxlarge-offset-6 {\n    margin-left: 50% !important; }\n  .xxlarge-offset-7 {\n    margin-left: 58.33333% !important; }\n  .xxlarge-offset-8 {\n    margin-left: 66.66667% !important; }\n  .xxlarge-offset-9 {\n    margin-left: 75% !important; }\n  .xxlarge-offset-10 {\n    margin-left: 83.33333% !important; }\n  .xxlarge-offset-11 {\n    margin-left: 91.66667% !important; }\n  .xxlarge-reset-order {\n    float: left;\n    left: auto;\n    margin-left: 0;\n    margin-right: 0;\n    right: auto; }\n  .column.xxlarge-centered, .columns.xxlarge-centered {\n    margin-left: auto;\n    margin-right: auto;\n    float: none; }\n  .column.xxlarge-uncentered, .columns.xxlarge-uncentered {\n    float: left;\n    margin-left: 0;\n    margin-right: 0; }\n  .column.xxlarge-centered:last-child, .columns.xxlarge-centered:last-child {\n    float: none; }\n  .column.xxlarge-uncentered:last-child, .columns.xxlarge-uncentered:last-child {\n    float: left; }\n  .column.xxlarge-uncentered.opposite, .columns.xxlarge-uncentered.opposite {\n    float: right; }\n  .row.xxlarge-collapse > .column, .row.xxlarge-collapse > .columns {\n    padding-left: 0;\n    padding-right: 0; }\n  .row.xxlarge-collapse .row {\n    margin-left: 0;\n    margin-right: 0; }\n  .row.xxlarge-uncollapse > .column, .row.xxlarge-uncollapse > .columns {\n    padding-left: 0.9375rem;\n    padding-right: 0.9375rem;\n    float: left; } }\n\n/* small displays */\n@media only screen {\n  .show-for-small-only, .show-for-small-up, .show-for-small, .show-for-small-down, .hide-for-medium-only, .hide-for-medium-up, .hide-for-medium, .show-for-medium-down, .hide-for-large-only, .hide-for-large-up, .hide-for-large, .show-for-large-down, .hide-for-xlarge-only, .hide-for-xlarge-up, .hide-for-xlarge, .show-for-xlarge-down, .hide-for-xxlarge-only, .hide-for-xxlarge-up, .hide-for-xxlarge, .show-for-xxlarge-down {\n    display: inherit !important; }\n  .hide-for-small-only, .hide-for-small-up, .hide-for-small, .hide-for-small-down, .show-for-medium-only, .show-for-medium-up, .show-for-medium, .hide-for-medium-down, .show-for-large-only, .show-for-large-up, .show-for-large, .hide-for-large-down, .show-for-xlarge-only, .show-for-xlarge-up, .show-for-xlarge, .hide-for-xlarge-down, .show-for-xxlarge-only, .show-for-xxlarge-up, .show-for-xxlarge, .hide-for-xxlarge-down {\n    display: none !important; }\n  .visible-for-small-only, .visible-for-small-up, .visible-for-small, .visible-for-small-down, .hidden-for-medium-only, .hidden-for-medium-up, .hidden-for-medium, .visible-for-medium-down, .hidden-for-large-only, .hidden-for-large-up, .hidden-for-large, .visible-for-large-down, .hidden-for-xlarge-only, .hidden-for-xlarge-up, .hidden-for-xlarge, .visible-for-xlarge-down, .hidden-for-xxlarge-only, .hidden-for-xxlarge-up, .hidden-for-xxlarge, .visible-for-xxlarge-down {\n    position: static !important;\n    height: auto;\n    width: auto;\n    overflow: visible;\n    clip: auto; }\n  .hidden-for-small-only, .hidden-for-small-up, .hidden-for-small, .hidden-for-small-down, .visible-for-medium-only, .visible-for-medium-up, .visible-for-medium, .hidden-for-medium-down, .visible-for-large-only, .visible-for-large-up, .visible-for-large, .hidden-for-large-down, .visible-for-xlarge-only, .visible-for-xlarge-up, .visible-for-xlarge, .hidden-for-xlarge-down, .visible-for-xxlarge-only, .visible-for-xxlarge-up, .visible-for-xxlarge, .hidden-for-xxlarge-down {\n    clip: rect(1px, 1px, 1px, 1px);\n    height: 1px;\n    overflow: hidden;\n    position: absolute !important;\n    width: 1px; }\n  table.show-for-small-only, table.show-for-small-up, table.show-for-small, table.show-for-small-down, table.hide-for-medium-only, table.hide-for-medium-up, table.hide-for-medium, table.show-for-medium-down, table.hide-for-large-only, table.hide-for-large-up, table.hide-for-large, table.show-for-large-down, table.hide-for-xlarge-only, table.hide-for-xlarge-up, table.hide-for-xlarge, table.show-for-xlarge-down, table.hide-for-xxlarge-only, table.hide-for-xxlarge-up, table.hide-for-xxlarge, table.show-for-xxlarge-down {\n    display: table !important; }\n  thead.show-for-small-only, thead.show-for-small-up, thead.show-for-small, thead.show-for-small-down, thead.hide-for-medium-only, thead.hide-for-medium-up, thead.hide-for-medium, thead.show-for-medium-down, thead.hide-for-large-only, thead.hide-for-large-up, thead.hide-for-large, thead.show-for-large-down, thead.hide-for-xlarge-only, thead.hide-for-xlarge-up, thead.hide-for-xlarge, thead.show-for-xlarge-down, thead.hide-for-xxlarge-only, thead.hide-for-xxlarge-up, thead.hide-for-xxlarge, thead.show-for-xxlarge-down {\n    display: table-header-group !important; }\n  tbody.show-for-small-only, tbody.show-for-small-up, tbody.show-for-small, tbody.show-for-small-down, tbody.hide-for-medium-only, tbody.hide-for-medium-up, tbody.hide-for-medium, tbody.show-for-medium-down, tbody.hide-for-large-only, tbody.hide-for-large-up, tbody.hide-for-large, tbody.show-for-large-down, tbody.hide-for-xlarge-only, tbody.hide-for-xlarge-up, tbody.hide-for-xlarge, tbody.show-for-xlarge-down, tbody.hide-for-xxlarge-only, tbody.hide-for-xxlarge-up, tbody.hide-for-xxlarge, tbody.show-for-xxlarge-down {\n    display: table-row-group !important; }\n  tr.show-for-small-only, tr.show-for-small-up, tr.show-for-small, tr.show-for-small-down, tr.hide-for-medium-only, tr.hide-for-medium-up, tr.hide-for-medium, tr.show-for-medium-down, tr.hide-for-large-only, tr.hide-for-large-up, tr.hide-for-large, tr.show-for-large-down, tr.hide-for-xlarge-only, tr.hide-for-xlarge-up, tr.hide-for-xlarge, tr.show-for-xlarge-down, tr.hide-for-xxlarge-only, tr.hide-for-xxlarge-up, tr.hide-for-xxlarge, tr.show-for-xxlarge-down {\n    display: table-row; }\n  th.show-for-small-only, td.show-for-small-only, th.show-for-small-up, td.show-for-small-up, th.show-for-small, td.show-for-small, th.show-for-small-down, td.show-for-small-down, th.hide-for-medium-only, td.hide-for-medium-only, th.hide-for-medium-up, td.hide-for-medium-up, th.hide-for-medium, td.hide-for-medium, th.show-for-medium-down, td.show-for-medium-down, th.hide-for-large-only, td.hide-for-large-only, th.hide-for-large-up, td.hide-for-large-up, th.hide-for-large, td.hide-for-large, th.show-for-large-down, td.show-for-large-down, th.hide-for-xlarge-only, td.hide-for-xlarge-only, th.hide-for-xlarge-up, td.hide-for-xlarge-up, th.hide-for-xlarge, td.hide-for-xlarge, th.show-for-xlarge-down, td.show-for-xlarge-down, th.hide-for-xxlarge-only, td.hide-for-xxlarge-only, th.hide-for-xxlarge-up, td.hide-for-xxlarge-up, th.hide-for-xxlarge, td.hide-for-xxlarge, th.show-for-xxlarge-down, td.show-for-xxlarge-down {\n    display: table-cell !important; } }\n\n/* medium displays */\n@media only screen and (min-width:40.0625em) {\n  .hide-for-small-only, .show-for-small-up, .hide-for-small, .hide-for-small-down, .show-for-medium-only, .show-for-medium-up, .show-for-medium, .show-for-medium-down, .hide-for-large-only, .hide-for-large-up, .hide-for-large, .show-for-large-down, .hide-for-xlarge-only, .hide-for-xlarge-up, .hide-for-xlarge, .show-for-xlarge-down, .hide-for-xxlarge-only, .hide-for-xxlarge-up, .hide-for-xxlarge, .show-for-xxlarge-down {\n    display: inherit !important; }\n  .show-for-small-only, .hide-for-small-up, .show-for-small, .show-for-small-down, .hide-for-medium-only, .hide-for-medium-up, .hide-for-medium, .hide-for-medium-down, .show-for-large-only, .show-for-large-up, .show-for-large, .hide-for-large-down, .show-for-xlarge-only, .show-for-xlarge-up, .show-for-xlarge, .hide-for-xlarge-down, .show-for-xxlarge-only, .show-for-xxlarge-up, .show-for-xxlarge, .hide-for-xxlarge-down {\n    display: none !important; }\n  .hidden-for-small-only, .visible-for-small-up, .hidden-for-small, .hidden-for-small-down, .visible-for-medium-only, .visible-for-medium-up, .visible-for-medium, .visible-for-medium-down, .hidden-for-large-only, .hidden-for-large-up, .hidden-for-large, .visible-for-large-down, .hidden-for-xlarge-only, .hidden-for-xlarge-up, .hidden-for-xlarge, .visible-for-xlarge-down, .hidden-for-xxlarge-only, .hidden-for-xxlarge-up, .hidden-for-xxlarge, .visible-for-xxlarge-down {\n    position: static !important;\n    height: auto;\n    width: auto;\n    overflow: visible;\n    clip: auto; }\n  .visible-for-small-only, .hidden-for-small-up, .visible-for-small, .visible-for-small-down, .hidden-for-medium-only, .hidden-for-medium-up, .hidden-for-medium, .hidden-for-medium-down, .visible-for-large-only, .visible-for-large-up, .visible-for-large, .hidden-for-large-down, .visible-for-xlarge-only, .visible-for-xlarge-up, .visible-for-xlarge, .hidden-for-xlarge-down, .visible-for-xxlarge-only, .visible-for-xxlarge-up, .visible-for-xxlarge, .hidden-for-xxlarge-down {\n    clip: rect(1px, 1px, 1px, 1px);\n    height: 1px;\n    overflow: hidden;\n    position: absolute !important;\n    width: 1px; }\n  table.hide-for-small-only, table.show-for-small-up, table.hide-for-small, table.hide-for-small-down, table.show-for-medium-only, table.show-for-medium-up, table.show-for-medium, table.show-for-medium-down, table.hide-for-large-only, table.hide-for-large-up, table.hide-for-large, table.show-for-large-down, table.hide-for-xlarge-only, table.hide-for-xlarge-up, table.hide-for-xlarge, table.show-for-xlarge-down, table.hide-for-xxlarge-only, table.hide-for-xxlarge-up, table.hide-for-xxlarge, table.show-for-xxlarge-down {\n    display: table !important; }\n  thead.hide-for-small-only, thead.show-for-small-up, thead.hide-for-small, thead.hide-for-small-down, thead.show-for-medium-only, thead.show-for-medium-up, thead.show-for-medium, thead.show-for-medium-down, thead.hide-for-large-only, thead.hide-for-large-up, thead.hide-for-large, thead.show-for-large-down, thead.hide-for-xlarge-only, thead.hide-for-xlarge-up, thead.hide-for-xlarge, thead.show-for-xlarge-down, thead.hide-for-xxlarge-only, thead.hide-for-xxlarge-up, thead.hide-for-xxlarge, thead.show-for-xxlarge-down {\n    display: table-header-group !important; }\n  tbody.hide-for-small-only, tbody.show-for-small-up, tbody.hide-for-small, tbody.hide-for-small-down, tbody.show-for-medium-only, tbody.show-for-medium-up, tbody.show-for-medium, tbody.show-for-medium-down, tbody.hide-for-large-only, tbody.hide-for-large-up, tbody.hide-for-large, tbody.show-for-large-down, tbody.hide-for-xlarge-only, tbody.hide-for-xlarge-up, tbody.hide-for-xlarge, tbody.show-for-xlarge-down, tbody.hide-for-xxlarge-only, tbody.hide-for-xxlarge-up, tbody.hide-for-xxlarge, tbody.show-for-xxlarge-down {\n    display: table-row-group !important; }\n  tr.hide-for-small-only, tr.show-for-small-up, tr.hide-for-small, tr.hide-for-small-down, tr.show-for-medium-only, tr.show-for-medium-up, tr.show-for-medium, tr.show-for-medium-down, tr.hide-for-large-only, tr.hide-for-large-up, tr.hide-for-large, tr.show-for-large-down, tr.hide-for-xlarge-only, tr.hide-for-xlarge-up, tr.hide-for-xlarge, tr.show-for-xlarge-down, tr.hide-for-xxlarge-only, tr.hide-for-xxlarge-up, tr.hide-for-xxlarge, tr.show-for-xxlarge-down {\n    display: table-row; }\n  th.hide-for-small-only, td.hide-for-small-only, th.show-for-small-up, td.show-for-small-up, th.hide-for-small, td.hide-for-small, th.hide-for-small-down, td.hide-for-small-down, th.show-for-medium-only, td.show-for-medium-only, th.show-for-medium-up, td.show-for-medium-up, th.show-for-medium, td.show-for-medium, th.show-for-medium-down, td.show-for-medium-down, th.hide-for-large-only, td.hide-for-large-only, th.hide-for-large-up, td.hide-for-large-up, th.hide-for-large, td.hide-for-large, th.show-for-large-down, td.show-for-large-down, th.hide-for-xlarge-only, td.hide-for-xlarge-only, th.hide-for-xlarge-up, td.hide-for-xlarge-up, th.hide-for-xlarge, td.hide-for-xlarge, th.show-for-xlarge-down, td.show-for-xlarge-down, th.hide-for-xxlarge-only, td.hide-for-xxlarge-only, th.hide-for-xxlarge-up, td.hide-for-xxlarge-up, th.hide-for-xxlarge, td.hide-for-xxlarge, th.show-for-xxlarge-down, td.show-for-xxlarge-down {\n    display: table-cell !important; } }\n\n/* large displays */\n@media only screen and (min-width:64.0625em) {\n  .hide-for-small-only, .show-for-small-up, .hide-for-small, .hide-for-small-down, .hide-for-medium-only, .show-for-medium-up, .hide-for-medium, .hide-for-medium-down, .show-for-large-only, .show-for-large-up, .show-for-large, .show-for-large-down, .hide-for-xlarge-only, .hide-for-xlarge-up, .hide-for-xlarge, .show-for-xlarge-down, .hide-for-xxlarge-only, .hide-for-xxlarge-up, .hide-for-xxlarge, .show-for-xxlarge-down {\n    display: inherit !important; }\n  .show-for-small-only, .hide-for-small-up, .show-for-small, .show-for-small-down, .show-for-medium-only, .hide-for-medium-up, .show-for-medium, .show-for-medium-down, .hide-for-large-only, .hide-for-large-up, .hide-for-large, .hide-for-large-down, .show-for-xlarge-only, .show-for-xlarge-up, .show-for-xlarge, .hide-for-xlarge-down, .show-for-xxlarge-only, .show-for-xxlarge-up, .show-for-xxlarge, .hide-for-xxlarge-down {\n    display: none !important; }\n  .hidden-for-small-only, .visible-for-small-up, .hidden-for-small, .hidden-for-small-down, .hidden-for-medium-only, .visible-for-medium-up, .hidden-for-medium, .hidden-for-medium-down, .visible-for-large-only, .visible-for-large-up, .visible-for-large, .visible-for-large-down, .hidden-for-xlarge-only, .hidden-for-xlarge-up, .hidden-for-xlarge, .visible-for-xlarge-down, .hidden-for-xxlarge-only, .hidden-for-xxlarge-up, .hidden-for-xxlarge, .visible-for-xxlarge-down {\n    position: static !important;\n    height: auto;\n    width: auto;\n    overflow: visible;\n    clip: auto; }\n  .visible-for-small-only, .hidden-for-small-up, .visible-for-small, .visible-for-small-down, .visible-for-medium-only, .hidden-for-medium-up, .visible-for-medium, .visible-for-medium-down, .hidden-for-large-only, .hidden-for-large-up, .hidden-for-large, .hidden-for-large-down, .visible-for-xlarge-only, .visible-for-xlarge-up, .visible-for-xlarge, .hidden-for-xlarge-down, .visible-for-xxlarge-only, .visible-for-xxlarge-up, .visible-for-xxlarge, .hidden-for-xxlarge-down {\n    clip: rect(1px, 1px, 1px, 1px);\n    height: 1px;\n    overflow: hidden;\n    position: absolute !important;\n    width: 1px; }\n  table.hide-for-small-only, table.show-for-small-up, table.hide-for-small, table.hide-for-small-down, table.hide-for-medium-only, table.show-for-medium-up, table.hide-for-medium, table.hide-for-medium-down, table.show-for-large-only, table.show-for-large-up, table.show-for-large, table.show-for-large-down, table.hide-for-xlarge-only, table.hide-for-xlarge-up, table.hide-for-xlarge, table.show-for-xlarge-down, table.hide-for-xxlarge-only, table.hide-for-xxlarge-up, table.hide-for-xxlarge, table.show-for-xxlarge-down {\n    display: table !important; }\n  thead.hide-for-small-only, thead.show-for-small-up, thead.hide-for-small, thead.hide-for-small-down, thead.hide-for-medium-only, thead.show-for-medium-up, thead.hide-for-medium, thead.hide-for-medium-down, thead.show-for-large-only, thead.show-for-large-up, thead.show-for-large, thead.show-for-large-down, thead.hide-for-xlarge-only, thead.hide-for-xlarge-up, thead.hide-for-xlarge, thead.show-for-xlarge-down, thead.hide-for-xxlarge-only, thead.hide-for-xxlarge-up, thead.hide-for-xxlarge, thead.show-for-xxlarge-down {\n    display: table-header-group !important; }\n  tbody.hide-for-small-only, tbody.show-for-small-up, tbody.hide-for-small, tbody.hide-for-small-down, tbody.hide-for-medium-only, tbody.show-for-medium-up, tbody.hide-for-medium, tbody.hide-for-medium-down, tbody.show-for-large-only, tbody.show-for-large-up, tbody.show-for-large, tbody.show-for-large-down, tbody.hide-for-xlarge-only, tbody.hide-for-xlarge-up, tbody.hide-for-xlarge, tbody.show-for-xlarge-down, tbody.hide-for-xxlarge-only, tbody.hide-for-xxlarge-up, tbody.hide-for-xxlarge, tbody.show-for-xxlarge-down {\n    display: table-row-group !important; }\n  tr.hide-for-small-only, tr.show-for-small-up, tr.hide-for-small, tr.hide-for-small-down, tr.hide-for-medium-only, tr.show-for-medium-up, tr.hide-for-medium, tr.hide-for-medium-down, tr.show-for-large-only, tr.show-for-large-up, tr.show-for-large, tr.show-for-large-down, tr.hide-for-xlarge-only, tr.hide-for-xlarge-up, tr.hide-for-xlarge, tr.show-for-xlarge-down, tr.hide-for-xxlarge-only, tr.hide-for-xxlarge-up, tr.hide-for-xxlarge, tr.show-for-xxlarge-down {\n    display: table-row; }\n  th.hide-for-small-only, td.hide-for-small-only, th.show-for-small-up, td.show-for-small-up, th.hide-for-small, td.hide-for-small, th.hide-for-small-down, td.hide-for-small-down, th.hide-for-medium-only, td.hide-for-medium-only, th.show-for-medium-up, td.show-for-medium-up, th.hide-for-medium, td.hide-for-medium, th.hide-for-medium-down, td.hide-for-medium-down, th.show-for-large-only, td.show-for-large-only, th.show-for-large-up, td.show-for-large-up, th.show-for-large, td.show-for-large, th.show-for-large-down, td.show-for-large-down, th.hide-for-xlarge-only, td.hide-for-xlarge-only, th.hide-for-xlarge-up, td.hide-for-xlarge-up, th.hide-for-xlarge, td.hide-for-xlarge, th.show-for-xlarge-down, td.show-for-xlarge-down, th.hide-for-xxlarge-only, td.hide-for-xxlarge-only, th.hide-for-xxlarge-up, td.hide-for-xxlarge-up, th.hide-for-xxlarge, td.hide-for-xxlarge, th.show-for-xxlarge-down, td.show-for-xxlarge-down {\n    display: table-cell !important; } }\n\n/* xlarge displays */\n@media only screen and (min-width:90.0625em) {\n  .hide-for-small-only, .show-for-small-up, .hide-for-small, .hide-for-small-down, .hide-for-medium-only, .show-for-medium-up, .hide-for-medium, .hide-for-medium-down, .hide-for-large-only, .show-for-large-up, .hide-for-large, .hide-for-large-down, .show-for-xlarge-only, .show-for-xlarge-up, .show-for-xlarge, .show-for-xlarge-down, .hide-for-xxlarge-only, .hide-for-xxlarge-up, .hide-for-xxlarge, .show-for-xxlarge-down {\n    display: inherit !important; }\n  .show-for-small-only, .hide-for-small-up, .show-for-small, .show-for-small-down, .show-for-medium-only, .hide-for-medium-up, .show-for-medium, .show-for-medium-down, .show-for-large-only, .hide-for-large-up, .show-for-large, .show-for-large-down, .hide-for-xlarge-only, .hide-for-xlarge-up, .hide-for-xlarge, .hide-for-xlarge-down, .show-for-xxlarge-only, .show-for-xxlarge-up, .show-for-xxlarge, .hide-for-xxlarge-down {\n    display: none !important; }\n  .hidden-for-small-only, .visible-for-small-up, .hidden-for-small, .hidden-for-small-down, .hidden-for-medium-only, .visible-for-medium-up, .hidden-for-medium, .hidden-for-medium-down, .hidden-for-large-only, .visible-for-large-up, .hidden-for-large, .hidden-for-large-down, .visible-for-xlarge-only, .visible-for-xlarge-up, .visible-for-xlarge, .visible-for-xlarge-down, .hidden-for-xxlarge-only, .hidden-for-xxlarge-up, .hidden-for-xxlarge, .visible-for-xxlarge-down {\n    position: static !important;\n    height: auto;\n    width: auto;\n    overflow: visible;\n    clip: auto; }\n  .visible-for-small-only, .hidden-for-small-up, .visible-for-small, .visible-for-small-down, .visible-for-medium-only, .hidden-for-medium-up, .visible-for-medium, .visible-for-medium-down, .visible-for-large-only, .hidden-for-large-up, .visible-for-large, .visible-for-large-down, .hidden-for-xlarge-only, .hidden-for-xlarge-up, .hidden-for-xlarge, .hidden-for-xlarge-down, .visible-for-xxlarge-only, .visible-for-xxlarge-up, .visible-for-xxlarge, .hidden-for-xxlarge-down {\n    clip: rect(1px, 1px, 1px, 1px);\n    height: 1px;\n    overflow: hidden;\n    position: absolute !important;\n    width: 1px; }\n  table.hide-for-small-only, table.show-for-small-up, table.hide-for-small, table.hide-for-small-down, table.hide-for-medium-only, table.show-for-medium-up, table.hide-for-medium, table.hide-for-medium-down, table.hide-for-large-only, table.show-for-large-up, table.hide-for-large, table.hide-for-large-down, table.show-for-xlarge-only, table.show-for-xlarge-up, table.show-for-xlarge, table.show-for-xlarge-down, table.hide-for-xxlarge-only, table.hide-for-xxlarge-up, table.hide-for-xxlarge, table.show-for-xxlarge-down {\n    display: table !important; }\n  thead.hide-for-small-only, thead.show-for-small-up, thead.hide-for-small, thead.hide-for-small-down, thead.hide-for-medium-only, thead.show-for-medium-up, thead.hide-for-medium, thead.hide-for-medium-down, thead.hide-for-large-only, thead.show-for-large-up, thead.hide-for-large, thead.hide-for-large-down, thead.show-for-xlarge-only, thead.show-for-xlarge-up, thead.show-for-xlarge, thead.show-for-xlarge-down, thead.hide-for-xxlarge-only, thead.hide-for-xxlarge-up, thead.hide-for-xxlarge, thead.show-for-xxlarge-down {\n    display: table-header-group !important; }\n  tbody.hide-for-small-only, tbody.show-for-small-up, tbody.hide-for-small, tbody.hide-for-small-down, tbody.hide-for-medium-only, tbody.show-for-medium-up, tbody.hide-for-medium, tbody.hide-for-medium-down, tbody.hide-for-large-only, tbody.show-for-large-up, tbody.hide-for-large, tbody.hide-for-large-down, tbody.show-for-xlarge-only, tbody.show-for-xlarge-up, tbody.show-for-xlarge, tbody.show-for-xlarge-down, tbody.hide-for-xxlarge-only, tbody.hide-for-xxlarge-up, tbody.hide-for-xxlarge, tbody.show-for-xxlarge-down {\n    display: table-row-group !important; }\n  tr.hide-for-small-only, tr.show-for-small-up, tr.hide-for-small, tr.hide-for-small-down, tr.hide-for-medium-only, tr.show-for-medium-up, tr.hide-for-medium, tr.hide-for-medium-down, tr.hide-for-large-only, tr.show-for-large-up, tr.hide-for-large, tr.hide-for-large-down, tr.show-for-xlarge-only, tr.show-for-xlarge-up, tr.show-for-xlarge, tr.show-for-xlarge-down, tr.hide-for-xxlarge-only, tr.hide-for-xxlarge-up, tr.hide-for-xxlarge, tr.show-for-xxlarge-down {\n    display: table-row; }\n  th.hide-for-small-only, td.hide-for-small-only, th.show-for-small-up, td.show-for-small-up, th.hide-for-small, td.hide-for-small, th.hide-for-small-down, td.hide-for-small-down, th.hide-for-medium-only, td.hide-for-medium-only, th.show-for-medium-up, td.show-for-medium-up, th.hide-for-medium, td.hide-for-medium, th.hide-for-medium-down, td.hide-for-medium-down, th.hide-for-large-only, td.hide-for-large-only, th.show-for-large-up, td.show-for-large-up, th.hide-for-large, td.hide-for-large, th.hide-for-large-down, td.hide-for-large-down, th.show-for-xlarge-only, td.show-for-xlarge-only, th.show-for-xlarge-up, td.show-for-xlarge-up, th.show-for-xlarge, td.show-for-xlarge, th.show-for-xlarge-down, td.show-for-xlarge-down, th.hide-for-xxlarge-only, td.hide-for-xxlarge-only, th.hide-for-xxlarge-up, td.hide-for-xxlarge-up, th.hide-for-xxlarge, td.hide-for-xxlarge, th.show-for-xxlarge-down, td.show-for-xxlarge-down {\n    display: table-cell !important; } }\n\n/* xxlarge displays */\n@media only screen and (min-width:120.0625em) {\n  .hide-for-small-only, .show-for-small-up, .hide-for-small, .hide-for-small-down, .hide-for-medium-only, .show-for-medium-up, .hide-for-medium, .hide-for-medium-down, .hide-for-large-only, .show-for-large-up, .hide-for-large, .hide-for-large-down, .hide-for-xlarge-only, .show-for-xlarge-up, .hide-for-xlarge, .hide-for-xlarge-down, .show-for-xxlarge-only, .show-for-xxlarge-up, .show-for-xxlarge, .show-for-xxlarge-down {\n    display: inherit !important; }\n  .show-for-small-only, .hide-for-small-up, .show-for-small, .show-for-small-down, .show-for-medium-only, .hide-for-medium-up, .show-for-medium, .show-for-medium-down, .show-for-large-only, .hide-for-large-up, .show-for-large, .show-for-large-down, .show-for-xlarge-only, .hide-for-xlarge-up, .show-for-xlarge, .show-for-xlarge-down, .hide-for-xxlarge-only, .hide-for-xxlarge-up, .hide-for-xxlarge, .hide-for-xxlarge-down {\n    display: none !important; }\n  .hidden-for-small-only, .visible-for-small-up, .hidden-for-small, .hidden-for-small-down, .hidden-for-medium-only, .visible-for-medium-up, .hidden-for-medium, .hidden-for-medium-down, .hidden-for-large-only, .visible-for-large-up, .hidden-for-large, .hidden-for-large-down, .hidden-for-xlarge-only, .visible-for-xlarge-up, .hidden-for-xlarge, .hidden-for-xlarge-down, .visible-for-xxlarge-only, .visible-for-xxlarge-up, .visible-for-xxlarge, .visible-for-xxlarge-down {\n    position: static !important;\n    height: auto;\n    width: auto;\n    overflow: visible;\n    clip: auto; }\n  .visible-for-small-only, .hidden-for-small-up, .visible-for-small, .visible-for-small-down, .visible-for-medium-only, .hidden-for-medium-up, .visible-for-medium, .visible-for-medium-down, .visible-for-large-only, .hidden-for-large-up, .visible-for-large, .visible-for-large-down, .visible-for-xlarge-only, .hidden-for-xlarge-up, .visible-for-xlarge, .visible-for-xlarge-down, .hidden-for-xxlarge-only, .hidden-for-xxlarge-up, .hidden-for-xxlarge, .hidden-for-xxlarge-down {\n    clip: rect(1px, 1px, 1px, 1px);\n    height: 1px;\n    overflow: hidden;\n    position: absolute !important;\n    width: 1px; }\n  table.hide-for-small-only, table.show-for-small-up, table.hide-for-small, table.hide-for-small-down, table.hide-for-medium-only, table.show-for-medium-up, table.hide-for-medium, table.hide-for-medium-down, table.hide-for-large-only, table.show-for-large-up, table.hide-for-large, table.hide-for-large-down, table.hide-for-xlarge-only, table.show-for-xlarge-up, table.hide-for-xlarge, table.hide-for-xlarge-down, table.show-for-xxlarge-only, table.show-for-xxlarge-up, table.show-for-xxlarge, table.show-for-xxlarge-down {\n    display: table !important; }\n  thead.hide-for-small-only, thead.show-for-small-up, thead.hide-for-small, thead.hide-for-small-down, thead.hide-for-medium-only, thead.show-for-medium-up, thead.hide-for-medium, thead.hide-for-medium-down, thead.hide-for-large-only, thead.show-for-large-up, thead.hide-for-large, thead.hide-for-large-down, thead.hide-for-xlarge-only, thead.show-for-xlarge-up, thead.hide-for-xlarge, thead.hide-for-xlarge-down, thead.show-for-xxlarge-only, thead.show-for-xxlarge-up, thead.show-for-xxlarge, thead.show-for-xxlarge-down {\n    display: table-header-group !important; }\n  tbody.hide-for-small-only, tbody.show-for-small-up, tbody.hide-for-small, tbody.hide-for-small-down, tbody.hide-for-medium-only, tbody.show-for-medium-up, tbody.hide-for-medium, tbody.hide-for-medium-down, tbody.hide-for-large-only, tbody.show-for-large-up, tbody.hide-for-large, tbody.hide-for-large-down, tbody.hide-for-xlarge-only, tbody.show-for-xlarge-up, tbody.hide-for-xlarge, tbody.hide-for-xlarge-down, tbody.show-for-xxlarge-only, tbody.show-for-xxlarge-up, tbody.show-for-xxlarge, tbody.show-for-xxlarge-down {\n    display: table-row-group !important; }\n  tr.hide-for-small-only, tr.show-for-small-up, tr.hide-for-small, tr.hide-for-small-down, tr.hide-for-medium-only, tr.show-for-medium-up, tr.hide-for-medium, tr.hide-for-medium-down, tr.hide-for-large-only, tr.show-for-large-up, tr.hide-for-large, tr.hide-for-large-down, tr.hide-for-xlarge-only, tr.show-for-xlarge-up, tr.hide-for-xlarge, tr.hide-for-xlarge-down, tr.show-for-xxlarge-only, tr.show-for-xxlarge-up, tr.show-for-xxlarge, tr.show-for-xxlarge-down {\n    display: table-row; }\n  th.hide-for-small-only, td.hide-for-small-only, th.show-for-small-up, td.show-for-small-up, th.hide-for-small, td.hide-for-small, th.hide-for-small-down, td.hide-for-small-down, th.hide-for-medium-only, td.hide-for-medium-only, th.show-for-medium-up, td.show-for-medium-up, th.hide-for-medium, td.hide-for-medium, th.hide-for-medium-down, td.hide-for-medium-down, th.hide-for-large-only, td.hide-for-large-only, th.show-for-large-up, td.show-for-large-up, th.hide-for-large, td.hide-for-large, th.hide-for-large-down, td.hide-for-large-down, th.hide-for-xlarge-only, td.hide-for-xlarge-only, th.show-for-xlarge-up, td.show-for-xlarge-up, th.hide-for-xlarge, td.hide-for-xlarge, th.hide-for-xlarge-down, td.hide-for-xlarge-down, th.show-for-xxlarge-only, td.show-for-xxlarge-only, th.show-for-xxlarge-up, td.show-for-xxlarge-up, th.show-for-xxlarge, td.show-for-xxlarge, th.show-for-xxlarge-down, td.show-for-xxlarge-down {\n    display: table-cell !important; } }\n\n/* Orientation targeting */\n.show-for-landscape, .hide-for-portrait {\n  display: inherit !important; }\n\n.hide-for-landscape, .show-for-portrait {\n  display: none !important; }\n\n/* Specific visibility for tables */\ntable.hide-for-landscape, table.show-for-portrait {\n  display: table !important; }\n\nthead.hide-for-landscape, thead.show-for-portrait {\n  display: table-header-group !important; }\n\ntbody.hide-for-landscape, tbody.show-for-portrait {\n  display: table-row-group !important; }\n\ntr.hide-for-landscape, tr.show-for-portrait {\n  display: table-row !important; }\n\ntd.hide-for-landscape, td.show-for-portrait, th.hide-for-landscape, th.show-for-portrait {\n  display: table-cell !important; }\n\n@media only screen and (orientation: landscape) {\n  .show-for-landscape, .hide-for-portrait {\n    display: inherit !important; }\n  .hide-for-landscape, .show-for-portrait {\n    display: none !important; }\n  /* Specific visibility for tables */\n  table.show-for-landscape, table.hide-for-portrait {\n    display: table !important; }\n  thead.show-for-landscape, thead.hide-for-portrait {\n    display: table-header-group !important; }\n  tbody.show-for-landscape, tbody.hide-for-portrait {\n    display: table-row-group !important; }\n  tr.show-for-landscape, tr.hide-for-portrait {\n    display: table-row !important; }\n  td.show-for-landscape, td.hide-for-portrait, th.show-for-landscape, th.hide-for-portrait {\n    display: table-cell !important; } }\n\n@media only screen and (orientation: portrait) {\n  .show-for-portrait, .hide-for-landscape {\n    display: inherit !important; }\n  .hide-for-portrait, .show-for-landscape {\n    display: none !important; }\n  /* Specific visibility for tables */\n  table.show-for-portrait, table.hide-for-landscape {\n    display: table !important; }\n  thead.show-for-portrait, thead.hide-for-landscape {\n    display: table-header-group !important; }\n  tbody.show-for-portrait, tbody.hide-for-landscape {\n    display: table-row-group !important; }\n  tr.show-for-portrait, tr.hide-for-landscape {\n    display: table-row !important; }\n  td.show-for-portrait, td.hide-for-landscape, th.show-for-portrait, th.hide-for-landscape {\n    display: table-cell !important; } }\n\n/* Touch-enabled device targeting */\n.show-for-touch {\n  display: none !important; }\n\n.hide-for-touch {\n  display: inherit !important; }\n\n.touch .show-for-touch {\n  display: inherit !important; }\n\n.touch .hide-for-touch {\n  display: none !important; }\n\n/* Specific visibility for tables */\ntable.hide-for-touch {\n  display: table !important; }\n\n.touch table.show-for-touch {\n  display: table !important; }\n\nthead.hide-for-touch {\n  display: table-header-group !important; }\n\n.touch thead.show-for-touch {\n  display: table-header-group !important; }\n\ntbody.hide-for-touch {\n  display: table-row-group !important; }\n\n.touch tbody.show-for-touch {\n  display: table-row-group !important; }\n\ntr.hide-for-touch {\n  display: table-row !important; }\n\n.touch tr.show-for-touch {\n  display: table-row !important; }\n\ntd.hide-for-touch {\n  display: table-cell !important; }\n\n.touch td.show-for-touch {\n  display: table-cell !important; }\n\nth.hide-for-touch {\n  display: table-cell !important; }\n\n.touch th.show-for-touch {\n  display: table-cell !important; }\n\n/* Screen reader-specific classes */\n.show-for-sr {\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  overflow: hidden;\n  position: absolute !important;\n  width: 1px; }\n\n.show-on-focus {\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  overflow: hidden;\n  position: absolute !important;\n  width: 1px; }\n  .show-on-focus:focus, .show-on-focus:active {\n    position: static !important;\n    height: auto;\n    width: auto;\n    overflow: visible;\n    clip: auto; }\n\n/*\n       * Print styles.\n       *\n       * Inlined to avoid required HTTP connection: www.phpied.com/delay-loading-your-print-css/\n       * Credit to Paul Irish and HTML5 Boilerplate (html5boilerplate.com)\n      */\n.print-only {\n  display: none !important; }\n\n@media print {\n  * {\n    background: transparent !important;\n    box-shadow: none !important;\n    color: #000000 !important;\n    /* Black prints faster: h5bp.com/s */\n    text-shadow: none !important; }\n  .show-for-print {\n    display: block; }\n  .hide-for-print {\n    display: none; }\n  table.show-for-print {\n    display: table !important; }\n  thead.show-for-print {\n    display: table-header-group !important; }\n  tbody.show-for-print {\n    display: table-row-group !important; }\n  tr.show-for-print {\n    display: table-row !important; }\n  td.show-for-print {\n    display: table-cell !important; }\n  th.show-for-print {\n    display: table-cell !important; }\n  a, a:visited {\n    text-decoration: underline; }\n  a[href]:after {\n    content: \" (\" attr(href) \")\"; }\n  abbr[title]:after {\n    content: \" (\" attr(title) \")\"; }\n  .ir a:after, a[href^=\"javascript:\"]:after, a[href^=\"#\"]:after {\n    content: \"\"; }\n  pre, blockquote {\n    border: 1px solid #999999;\n    page-break-inside: avoid; }\n  thead {\n    display: table-header-group;\n    /* h5bp.com/t */ }\n  tr, img {\n    page-break-inside: avoid; }\n  img {\n    max-width: 100% !important; }\n  @page {\n    margin: .5cm; }\n\n  p, h2, h3 {\n    orphans: 3;\n    widows: 3; }\n  h2, h3 {\n    page-break-after: avoid; }\n  .hide-on-print {\n    display: none !important; }\n  .print-only {\n    display: block !important; }\n  .hide-for-print {\n    display: none !important; }\n  .show-for-print {\n    display: inherit !important; } }\n\n/* Print visibility */\n@media print {\n  .show-for-print {\n    display: block; }\n  .hide-for-print {\n    display: none; }\n  table.show-for-print {\n    display: table !important; }\n  thead.show-for-print {\n    display: table-header-group !important; }\n  tbody.show-for-print {\n    display: table-row-group !important; }\n  tr.show-for-print {\n    display: table-row !important; }\n  td.show-for-print {\n    display: table-cell !important; }\n  th.show-for-print {\n    display: table-cell !important; } }\n\n.text-left {\n  text-align: left !important; }\n\n.text-right {\n  text-align: right !important; }\n\n.text-center {\n  text-align: center !important; }\n\n.text-justify {\n  text-align: justify !important; }\n\n@media only screen and (max-width: 40em) {\n  .small-only-text-left {\n    text-align: left !important; }\n  .small-only-text-right {\n    text-align: right !important; }\n  .small-only-text-center {\n    text-align: center !important; }\n  .small-only-text-justify {\n    text-align: justify !important; } }\n\n@media only screen {\n  .small-text-left {\n    text-align: left !important; }\n  .small-text-right {\n    text-align: right !important; }\n  .small-text-center {\n    text-align: center !important; }\n  .small-text-justify {\n    text-align: justify !important; } }\n\n@media only screen and (min-width:40.0625em) and (max-width:64em) {\n  .medium-only-text-left {\n    text-align: left !important; }\n  .medium-only-text-right {\n    text-align: right !important; }\n  .medium-only-text-center {\n    text-align: center !important; }\n  .medium-only-text-justify {\n    text-align: justify !important; } }\n\n@media only screen and (min-width:40.0625em) {\n  .medium-text-left {\n    text-align: left !important; }\n  .medium-text-right {\n    text-align: right !important; }\n  .medium-text-center {\n    text-align: center !important; }\n  .medium-text-justify {\n    text-align: justify !important; } }\n\n@media only screen and (min-width:64.0625em) and (max-width:90em) {\n  .large-only-text-left {\n    text-align: left !important; }\n  .large-only-text-right {\n    text-align: right !important; }\n  .large-only-text-center {\n    text-align: center !important; }\n  .large-only-text-justify {\n    text-align: justify !important; } }\n\n@media only screen and (min-width:64.0625em) {\n  .large-text-left {\n    text-align: left !important; }\n  .large-text-right {\n    text-align: right !important; }\n  .large-text-center {\n    text-align: center !important; }\n  .large-text-justify {\n    text-align: justify !important; } }\n\n@media only screen and (min-width:90.0625em) and (max-width:120em) {\n  .xlarge-only-text-left {\n    text-align: left !important; }\n  .xlarge-only-text-right {\n    text-align: right !important; }\n  .xlarge-only-text-center {\n    text-align: center !important; }\n  .xlarge-only-text-justify {\n    text-align: justify !important; } }\n\n@media only screen and (min-width:90.0625em) {\n  .xlarge-text-left {\n    text-align: left !important; }\n  .xlarge-text-right {\n    text-align: right !important; }\n  .xlarge-text-center {\n    text-align: center !important; }\n  .xlarge-text-justify {\n    text-align: justify !important; } }\n\n@media only screen and (min-width:120.0625em) and (max-width:99999999em) {\n  .xxlarge-only-text-left {\n    text-align: left !important; }\n  .xxlarge-only-text-right {\n    text-align: right !important; }\n  .xxlarge-only-text-center {\n    text-align: center !important; }\n  .xxlarge-only-text-justify {\n    text-align: justify !important; } }\n\n@media only screen and (min-width:120.0625em) {\n  .xxlarge-text-left {\n    text-align: left !important; }\n  .xxlarge-text-right {\n    text-align: right !important; }\n  .xxlarge-text-center {\n    text-align: center !important; }\n  .xxlarge-text-justify {\n    text-align: justify !important; } }\n\n/* Typography resets */\ndiv, dl, dt, dd, ul, ol, li, h1, h2, h3, h4, h5, h6, pre, form, p, blockquote, th, td {\n  margin: 0;\n  padding: 0; }\n\n/* Default Link Styles */\na {\n  color: #008CBA;\n  line-height: inherit;\n  text-decoration: none; }\n  a:hover, a:focus {\n    color: #0078a0; }\n  a img {\n    border: none; }\n\n/* Default paragraph styles */\np {\n  font-family: inherit;\n  font-size: 1rem;\n  font-weight: normal;\n  line-height: 1.6;\n  margin-bottom: 1.25rem;\n  text-rendering: optimizeLegibility; }\n  p.lead {\n    font-size: 1.21875rem;\n    line-height: 1.6; }\n  p aside {\n    font-size: 0.875rem;\n    font-style: italic;\n    line-height: 1.35; }\n\n/* Default header styles */\nh1, h2, h3, h4, h5, h6 {\n  color: #222222;\n  font-family: \"Helvetica Neue\", Helvetica, Roboto, Arial, sans-serif;\n  font-style: normal;\n  font-weight: normal;\n  line-height: 1.4;\n  margin-bottom: 0.5rem;\n  margin-top: 0.2rem;\n  text-rendering: optimizeLegibility; }\n  h1 small, h2 small, h3 small, h4 small, h5 small, h6 small {\n    color: #6f6f6f;\n    font-size: 60%;\n    line-height: 0; }\n\nh1 {\n  font-size: 2.125rem; }\n\nh2 {\n  font-size: 1.6875rem; }\n\nh3 {\n  font-size: 1.375rem; }\n\nh4 {\n  font-size: 1.125rem; }\n\nh5 {\n  font-size: 1.125rem; }\n\nh6 {\n  font-size: 1rem; }\n\n.subheader {\n  line-height: 1.4;\n  color: #6f6f6f;\n  font-weight: normal;\n  margin-top: 0.2rem;\n  margin-bottom: 0.5rem; }\n\nhr {\n  border: solid #DDDDDD;\n  border-width: 1px 0 0;\n  clear: both;\n  height: 0;\n  margin: 1.25rem 0 1.1875rem; }\n\n/* Helpful Typography Defaults */\nem, i {\n  font-style: italic;\n  line-height: inherit; }\n\nstrong, b {\n  font-weight: bold;\n  line-height: inherit; }\n\nsmall {\n  font-size: 60%;\n  line-height: inherit; }\n\ncode {\n  background-color: #f8f8f8;\n  border-color: #dfdfdf;\n  border-style: solid;\n  border-width: 1px;\n  color: #333333;\n  font-family: Consolas, \"Liberation Mono\", Courier, monospace;\n  font-weight: normal;\n  padding: 0.125rem 0.3125rem 0.0625rem; }\n\n/* Lists */\nul, ol, dl {\n  font-family: inherit;\n  font-size: 1rem;\n  line-height: 1.6;\n  list-style-position: outside;\n  margin-bottom: 1.25rem; }\n\nul {\n  margin-left: 1.1rem; }\n  ul.no-bullet {\n    margin-left: 0; }\n    ul.no-bullet li ul, ul.no-bullet li ol {\n      margin-left: 1.25rem;\n      margin-bottom: 0;\n      list-style: none; }\n\n/* Unordered Lists */\nul li ul, ul li ol {\n  margin-left: 1.25rem;\n  margin-bottom: 0; }\nul.square li ul, ul.circle li ul, ul.disc li ul {\n  list-style: inherit; }\nul.square {\n  list-style-type: square;\n  margin-left: 1.1rem; }\nul.circle {\n  list-style-type: circle;\n  margin-left: 1.1rem; }\nul.disc {\n  list-style-type: disc;\n  margin-left: 1.1rem; }\nul.no-bullet {\n  list-style: none; }\n\n/* Ordered Lists */\nol {\n  margin-left: 1.4rem; }\n  ol li ul, ol li ol {\n    margin-left: 1.25rem;\n    margin-bottom: 0; }\n\n/* Definition Lists */\ndl dt {\n  margin-bottom: 0.3rem;\n  font-weight: bold; }\ndl dd {\n  margin-bottom: 0.75rem; }\n\n/* Abbreviations */\nabbr, acronym {\n  text-transform: uppercase;\n  font-size: 90%;\n  color: #222;\n  cursor: help; }\n\nabbr {\n  text-transform: none; }\n  abbr[title] {\n    border-bottom: 1px dotted #DDDDDD; }\n\n/* Blockquotes */\nblockquote {\n  margin: 0 0 1.25rem;\n  padding: 0.5625rem 1.25rem 0 1.1875rem;\n  border-left: 1px solid #DDDDDD; }\n  blockquote cite {\n    display: block;\n    font-size: 0.8125rem;\n    color: #555555; }\n    blockquote cite:before {\n      content: \"\\2014 \\0020\"; }\n    blockquote cite a, blockquote cite a:visited {\n      color: #555555; }\n\nblockquote, blockquote p {\n  line-height: 1.6;\n  color: #6f6f6f; }\n\n/* Microformats */\n.vcard {\n  display: inline-block;\n  margin: 0 0 1.25rem 0;\n  border: 1px solid #DDDDDD;\n  padding: 0.625rem 0.75rem; }\n  .vcard li {\n    margin: 0;\n    display: block; }\n  .vcard .fn {\n    font-weight: bold;\n    font-size: 0.9375rem; }\n\n.vevent .summary {\n  font-weight: bold; }\n.vevent abbr {\n  cursor: default;\n  text-decoration: none;\n  font-weight: bold;\n  border: none;\n  padding: 0 0.0625rem; }\n\n@media only screen and (min-width:40.0625em) {\n  h1, h2, h3, h4, h5, h6 {\n    line-height: 1.4; }\n  h1 {\n    font-size: 2.75rem; }\n  h2 {\n    font-size: 2.3125rem; }\n  h3 {\n    font-size: 1.6875rem; }\n  h4 {\n    font-size: 1.4375rem; }\n  h5 {\n    font-size: 1.125rem; }\n  h6 {\n    font-size: 1rem; } }\n\n.off-canvas-wrap {\n  -webkit-backface-visibility: hidden;\n  position: relative;\n  width: 100%;\n  overflow: hidden; }\n  .off-canvas-wrap.move-right, .off-canvas-wrap.move-left {\n    min-height: 100%;\n    -webkit-overflow-scrolling: touch; }\n\n.inner-wrap {\n  position: relative;\n  width: 100%;\n  -webkit-transition: -webkit-transform 500ms ease;\n  -moz-transition: -moz-transform 500ms ease;\n  -ms-transition: -ms-transform 500ms ease;\n  -o-transition: -o-transform 500ms ease;\n  transition: transform 500ms ease; }\n  .inner-wrap:before, .inner-wrap:after {\n    content: \" \";\n    display: table; }\n  .inner-wrap:after {\n    clear: both; }\n\n.tab-bar {\n  -webkit-backface-visibility: hidden;\n  background: #333333;\n  color: #FFFFFF;\n  height: 2.8125rem;\n  line-height: 2.8125rem;\n  position: relative; }\n  .tab-bar h1, .tab-bar h2, .tab-bar h3, .tab-bar h4, .tab-bar h5, .tab-bar h6 {\n    color: #FFFFFF;\n    font-weight: bold;\n    line-height: 2.8125rem;\n    margin: 0; }\n  .tab-bar h1, .tab-bar h2, .tab-bar h3, .tab-bar h4 {\n    font-size: 1.125rem; }\n\n.left-small {\n  height: 2.8125rem;\n  position: absolute;\n  top: 0;\n  width: 2.8125rem;\n  border-right: solid 1px #1a1a1a;\n  left: 0; }\n\n.right-small {\n  height: 2.8125rem;\n  position: absolute;\n  top: 0;\n  width: 2.8125rem;\n  border-left: solid 1px #1a1a1a;\n  right: 0; }\n\n.tab-bar-section {\n  height: 2.8125rem;\n  padding: 0 0.625rem;\n  position: absolute;\n  text-align: center;\n  top: 0; }\n  .tab-bar-section.left {\n    text-align: left; }\n  .tab-bar-section.right {\n    text-align: right; }\n  .tab-bar-section.left {\n    left: 0;\n    right: 2.8125rem; }\n  .tab-bar-section.right {\n    left: 2.8125rem;\n    right: 0; }\n  .tab-bar-section.middle {\n    left: 2.8125rem;\n    right: 2.8125rem; }\n\n.tab-bar .menu-icon {\n  color: #FFFFFF;\n  display: block;\n  height: 2.8125rem;\n  padding: 0;\n  position: relative;\n  text-indent: 2.1875rem;\n  transform: translate3d(0, 0, 0);\n  width: 2.8125rem; }\n  .tab-bar .menu-icon span::after {\n    content: \"\";\n    display: block;\n    height: 0;\n    position: absolute;\n    top: 50%;\n    margin-top: -0.5rem;\n    left: 0.90625rem;\n    box-shadow: 0 0 0 1px #FFFFFF, 0 7px 0 1px #FFFFFF, 0 14px 0 1px #FFFFFF;\n    width: 1rem; }\n  .tab-bar .menu-icon span:hover:after {\n    box-shadow: 0 0 0 1px #b3b3b3, 0 7px 0 1px #b3b3b3, 0 14px 0 1px #b3b3b3; }\n\n.left-off-canvas-menu {\n  -webkit-backface-visibility: hidden;\n  background: #333333;\n  bottom: 0;\n  box-sizing: content-box;\n  -webkit-overflow-scrolling: touch;\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n  overflow-x: hidden;\n  overflow-y: auto;\n  position: absolute;\n  top: 0;\n  transition: transform 500ms ease 0s;\n  width: 15.625rem;\n  z-index: 1001;\n  -webkit-transform: translate3d(-100%, 0, 0);\n  -moz-transform: translate3d(-100%, 0, 0);\n  -ms-transform: translate(-100%, 0);\n  -ms-transform: translate3d(-100%, 0, 0);\n  -o-transform: translate3d(-100%, 0, 0);\n  transform: translate3d(-100%, 0, 0);\n  left: 0; }\n  .left-off-canvas-menu * {\n    -webkit-backface-visibility: hidden; }\n\n.right-off-canvas-menu {\n  -webkit-backface-visibility: hidden;\n  background: #333333;\n  bottom: 0;\n  box-sizing: content-box;\n  -webkit-overflow-scrolling: touch;\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n  overflow-x: hidden;\n  overflow-y: auto;\n  position: absolute;\n  top: 0;\n  transition: transform 500ms ease 0s;\n  width: 15.625rem;\n  z-index: 1001;\n  -webkit-transform: translate3d(100%, 0, 0);\n  -moz-transform: translate3d(100%, 0, 0);\n  -ms-transform: translate(100%, 0);\n  -ms-transform: translate3d(100%, 0, 0);\n  -o-transform: translate3d(100%, 0, 0);\n  transform: translate3d(100%, 0, 0);\n  right: 0; }\n  .right-off-canvas-menu * {\n    -webkit-backface-visibility: hidden; }\n\nul.off-canvas-list {\n  list-style-type: none;\n  margin: 0;\n  padding: 0; }\n  ul.off-canvas-list li label {\n    background: #444444;\n    border-bottom: none;\n    border-top: 1px solid #5e5e5e;\n    color: #999999;\n    display: block;\n    font-size: 0.75rem;\n    font-weight: bold;\n    margin: 0;\n    padding: .3rem 0.9375rem;\n    text-transform: uppercase; }\n  ul.off-canvas-list li a {\n    border-bottom: 1px solid #262626;\n    color: rgba(255, 255, 255, 0.7);\n    display: block;\n    padding: 0.66667rem;\n    transition: background 300ms ease; }\n    ul.off-canvas-list li a:hover {\n      background: #242424; }\n    ul.off-canvas-list li a:active {\n      background: #242424; }\n\n.move-right > .inner-wrap {\n  -webkit-transform: translate3d(15.625rem, 0, 0);\n  -moz-transform: translate3d(15.625rem, 0, 0);\n  -ms-transform: translate(15.625rem, 0);\n  -ms-transform: translate3d(15.625rem, 0, 0);\n  -o-transform: translate3d(15.625rem, 0, 0);\n  transform: translate3d(15.625rem, 0, 0); }\n.move-right .exit-off-canvas {\n  -webkit-backface-visibility: hidden;\n  box-shadow: -4px 0 4px rgba(0, 0, 0, 0.5), 4px 0 4px rgba(0, 0, 0, 0.5);\n  cursor: pointer;\n  transition: background 300ms ease;\n  -webkit-tap-highlight-color: transparent;\n  background: rgba(255, 255, 255, 0.2);\n  bottom: 0;\n  display: block;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n  z-index: 1002; }\n  @media only screen and (min-width:40.0625em) {\n    .move-right .exit-off-canvas:hover {\n      background: rgba(255, 255, 255, 0.05); } }\n\n.move-left > .inner-wrap {\n  -webkit-transform: translate3d(-15.625rem, 0, 0);\n  -moz-transform: translate3d(-15.625rem, 0, 0);\n  -ms-transform: translate(-15.625rem, 0);\n  -ms-transform: translate3d(-15.625rem, 0, 0);\n  -o-transform: translate3d(-15.625rem, 0, 0);\n  transform: translate3d(-15.625rem, 0, 0); }\n.move-left .exit-off-canvas {\n  -webkit-backface-visibility: hidden;\n  box-shadow: -4px 0 4px rgba(0, 0, 0, 0.5), 4px 0 4px rgba(0, 0, 0, 0.5);\n  cursor: pointer;\n  transition: background 300ms ease;\n  -webkit-tap-highlight-color: transparent;\n  background: rgba(255, 255, 255, 0.2);\n  bottom: 0;\n  display: block;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n  z-index: 1002; }\n  @media only screen and (min-width:40.0625em) {\n    .move-left .exit-off-canvas:hover {\n      background: rgba(255, 255, 255, 0.05); } }\n\n.offcanvas-overlap .left-off-canvas-menu, .offcanvas-overlap .right-off-canvas-menu {\n  -ms-transform: none;\n  -webkit-transform: none;\n  -moz-transform: none;\n  -o-transform: none;\n  transform: none;\n  z-index: 1003; }\n.offcanvas-overlap .exit-off-canvas {\n  -webkit-backface-visibility: hidden;\n  box-shadow: -4px 0 4px rgba(0, 0, 0, 0.5), 4px 0 4px rgba(0, 0, 0, 0.5);\n  cursor: pointer;\n  transition: background 300ms ease;\n  -webkit-tap-highlight-color: transparent;\n  background: rgba(255, 255, 255, 0.2);\n  bottom: 0;\n  display: block;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n  z-index: 1002; }\n  @media only screen and (min-width:40.0625em) {\n    .offcanvas-overlap .exit-off-canvas:hover {\n      background: rgba(255, 255, 255, 0.05); } }\n\n.offcanvas-overlap-left .right-off-canvas-menu {\n  -ms-transform: none;\n  -webkit-transform: none;\n  -moz-transform: none;\n  -o-transform: none;\n  transform: none;\n  z-index: 1003; }\n.offcanvas-overlap-left .exit-off-canvas {\n  -webkit-backface-visibility: hidden;\n  box-shadow: -4px 0 4px rgba(0, 0, 0, 0.5), 4px 0 4px rgba(0, 0, 0, 0.5);\n  cursor: pointer;\n  transition: background 300ms ease;\n  -webkit-tap-highlight-color: transparent;\n  background: rgba(255, 255, 255, 0.2);\n  bottom: 0;\n  display: block;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n  z-index: 1002; }\n  @media only screen and (min-width:40.0625em) {\n    .offcanvas-overlap-left .exit-off-canvas:hover {\n      background: rgba(255, 255, 255, 0.05); } }\n\n.offcanvas-overlap-right .left-off-canvas-menu {\n  -ms-transform: none;\n  -webkit-transform: none;\n  -moz-transform: none;\n  -o-transform: none;\n  transform: none;\n  z-index: 1003; }\n.offcanvas-overlap-right .exit-off-canvas {\n  -webkit-backface-visibility: hidden;\n  box-shadow: -4px 0 4px rgba(0, 0, 0, 0.5), 4px 0 4px rgba(0, 0, 0, 0.5);\n  cursor: pointer;\n  transition: background 300ms ease;\n  -webkit-tap-highlight-color: transparent;\n  background: rgba(255, 255, 255, 0.2);\n  bottom: 0;\n  display: block;\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n  z-index: 1002; }\n  @media only screen and (min-width:40.0625em) {\n    .offcanvas-overlap-right .exit-off-canvas:hover {\n      background: rgba(255, 255, 255, 0.05); } }\n\n.no-csstransforms .left-off-canvas-menu {\n  left: -15.625rem; }\n.no-csstransforms .right-off-canvas-menu {\n  right: -15.625rem; }\n.no-csstransforms .move-left > .inner-wrap {\n  right: 15.625rem; }\n.no-csstransforms .move-right > .inner-wrap {\n  left: 15.625rem; }\n\n.left-submenu {\n  -webkit-backface-visibility: hidden;\n  -webkit-overflow-scrolling: touch;\n  background: #333333;\n  bottom: 0;\n  box-sizing: content-box;\n  margin: 0;\n  overflow-x: hidden;\n  overflow-y: auto;\n  position: absolute;\n  top: 0;\n  width: 15.625rem;\n  z-index: 1002;\n  -webkit-transform: translate3d(-100%, 0, 0);\n  -moz-transform: translate3d(-100%, 0, 0);\n  -ms-transform: translate(-100%, 0);\n  -ms-transform: translate3d(-100%, 0, 0);\n  -o-transform: translate3d(-100%, 0, 0);\n  transform: translate3d(-100%, 0, 0);\n  left: 0;\n  -webkit-transition: -webkit-transform 500ms ease;\n  -moz-transition: -moz-transform 500ms ease;\n  -ms-transition: -ms-transform 500ms ease;\n  -o-transition: -o-transform 500ms ease;\n  transition: transform 500ms ease; }\n  .left-submenu * {\n    -webkit-backface-visibility: hidden; }\n  .left-submenu .back > a {\n    background: #444;\n    border-bottom: none;\n    border-top: 1px solid #5e5e5e;\n    color: #999999;\n    font-weight: bold;\n    padding: .3rem 0.9375rem;\n    text-transform: uppercase;\n    margin: 0; }\n    .left-submenu .back > a:hover {\n      background: #303030;\n      border-bottom: none;\n      border-top: 1px solid #5e5e5e; }\n    .left-submenu .back > a:before {\n      content: \"\\AB\";\n      margin-right: .5rem;\n      display: inline; }\n  .left-submenu.move-right, .left-submenu.offcanvas-overlap-right, .left-submenu.offcanvas-overlap {\n    -webkit-transform: translate3d(0%, 0, 0);\n    -moz-transform: translate3d(0%, 0, 0);\n    -ms-transform: translate(0%, 0);\n    -ms-transform: translate3d(0%, 0, 0);\n    -o-transform: translate3d(0%, 0, 0);\n    transform: translate3d(0%, 0, 0); }\n\n.right-submenu {\n  -webkit-backface-visibility: hidden;\n  -webkit-overflow-scrolling: touch;\n  background: #333333;\n  bottom: 0;\n  box-sizing: content-box;\n  margin: 0;\n  overflow-x: hidden;\n  overflow-y: auto;\n  position: absolute;\n  top: 0;\n  width: 15.625rem;\n  z-index: 1002;\n  -webkit-transform: translate3d(100%, 0, 0);\n  -moz-transform: translate3d(100%, 0, 0);\n  -ms-transform: translate(100%, 0);\n  -ms-transform: translate3d(100%, 0, 0);\n  -o-transform: translate3d(100%, 0, 0);\n  transform: translate3d(100%, 0, 0);\n  right: 0;\n  -webkit-transition: -webkit-transform 500ms ease;\n  -moz-transition: -moz-transform 500ms ease;\n  -ms-transition: -ms-transform 500ms ease;\n  -o-transition: -o-transform 500ms ease;\n  transition: transform 500ms ease; }\n  .right-submenu * {\n    -webkit-backface-visibility: hidden; }\n  .right-submenu .back > a {\n    background: #444;\n    border-bottom: none;\n    border-top: 1px solid #5e5e5e;\n    color: #999999;\n    font-weight: bold;\n    padding: .3rem 0.9375rem;\n    text-transform: uppercase;\n    margin: 0; }\n    .right-submenu .back > a:hover {\n      background: #303030;\n      border-bottom: none;\n      border-top: 1px solid #5e5e5e; }\n    .right-submenu .back > a:after {\n      content: \"\\BB\";\n      margin-left: .5rem;\n      display: inline; }\n  .right-submenu.move-left, .right-submenu.offcanvas-overlap-left, .right-submenu.offcanvas-overlap {\n    -webkit-transform: translate3d(0%, 0, 0);\n    -moz-transform: translate3d(0%, 0, 0);\n    -ms-transform: translate(0%, 0);\n    -ms-transform: translate3d(0%, 0, 0);\n    -o-transform: translate3d(0%, 0, 0);\n    transform: translate3d(0%, 0, 0); }\n\n.left-off-canvas-menu ul.off-canvas-list li.has-submenu > a:after {\n  content: \"\\BB\";\n  margin-left: .5rem;\n  display: inline; }\n\n.right-off-canvas-menu ul.off-canvas-list li.has-submenu > a:before {\n  content: \"\\AB\";\n  margin-right: .5rem;\n  display: inline; }\n\n/*!\n *  Font Awesome 4.3.0 by @davegandy - http://fontawesome.io - @fontawesome\n *  License - http://fontawesome.io/license (Font: SIL OFL 1.1, CSS: MIT License)\n */\n/* FONT PATH\n * -------------------------- */\n@font-face {\n  font-family: 'FontAwesome';\n  src: url('//netdna.bootstrapcdn.com/font-awesome/4.1.0/fonts/fontawesome-webfont.eot?v=4.3.0');\n  src: url('//netdna.bootstrapcdn.com/font-awesome/4.1.0/fonts/fontawesome-webfont.eot?#iefix&v=4.3.0') format('embedded-opentype'), url('//netdna.bootstrapcdn.com/font-awesome/4.1.0/fonts/fontawesome-webfont.woff2?v=4.3.0') format('woff2'), url('//netdna.bootstrapcdn.com/font-awesome/4.1.0/fonts/fontawesome-webfont.woff?v=4.3.0') format('woff'), url('//netdna.bootstrapcdn.com/font-awesome/4.1.0/fonts/fontawesome-webfont.ttf?v=4.3.0') format('truetype'), url('//netdna.bootstrapcdn.com/font-awesome/4.1.0/fonts/fontawesome-webfont.svg?v=4.3.0#fontawesomeregular') format('svg');\n  font-weight: normal;\n  font-style: normal; }\n\n.fa {\n  display: inline-block;\n  font: normal normal normal 14px/1 FontAwesome;\n  font-size: inherit;\n  text-rendering: auto;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  transform: translate(0, 0); }\n\n/* makes the font 33% larger relative to the icon container */\n.fa-lg {\n  font-size: 1.33333em;\n  line-height: 0.75em;\n  vertical-align: -15%; }\n\n.fa-2x {\n  font-size: 2em; }\n\n.fa-3x {\n  font-size: 3em; }\n\n.fa-4x {\n  font-size: 4em; }\n\n.fa-5x {\n  font-size: 5em; }\n\n.fa-fw {\n  width: 1.28571em;\n  text-align: center; }\n\n.fa-ul {\n  padding-left: 0;\n  margin-left: 2.14286em;\n  list-style-type: none; }\n  .fa-ul > li {\n    position: relative; }\n\n.fa-li {\n  position: absolute;\n  left: -2.14286em;\n  width: 2.14286em;\n  top: 0.14286em;\n  text-align: center; }\n  .fa-li.fa-lg {\n    left: -1.85714em; }\n\n.fa-border {\n  padding: .2em .25em .15em;\n  border: solid .08em #eee;\n  border-radius: .1em; }\n\n.pull-right {\n  float: right; }\n\n.pull-left {\n  float: left; }\n\n.fa.pull-left {\n  margin-right: .3em; }\n.fa.pull-right {\n  margin-left: .3em; }\n\n.fa-spin {\n  -webkit-animation: fa-spin 2s infinite linear;\n  animation: fa-spin 2s infinite linear; }\n\n.fa-pulse {\n  -webkit-animation: fa-spin 1s infinite steps(8);\n  animation: fa-spin 1s infinite steps(8); }\n\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg); }\n\n  100% {\n    -webkit-transform: rotate(359deg);\n    transform: rotate(359deg); } }\n\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg); }\n\n  100% {\n    -webkit-transform: rotate(359deg);\n    transform: rotate(359deg); } }\n\n.fa-rotate-90 {\n  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1);\n  -webkit-transform: rotate(90deg);\n  -ms-transform: rotate(90deg);\n  transform: rotate(90deg); }\n\n.fa-rotate-180 {\n  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2);\n  -webkit-transform: rotate(180deg);\n  -ms-transform: rotate(180deg);\n  transform: rotate(180deg); }\n\n.fa-rotate-270 {\n  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3);\n  -webkit-transform: rotate(270deg);\n  -ms-transform: rotate(270deg);\n  transform: rotate(270deg); }\n\n.fa-flip-horizontal {\n  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=0);\n  -webkit-transform: scale(-1, 1);\n  -ms-transform: scale(-1, 1);\n  transform: scale(-1, 1); }\n\n.fa-flip-vertical {\n  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2);\n  -webkit-transform: scale(1, -1);\n  -ms-transform: scale(1, -1);\n  transform: scale(1, -1); }\n\n:root .fa-rotate-90, :root .fa-rotate-180, :root .fa-rotate-270, :root .fa-flip-horizontal, :root .fa-flip-vertical {\n  filter: none; }\n\n.fa-stack {\n  position: relative;\n  display: inline-block;\n  width: 2em;\n  height: 2em;\n  line-height: 2em;\n  vertical-align: middle; }\n\n.fa-stack-1x, .fa-stack-2x {\n  position: absolute;\n  left: 0;\n  width: 100%;\n  text-align: center; }\n\n.fa-stack-1x {\n  line-height: inherit; }\n\n.fa-stack-2x {\n  font-size: 2em; }\n\n.fa-inverse {\n  color: #fff; }\n\n/* Font Awesome uses the Unicode Private Use Area (PUA) to ensure screen\n   readers do not read off random characters that represent icons */\n.fa-glass:before {\n  content: \"\\f000\"; }\n\n.fa-music:before {\n  content: \"\\f001\"; }\n\n.fa-search:before {\n  content: \"\\f002\"; }\n\n.fa-envelope-o:before {\n  content: \"\\f003\"; }\n\n.fa-heart:before {\n  content: \"\\f004\"; }\n\n.fa-star:before {\n  content: \"\\f005\"; }\n\n.fa-star-o:before {\n  content: \"\\f006\"; }\n\n.fa-user:before {\n  content: \"\\f007\"; }\n\n.fa-film:before {\n  content: \"\\f008\"; }\n\n.fa-th-large:before {\n  content: \"\\f009\"; }\n\n.fa-th:before {\n  content: \"\\f00a\"; }\n\n.fa-th-list:before {\n  content: \"\\f00b\"; }\n\n.fa-check:before {\n  content: \"\\f00c\"; }\n\n.fa-remove:before, .fa-close:before, .fa-times:before {\n  content: \"\\f00d\"; }\n\n.fa-search-plus:before {\n  content: \"\\f00e\"; }\n\n.fa-search-minus:before {\n  content: \"\\f010\"; }\n\n.fa-power-off:before {\n  content: \"\\f011\"; }\n\n.fa-signal:before {\n  content: \"\\f012\"; }\n\n.fa-gear:before, .fa-cog:before {\n  content: \"\\f013\"; }\n\n.fa-trash-o:before {\n  content: \"\\f014\"; }\n\n.fa-home:before {\n  content: \"\\f015\"; }\n\n.fa-file-o:before {\n  content: \"\\f016\"; }\n\n.fa-clock-o:before {\n  content: \"\\f017\"; }\n\n.fa-road:before {\n  content: \"\\f018\"; }\n\n.fa-download:before {\n  content: \"\\f019\"; }\n\n.fa-arrow-circle-o-down:before {\n  content: \"\\f01a\"; }\n\n.fa-arrow-circle-o-up:before {\n  content: \"\\f01b\"; }\n\n.fa-inbox:before {\n  content: \"\\f01c\"; }\n\n.fa-play-circle-o:before {\n  content: \"\\f01d\"; }\n\n.fa-rotate-right:before, .fa-repeat:before {\n  content: \"\\f01e\"; }\n\n.fa-refresh:before {\n  content: \"\\f021\"; }\n\n.fa-list-alt:before {\n  content: \"\\f022\"; }\n\n.fa-lock:before {\n  content: \"\\f023\"; }\n\n.fa-flag:before {\n  content: \"\\f024\"; }\n\n.fa-headphones:before {\n  content: \"\\f025\"; }\n\n.fa-volume-off:before {\n  content: \"\\f026\"; }\n\n.fa-volume-down:before {\n  content: \"\\f027\"; }\n\n.fa-volume-up:before {\n  content: \"\\f028\"; }\n\n.fa-qrcode:before {\n  content: \"\\f029\"; }\n\n.fa-barcode:before {\n  content: \"\\f02a\"; }\n\n.fa-tag:before {\n  content: \"\\f02b\"; }\n\n.fa-tags:before {\n  content: \"\\f02c\"; }\n\n.fa-book:before {\n  content: \"\\f02d\"; }\n\n.fa-bookmark:before {\n  content: \"\\f02e\"; }\n\n.fa-print:before {\n  content: \"\\f02f\"; }\n\n.fa-camera:before {\n  content: \"\\f030\"; }\n\n.fa-font:before {\n  content: \"\\f031\"; }\n\n.fa-bold:before {\n  content: \"\\f032\"; }\n\n.fa-italic:before {\n  content: \"\\f033\"; }\n\n.fa-text-height:before {\n  content: \"\\f034\"; }\n\n.fa-text-width:before {\n  content: \"\\f035\"; }\n\n.fa-align-left:before {\n  content: \"\\f036\"; }\n\n.fa-align-center:before {\n  content: \"\\f037\"; }\n\n.fa-align-right:before {\n  content: \"\\f038\"; }\n\n.fa-align-justify:before {\n  content: \"\\f039\"; }\n\n.fa-list:before {\n  content: \"\\f03a\"; }\n\n.fa-dedent:before, .fa-outdent:before {\n  content: \"\\f03b\"; }\n\n.fa-indent:before {\n  content: \"\\f03c\"; }\n\n.fa-video-camera:before {\n  content: \"\\f03d\"; }\n\n.fa-photo:before, .fa-image:before, .fa-picture-o:before {\n  content: \"\\f03e\"; }\n\n.fa-pencil:before {\n  content: \"\\f040\"; }\n\n.fa-map-marker:before {\n  content: \"\\f041\"; }\n\n.fa-adjust:before {\n  content: \"\\f042\"; }\n\n.fa-tint:before {\n  content: \"\\f043\"; }\n\n.fa-edit:before, .fa-pencil-square-o:before {\n  content: \"\\f044\"; }\n\n.fa-share-square-o:before {\n  content: \"\\f045\"; }\n\n.fa-check-square-o:before {\n  content: \"\\f046\"; }\n\n.fa-arrows:before {\n  content: \"\\f047\"; }\n\n.fa-step-backward:before {\n  content: \"\\f048\"; }\n\n.fa-fast-backward:before {\n  content: \"\\f049\"; }\n\n.fa-backward:before {\n  content: \"\\f04a\"; }\n\n.fa-play:before {\n  content: \"\\f04b\"; }\n\n.fa-pause:before {\n  content: \"\\f04c\"; }\n\n.fa-stop:before {\n  content: \"\\f04d\"; }\n\n.fa-forward:before {\n  content: \"\\f04e\"; }\n\n.fa-fast-forward:before {\n  content: \"\\f050\"; }\n\n.fa-step-forward:before {\n  content: \"\\f051\"; }\n\n.fa-eject:before {\n  content: \"\\f052\"; }\n\n.fa-chevron-left:before {\n  content: \"\\f053\"; }\n\n.fa-chevron-right:before {\n  content: \"\\f054\"; }\n\n.fa-plus-circle:before {\n  content: \"\\f055\"; }\n\n.fa-minus-circle:before {\n  content: \"\\f056\"; }\n\n.fa-times-circle:before {\n  content: \"\\f057\"; }\n\n.fa-check-circle:before {\n  content: \"\\f058\"; }\n\n.fa-question-circle:before {\n  content: \"\\f059\"; }\n\n.fa-info-circle:before {\n  content: \"\\f05a\"; }\n\n.fa-crosshairs:before {\n  content: \"\\f05b\"; }\n\n.fa-times-circle-o:before {\n  content: \"\\f05c\"; }\n\n.fa-check-circle-o:before {\n  content: \"\\f05d\"; }\n\n.fa-ban:before {\n  content: \"\\f05e\"; }\n\n.fa-arrow-left:before {\n  content: \"\\f060\"; }\n\n.fa-arrow-right:before {\n  content: \"\\f061\"; }\n\n.fa-arrow-up:before {\n  content: \"\\f062\"; }\n\n.fa-arrow-down:before {\n  content: \"\\f063\"; }\n\n.fa-mail-forward:before, .fa-share:before {\n  content: \"\\f064\"; }\n\n.fa-expand:before {\n  content: \"\\f065\"; }\n\n.fa-compress:before {\n  content: \"\\f066\"; }\n\n.fa-plus:before {\n  content: \"\\f067\"; }\n\n.fa-minus:before {\n  content: \"\\f068\"; }\n\n.fa-asterisk:before {\n  content: \"\\f069\"; }\n\n.fa-exclamation-circle:before {\n  content: \"\\f06a\"; }\n\n.fa-gift:before {\n  content: \"\\f06b\"; }\n\n.fa-leaf:before {\n  content: \"\\f06c\"; }\n\n.fa-fire:before {\n  content: \"\\f06d\"; }\n\n.fa-eye:before {\n  content: \"\\f06e\"; }\n\n.fa-eye-slash:before {\n  content: \"\\f070\"; }\n\n.fa-warning:before, .fa-exclamation-triangle:before {\n  content: \"\\f071\"; }\n\n.fa-plane:before {\n  content: \"\\f072\"; }\n\n.fa-calendar:before {\n  content: \"\\f073\"; }\n\n.fa-random:before {\n  content: \"\\f074\"; }\n\n.fa-comment:before {\n  content: \"\\f075\"; }\n\n.fa-magnet:before {\n  content: \"\\f076\"; }\n\n.fa-chevron-up:before {\n  content: \"\\f077\"; }\n\n.fa-chevron-down:before {\n  content: \"\\f078\"; }\n\n.fa-retweet:before {\n  content: \"\\f079\"; }\n\n.fa-shopping-cart:before {\n  content: \"\\f07a\"; }\n\n.fa-folder:before {\n  content: \"\\f07b\"; }\n\n.fa-folder-open:before {\n  content: \"\\f07c\"; }\n\n.fa-arrows-v:before {\n  content: \"\\f07d\"; }\n\n.fa-arrows-h:before {\n  content: \"\\f07e\"; }\n\n.fa-bar-chart-o:before, .fa-bar-chart:before {\n  content: \"\\f080\"; }\n\n.fa-twitter-square:before {\n  content: \"\\f081\"; }\n\n.fa-facebook-square:before {\n  content: \"\\f082\"; }\n\n.fa-camera-retro:before {\n  content: \"\\f083\"; }\n\n.fa-key:before {\n  content: \"\\f084\"; }\n\n.fa-gears:before, .fa-cogs:before {\n  content: \"\\f085\"; }\n\n.fa-comments:before {\n  content: \"\\f086\"; }\n\n.fa-thumbs-o-up:before {\n  content: \"\\f087\"; }\n\n.fa-thumbs-o-down:before {\n  content: \"\\f088\"; }\n\n.fa-star-half:before {\n  content: \"\\f089\"; }\n\n.fa-heart-o:before {\n  content: \"\\f08a\"; }\n\n.fa-sign-out:before {\n  content: \"\\f08b\"; }\n\n.fa-linkedin-square:before {\n  content: \"\\f08c\"; }\n\n.fa-thumb-tack:before {\n  content: \"\\f08d\"; }\n\n.fa-external-link:before {\n  content: \"\\f08e\"; }\n\n.fa-sign-in:before {\n  content: \"\\f090\"; }\n\n.fa-trophy:before {\n  content: \"\\f091\"; }\n\n.fa-github-square:before {\n  content: \"\\f092\"; }\n\n.fa-upload:before {\n  content: \"\\f093\"; }\n\n.fa-lemon-o:before {\n  content: \"\\f094\"; }\n\n.fa-phone:before {\n  content: \"\\f095\"; }\n\n.fa-square-o:before {\n  content: \"\\f096\"; }\n\n.fa-bookmark-o:before {\n  content: \"\\f097\"; }\n\n.fa-phone-square:before {\n  content: \"\\f098\"; }\n\n.fa-twitter:before {\n  content: \"\\f099\"; }\n\n.fa-facebook-f:before, .fa-facebook:before {\n  content: \"\\f09a\"; }\n\n.fa-github:before {\n  content: \"\\f09b\"; }\n\n.fa-unlock:before {\n  content: \"\\f09c\"; }\n\n.fa-credit-card:before {\n  content: \"\\f09d\"; }\n\n.fa-rss:before {\n  content: \"\\f09e\"; }\n\n.fa-hdd-o:before {\n  content: \"\\f0a0\"; }\n\n.fa-bullhorn:before {\n  content: \"\\f0a1\"; }\n\n.fa-bell:before {\n  content: \"\\f0f3\"; }\n\n.fa-certificate:before {\n  content: \"\\f0a3\"; }\n\n.fa-hand-o-right:before {\n  content: \"\\f0a4\"; }\n\n.fa-hand-o-left:before {\n  content: \"\\f0a5\"; }\n\n.fa-hand-o-up:before {\n  content: \"\\f0a6\"; }\n\n.fa-hand-o-down:before {\n  content: \"\\f0a7\"; }\n\n.fa-arrow-circle-left:before {\n  content: \"\\f0a8\"; }\n\n.fa-arrow-circle-right:before {\n  content: \"\\f0a9\"; }\n\n.fa-arrow-circle-up:before {\n  content: \"\\f0aa\"; }\n\n.fa-arrow-circle-down:before {\n  content: \"\\f0ab\"; }\n\n.fa-globe:before {\n  content: \"\\f0ac\"; }\n\n.fa-wrench:before {\n  content: \"\\f0ad\"; }\n\n.fa-tasks:before {\n  content: \"\\f0ae\"; }\n\n.fa-filter:before {\n  content: \"\\f0b0\"; }\n\n.fa-briefcase:before {\n  content: \"\\f0b1\"; }\n\n.fa-arrows-alt:before {\n  content: \"\\f0b2\"; }\n\n.fa-group:before, .fa-users:before {\n  content: \"\\f0c0\"; }\n\n.fa-chain:before, .fa-link:before {\n  content: \"\\f0c1\"; }\n\n.fa-cloud:before {\n  content: \"\\f0c2\"; }\n\n.fa-flask:before {\n  content: \"\\f0c3\"; }\n\n.fa-cut:before, .fa-scissors:before {\n  content: \"\\f0c4\"; }\n\n.fa-copy:before, .fa-files-o:before {\n  content: \"\\f0c5\"; }\n\n.fa-paperclip:before {\n  content: \"\\f0c6\"; }\n\n.fa-save:before, .fa-floppy-o:before {\n  content: \"\\f0c7\"; }\n\n.fa-square:before {\n  content: \"\\f0c8\"; }\n\n.fa-navicon:before, .fa-reorder:before, .fa-bars:before {\n  content: \"\\f0c9\"; }\n\n.fa-list-ul:before {\n  content: \"\\f0ca\"; }\n\n.fa-list-ol:before {\n  content: \"\\f0cb\"; }\n\n.fa-strikethrough:before {\n  content: \"\\f0cc\"; }\n\n.fa-underline:before {\n  content: \"\\f0cd\"; }\n\n.fa-table:before {\n  content: \"\\f0ce\"; }\n\n.fa-magic:before {\n  content: \"\\f0d0\"; }\n\n.fa-truck:before {\n  content: \"\\f0d1\"; }\n\n.fa-pinterest:before {\n  content: \"\\f0d2\"; }\n\n.fa-pinterest-square:before {\n  content: \"\\f0d3\"; }\n\n.fa-google-plus-square:before {\n  content: \"\\f0d4\"; }\n\n.fa-google-plus:before {\n  content: \"\\f0d5\"; }\n\n.fa-money:before {\n  content: \"\\f0d6\"; }\n\n.fa-caret-down:before {\n  content: \"\\f0d7\"; }\n\n.fa-caret-up:before {\n  content: \"\\f0d8\"; }\n\n.fa-caret-left:before {\n  content: \"\\f0d9\"; }\n\n.fa-caret-right:before {\n  content: \"\\f0da\"; }\n\n.fa-columns:before {\n  content: \"\\f0db\"; }\n\n.fa-unsorted:before, .fa-sort:before {\n  content: \"\\f0dc\"; }\n\n.fa-sort-down:before, .fa-sort-desc:before {\n  content: \"\\f0dd\"; }\n\n.fa-sort-up:before, .fa-sort-asc:before {\n  content: \"\\f0de\"; }\n\n.fa-envelope:before {\n  content: \"\\f0e0\"; }\n\n.fa-linkedin:before {\n  content: \"\\f0e1\"; }\n\n.fa-rotate-left:before, .fa-undo:before {\n  content: \"\\f0e2\"; }\n\n.fa-legal:before, .fa-gavel:before {\n  content: \"\\f0e3\"; }\n\n.fa-dashboard:before, .fa-tachometer:before {\n  content: \"\\f0e4\"; }\n\n.fa-comment-o:before {\n  content: \"\\f0e5\"; }\n\n.fa-comments-o:before {\n  content: \"\\f0e6\"; }\n\n.fa-flash:before, .fa-bolt:before {\n  content: \"\\f0e7\"; }\n\n.fa-sitemap:before {\n  content: \"\\f0e8\"; }\n\n.fa-umbrella:before {\n  content: \"\\f0e9\"; }\n\n.fa-paste:before, .fa-clipboard:before {\n  content: \"\\f0ea\"; }\n\n.fa-lightbulb-o:before {\n  content: \"\\f0eb\"; }\n\n.fa-exchange:before {\n  content: \"\\f0ec\"; }\n\n.fa-cloud-download:before {\n  content: \"\\f0ed\"; }\n\n.fa-cloud-upload:before {\n  content: \"\\f0ee\"; }\n\n.fa-user-md:before {\n  content: \"\\f0f0\"; }\n\n.fa-stethoscope:before {\n  content: \"\\f0f1\"; }\n\n.fa-suitcase:before {\n  content: \"\\f0f2\"; }\n\n.fa-bell-o:before {\n  content: \"\\f0a2\"; }\n\n.fa-coffee:before {\n  content: \"\\f0f4\"; }\n\n.fa-cutlery:before {\n  content: \"\\f0f5\"; }\n\n.fa-file-text-o:before {\n  content: \"\\f0f6\"; }\n\n.fa-building-o:before {\n  content: \"\\f0f7\"; }\n\n.fa-hospital-o:before {\n  content: \"\\f0f8\"; }\n\n.fa-ambulance:before {\n  content: \"\\f0f9\"; }\n\n.fa-medkit:before {\n  content: \"\\f0fa\"; }\n\n.fa-fighter-jet:before {\n  content: \"\\f0fb\"; }\n\n.fa-beer:before {\n  content: \"\\f0fc\"; }\n\n.fa-h-square:before {\n  content: \"\\f0fd\"; }\n\n.fa-plus-square:before {\n  content: \"\\f0fe\"; }\n\n.fa-angle-double-left:before {\n  content: \"\\f100\"; }\n\n.fa-angle-double-right:before {\n  content: \"\\f101\"; }\n\n.fa-angle-double-up:before {\n  content: \"\\f102\"; }\n\n.fa-angle-double-down:before {\n  content: \"\\f103\"; }\n\n.fa-angle-left:before {\n  content: \"\\f104\"; }\n\n.fa-angle-right:before {\n  content: \"\\f105\"; }\n\n.fa-angle-up:before {\n  content: \"\\f106\"; }\n\n.fa-angle-down:before {\n  content: \"\\f107\"; }\n\n.fa-desktop:before {\n  content: \"\\f108\"; }\n\n.fa-laptop:before {\n  content: \"\\f109\"; }\n\n.fa-tablet:before {\n  content: \"\\f10a\"; }\n\n.fa-mobile-phone:before, .fa-mobile:before {\n  content: \"\\f10b\"; }\n\n.fa-circle-o:before {\n  content: \"\\f10c\"; }\n\n.fa-quote-left:before {\n  content: \"\\f10d\"; }\n\n.fa-quote-right:before {\n  content: \"\\f10e\"; }\n\n.fa-spinner:before {\n  content: \"\\f110\"; }\n\n.fa-circle:before {\n  content: \"\\f111\"; }\n\n.fa-mail-reply:before, .fa-reply:before {\n  content: \"\\f112\"; }\n\n.fa-github-alt:before {\n  content: \"\\f113\"; }\n\n.fa-folder-o:before {\n  content: \"\\f114\"; }\n\n.fa-folder-open-o:before {\n  content: \"\\f115\"; }\n\n.fa-smile-o:before {\n  content: \"\\f118\"; }\n\n.fa-frown-o:before {\n  content: \"\\f119\"; }\n\n.fa-meh-o:before {\n  content: \"\\f11a\"; }\n\n.fa-gamepad:before {\n  content: \"\\f11b\"; }\n\n.fa-keyboard-o:before {\n  content: \"\\f11c\"; }\n\n.fa-flag-o:before {\n  content: \"\\f11d\"; }\n\n.fa-flag-checkered:before {\n  content: \"\\f11e\"; }\n\n.fa-terminal:before {\n  content: \"\\f120\"; }\n\n.fa-code:before {\n  content: \"\\f121\"; }\n\n.fa-mail-reply-all:before, .fa-reply-all:before {\n  content: \"\\f122\"; }\n\n.fa-star-half-empty:before, .fa-star-half-full:before, .fa-star-half-o:before {\n  content: \"\\f123\"; }\n\n.fa-location-arrow:before {\n  content: \"\\f124\"; }\n\n.fa-crop:before {\n  content: \"\\f125\"; }\n\n.fa-code-fork:before {\n  content: \"\\f126\"; }\n\n.fa-unlink:before, .fa-chain-broken:before {\n  content: \"\\f127\"; }\n\n.fa-question:before {\n  content: \"\\f128\"; }\n\n.fa-info:before {\n  content: \"\\f129\"; }\n\n.fa-exclamation:before {\n  content: \"\\f12a\"; }\n\n.fa-superscript:before {\n  content: \"\\f12b\"; }\n\n.fa-subscript:before {\n  content: \"\\f12c\"; }\n\n.fa-eraser:before {\n  content: \"\\f12d\"; }\n\n.fa-puzzle-piece:before {\n  content: \"\\f12e\"; }\n\n.fa-microphone:before {\n  content: \"\\f130\"; }\n\n.fa-microphone-slash:before {\n  content: \"\\f131\"; }\n\n.fa-shield:before {\n  content: \"\\f132\"; }\n\n.fa-calendar-o:before {\n  content: \"\\f133\"; }\n\n.fa-fire-extinguisher:before {\n  content: \"\\f134\"; }\n\n.fa-rocket:before {\n  content: \"\\f135\"; }\n\n.fa-maxcdn:before {\n  content: \"\\f136\"; }\n\n.fa-chevron-circle-left:before {\n  content: \"\\f137\"; }\n\n.fa-chevron-circle-right:before {\n  content: \"\\f138\"; }\n\n.fa-chevron-circle-up:before {\n  content: \"\\f139\"; }\n\n.fa-chevron-circle-down:before {\n  content: \"\\f13a\"; }\n\n.fa-html5:before {\n  content: \"\\f13b\"; }\n\n.fa-css3:before {\n  content: \"\\f13c\"; }\n\n.fa-anchor:before {\n  content: \"\\f13d\"; }\n\n.fa-unlock-alt:before {\n  content: \"\\f13e\"; }\n\n.fa-bullseye:before {\n  content: \"\\f140\"; }\n\n.fa-ellipsis-h:before {\n  content: \"\\f141\"; }\n\n.fa-ellipsis-v:before {\n  content: \"\\f142\"; }\n\n.fa-rss-square:before {\n  content: \"\\f143\"; }\n\n.fa-play-circle:before {\n  content: \"\\f144\"; }\n\n.fa-ticket:before {\n  content: \"\\f145\"; }\n\n.fa-minus-square:before {\n  content: \"\\f146\"; }\n\n.fa-minus-square-o:before {\n  content: \"\\f147\"; }\n\n.fa-level-up:before {\n  content: \"\\f148\"; }\n\n.fa-level-down:before {\n  content: \"\\f149\"; }\n\n.fa-check-square:before {\n  content: \"\\f14a\"; }\n\n.fa-pencil-square:before {\n  content: \"\\f14b\"; }\n\n.fa-external-link-square:before {\n  content: \"\\f14c\"; }\n\n.fa-share-square:before {\n  content: \"\\f14d\"; }\n\n.fa-compass:before {\n  content: \"\\f14e\"; }\n\n.fa-toggle-down:before, .fa-caret-square-o-down:before {\n  content: \"\\f150\"; }\n\n.fa-toggle-up:before, .fa-caret-square-o-up:before {\n  content: \"\\f151\"; }\n\n.fa-toggle-right:before, .fa-caret-square-o-right:before {\n  content: \"\\f152\"; }\n\n.fa-euro:before, .fa-eur:before {\n  content: \"\\f153\"; }\n\n.fa-gbp:before {\n  content: \"\\f154\"; }\n\n.fa-dollar:before, .fa-usd:before {\n  content: \"\\f155\"; }\n\n.fa-rupee:before, .fa-inr:before {\n  content: \"\\f156\"; }\n\n.fa-cny:before, .fa-rmb:before, .fa-yen:before, .fa-jpy:before {\n  content: \"\\f157\"; }\n\n.fa-ruble:before, .fa-rouble:before, .fa-rub:before {\n  content: \"\\f158\"; }\n\n.fa-won:before, .fa-krw:before {\n  content: \"\\f159\"; }\n\n.fa-bitcoin:before, .fa-btc:before {\n  content: \"\\f15a\"; }\n\n.fa-file:before {\n  content: \"\\f15b\"; }\n\n.fa-file-text:before {\n  content: \"\\f15c\"; }\n\n.fa-sort-alpha-asc:before {\n  content: \"\\f15d\"; }\n\n.fa-sort-alpha-desc:before {\n  content: \"\\f15e\"; }\n\n.fa-sort-amount-asc:before {\n  content: \"\\f160\"; }\n\n.fa-sort-amount-desc:before {\n  content: \"\\f161\"; }\n\n.fa-sort-numeric-asc:before {\n  content: \"\\f162\"; }\n\n.fa-sort-numeric-desc:before {\n  content: \"\\f163\"; }\n\n.fa-thumbs-up:before {\n  content: \"\\f164\"; }\n\n.fa-thumbs-down:before {\n  content: \"\\f165\"; }\n\n.fa-youtube-square:before {\n  content: \"\\f166\"; }\n\n.fa-youtube:before {\n  content: \"\\f167\"; }\n\n.fa-xing:before {\n  content: \"\\f168\"; }\n\n.fa-xing-square:before {\n  content: \"\\f169\"; }\n\n.fa-youtube-play:before {\n  content: \"\\f16a\"; }\n\n.fa-dropbox:before {\n  content: \"\\f16b\"; }\n\n.fa-stack-overflow:before {\n  content: \"\\f16c\"; }\n\n.fa-instagram:before {\n  content: \"\\f16d\"; }\n\n.fa-flickr:before {\n  content: \"\\f16e\"; }\n\n.fa-adn:before {\n  content: \"\\f170\"; }\n\n.fa-bitbucket:before {\n  content: \"\\f171\"; }\n\n.fa-bitbucket-square:before {\n  content: \"\\f172\"; }\n\n.fa-tumblr:before {\n  content: \"\\f173\"; }\n\n.fa-tumblr-square:before {\n  content: \"\\f174\"; }\n\n.fa-long-arrow-down:before {\n  content: \"\\f175\"; }\n\n.fa-long-arrow-up:before {\n  content: \"\\f176\"; }\n\n.fa-long-arrow-left:before {\n  content: \"\\f177\"; }\n\n.fa-long-arrow-right:before {\n  content: \"\\f178\"; }\n\n.fa-apple:before {\n  content: \"\\f179\"; }\n\n.fa-windows:before {\n  content: \"\\f17a\"; }\n\n.fa-android:before {\n  content: \"\\f17b\"; }\n\n.fa-linux:before {\n  content: \"\\f17c\"; }\n\n.fa-dribbble:before {\n  content: \"\\f17d\"; }\n\n.fa-skype:before {\n  content: \"\\f17e\"; }\n\n.fa-foursquare:before {\n  content: \"\\f180\"; }\n\n.fa-trello:before {\n  content: \"\\f181\"; }\n\n.fa-female:before {\n  content: \"\\f182\"; }\n\n.fa-male:before {\n  content: \"\\f183\"; }\n\n.fa-gittip:before, .fa-gratipay:before {\n  content: \"\\f184\"; }\n\n.fa-sun-o:before {\n  content: \"\\f185\"; }\n\n.fa-moon-o:before {\n  content: \"\\f186\"; }\n\n.fa-archive:before {\n  content: \"\\f187\"; }\n\n.fa-bug:before {\n  content: \"\\f188\"; }\n\n.fa-vk:before {\n  content: \"\\f189\"; }\n\n.fa-weibo:before {\n  content: \"\\f18a\"; }\n\n.fa-renren:before {\n  content: \"\\f18b\"; }\n\n.fa-pagelines:before {\n  content: \"\\f18c\"; }\n\n.fa-stack-exchange:before {\n  content: \"\\f18d\"; }\n\n.fa-arrow-circle-o-right:before {\n  content: \"\\f18e\"; }\n\n.fa-arrow-circle-o-left:before {\n  content: \"\\f190\"; }\n\n.fa-toggle-left:before, .fa-caret-square-o-left:before {\n  content: \"\\f191\"; }\n\n.fa-dot-circle-o:before {\n  content: \"\\f192\"; }\n\n.fa-wheelchair:before {\n  content: \"\\f193\"; }\n\n.fa-vimeo-square:before {\n  content: \"\\f194\"; }\n\n.fa-turkish-lira:before, .fa-try:before {\n  content: \"\\f195\"; }\n\n.fa-plus-square-o:before {\n  content: \"\\f196\"; }\n\n.fa-space-shuttle:before {\n  content: \"\\f197\"; }\n\n.fa-slack:before {\n  content: \"\\f198\"; }\n\n.fa-envelope-square:before {\n  content: \"\\f199\"; }\n\n.fa-wordpress:before {\n  content: \"\\f19a\"; }\n\n.fa-openid:before {\n  content: \"\\f19b\"; }\n\n.fa-institution:before, .fa-bank:before, .fa-university:before {\n  content: \"\\f19c\"; }\n\n.fa-mortar-board:before, .fa-graduation-cap:before {\n  content: \"\\f19d\"; }\n\n.fa-yahoo:before {\n  content: \"\\f19e\"; }\n\n.fa-google:before {\n  content: \"\\f1a0\"; }\n\n.fa-reddit:before {\n  content: \"\\f1a1\"; }\n\n.fa-reddit-square:before {\n  content: \"\\f1a2\"; }\n\n.fa-stumbleupon-circle:before {\n  content: \"\\f1a3\"; }\n\n.fa-stumbleupon:before {\n  content: \"\\f1a4\"; }\n\n.fa-delicious:before {\n  content: \"\\f1a5\"; }\n\n.fa-digg:before {\n  content: \"\\f1a6\"; }\n\n.fa-pied-piper:before {\n  content: \"\\f1a7\"; }\n\n.fa-pied-piper-alt:before {\n  content: \"\\f1a8\"; }\n\n.fa-drupal:before {\n  content: \"\\f1a9\"; }\n\n.fa-joomla:before {\n  content: \"\\f1aa\"; }\n\n.fa-language:before {\n  content: \"\\f1ab\"; }\n\n.fa-fax:before {\n  content: \"\\f1ac\"; }\n\n.fa-building:before {\n  content: \"\\f1ad\"; }\n\n.fa-child:before {\n  content: \"\\f1ae\"; }\n\n.fa-paw:before {\n  content: \"\\f1b0\"; }\n\n.fa-spoon:before {\n  content: \"\\f1b1\"; }\n\n.fa-cube:before {\n  content: \"\\f1b2\"; }\n\n.fa-cubes:before {\n  content: \"\\f1b3\"; }\n\n.fa-behance:before {\n  content: \"\\f1b4\"; }\n\n.fa-behance-square:before {\n  content: \"\\f1b5\"; }\n\n.fa-steam:before {\n  content: \"\\f1b6\"; }\n\n.fa-steam-square:before {\n  content: \"\\f1b7\"; }\n\n.fa-recycle:before {\n  content: \"\\f1b8\"; }\n\n.fa-automobile:before, .fa-car:before {\n  content: \"\\f1b9\"; }\n\n.fa-cab:before, .fa-taxi:before {\n  content: \"\\f1ba\"; }\n\n.fa-tree:before {\n  content: \"\\f1bb\"; }\n\n.fa-spotify:before {\n  content: \"\\f1bc\"; }\n\n.fa-deviantart:before {\n  content: \"\\f1bd\"; }\n\n.fa-soundcloud:before {\n  content: \"\\f1be\"; }\n\n.fa-database:before {\n  content: \"\\f1c0\"; }\n\n.fa-file-pdf-o:before {\n  content: \"\\f1c1\"; }\n\n.fa-file-word-o:before {\n  content: \"\\f1c2\"; }\n\n.fa-file-excel-o:before {\n  content: \"\\f1c3\"; }\n\n.fa-file-powerpoint-o:before {\n  content: \"\\f1c4\"; }\n\n.fa-file-photo-o:before, .fa-file-picture-o:before, .fa-file-image-o:before {\n  content: \"\\f1c5\"; }\n\n.fa-file-zip-o:before, .fa-file-archive-o:before {\n  content: \"\\f1c6\"; }\n\n.fa-file-sound-o:before, .fa-file-audio-o:before {\n  content: \"\\f1c7\"; }\n\n.fa-file-movie-o:before, .fa-file-video-o:before {\n  content: \"\\f1c8\"; }\n\n.fa-file-code-o:before {\n  content: \"\\f1c9\"; }\n\n.fa-vine:before {\n  content: \"\\f1ca\"; }\n\n.fa-codepen:before {\n  content: \"\\f1cb\"; }\n\n.fa-jsfiddle:before {\n  content: \"\\f1cc\"; }\n\n.fa-life-bouy:before, .fa-life-buoy:before, .fa-life-saver:before, .fa-support:before, .fa-life-ring:before {\n  content: \"\\f1cd\"; }\n\n.fa-circle-o-notch:before {\n  content: \"\\f1ce\"; }\n\n.fa-ra:before, .fa-rebel:before {\n  content: \"\\f1d0\"; }\n\n.fa-ge:before, .fa-empire:before {\n  content: \"\\f1d1\"; }\n\n.fa-git-square:before {\n  content: \"\\f1d2\"; }\n\n.fa-git:before {\n  content: \"\\f1d3\"; }\n\n.fa-hacker-news:before {\n  content: \"\\f1d4\"; }\n\n.fa-tencent-weibo:before {\n  content: \"\\f1d5\"; }\n\n.fa-qq:before {\n  content: \"\\f1d6\"; }\n\n.fa-wechat:before, .fa-weixin:before {\n  content: \"\\f1d7\"; }\n\n.fa-send:before, .fa-paper-plane:before {\n  content: \"\\f1d8\"; }\n\n.fa-send-o:before, .fa-paper-plane-o:before {\n  content: \"\\f1d9\"; }\n\n.fa-history:before {\n  content: \"\\f1da\"; }\n\n.fa-genderless:before, .fa-circle-thin:before {\n  content: \"\\f1db\"; }\n\n.fa-header:before {\n  content: \"\\f1dc\"; }\n\n.fa-paragraph:before {\n  content: \"\\f1dd\"; }\n\n.fa-sliders:before {\n  content: \"\\f1de\"; }\n\n.fa-share-alt:before {\n  content: \"\\f1e0\"; }\n\n.fa-share-alt-square:before {\n  content: \"\\f1e1\"; }\n\n.fa-bomb:before {\n  content: \"\\f1e2\"; }\n\n.fa-soccer-ball-o:before, .fa-futbol-o:before {\n  content: \"\\f1e3\"; }\n\n.fa-tty:before {\n  content: \"\\f1e4\"; }\n\n.fa-binoculars:before {\n  content: \"\\f1e5\"; }\n\n.fa-plug:before {\n  content: \"\\f1e6\"; }\n\n.fa-slideshare:before {\n  content: \"\\f1e7\"; }\n\n.fa-twitch:before {\n  content: \"\\f1e8\"; }\n\n.fa-yelp:before {\n  content: \"\\f1e9\"; }\n\n.fa-newspaper-o:before {\n  content: \"\\f1ea\"; }\n\n.fa-wifi:before {\n  content: \"\\f1eb\"; }\n\n.fa-calculator:before {\n  content: \"\\f1ec\"; }\n\n.fa-paypal:before {\n  content: \"\\f1ed\"; }\n\n.fa-google-wallet:before {\n  content: \"\\f1ee\"; }\n\n.fa-cc-visa:before {\n  content: \"\\f1f0\"; }\n\n.fa-cc-mastercard:before {\n  content: \"\\f1f1\"; }\n\n.fa-cc-discover:before {\n  content: \"\\f1f2\"; }\n\n.fa-cc-amex:before {\n  content: \"\\f1f3\"; }\n\n.fa-cc-paypal:before {\n  content: \"\\f1f4\"; }\n\n.fa-cc-stripe:before {\n  content: \"\\f1f5\"; }\n\n.fa-bell-slash:before {\n  content: \"\\f1f6\"; }\n\n.fa-bell-slash-o:before {\n  content: \"\\f1f7\"; }\n\n.fa-trash:before {\n  content: \"\\f1f8\"; }\n\n.fa-copyright:before {\n  content: \"\\f1f9\"; }\n\n.fa-at:before {\n  content: \"\\f1fa\"; }\n\n.fa-eyedropper:before {\n  content: \"\\f1fb\"; }\n\n.fa-paint-brush:before {\n  content: \"\\f1fc\"; }\n\n.fa-birthday-cake:before {\n  content: \"\\f1fd\"; }\n\n.fa-area-chart:before {\n  content: \"\\f1fe\"; }\n\n.fa-pie-chart:before {\n  content: \"\\f200\"; }\n\n.fa-line-chart:before {\n  content: \"\\f201\"; }\n\n.fa-lastfm:before {\n  content: \"\\f202\"; }\n\n.fa-lastfm-square:before {\n  content: \"\\f203\"; }\n\n.fa-toggle-off:before {\n  content: \"\\f204\"; }\n\n.fa-toggle-on:before {\n  content: \"\\f205\"; }\n\n.fa-bicycle:before {\n  content: \"\\f206\"; }\n\n.fa-bus:before {\n  content: \"\\f207\"; }\n\n.fa-ioxhost:before {\n  content: \"\\f208\"; }\n\n.fa-angellist:before {\n  content: \"\\f209\"; }\n\n.fa-cc:before {\n  content: \"\\f20a\"; }\n\n.fa-shekel:before, .fa-sheqel:before, .fa-ils:before {\n  content: \"\\f20b\"; }\n\n.fa-meanpath:before {\n  content: \"\\f20c\"; }\n\n.fa-buysellads:before {\n  content: \"\\f20d\"; }\n\n.fa-connectdevelop:before {\n  content: \"\\f20e\"; }\n\n.fa-dashcube:before {\n  content: \"\\f210\"; }\n\n.fa-forumbee:before {\n  content: \"\\f211\"; }\n\n.fa-leanpub:before {\n  content: \"\\f212\"; }\n\n.fa-sellsy:before {\n  content: \"\\f213\"; }\n\n.fa-shirtsinbulk:before {\n  content: \"\\f214\"; }\n\n.fa-simplybuilt:before {\n  content: \"\\f215\"; }\n\n.fa-skyatlas:before {\n  content: \"\\f216\"; }\n\n.fa-cart-plus:before {\n  content: \"\\f217\"; }\n\n.fa-cart-arrow-down:before {\n  content: \"\\f218\"; }\n\n.fa-diamond:before {\n  content: \"\\f219\"; }\n\n.fa-ship:before {\n  content: \"\\f21a\"; }\n\n.fa-user-secret:before {\n  content: \"\\f21b\"; }\n\n.fa-motorcycle:before {\n  content: \"\\f21c\"; }\n\n.fa-street-view:before {\n  content: \"\\f21d\"; }\n\n.fa-heartbeat:before {\n  content: \"\\f21e\"; }\n\n.fa-venus:before {\n  content: \"\\f221\"; }\n\n.fa-mars:before {\n  content: \"\\f222\"; }\n\n.fa-mercury:before {\n  content: \"\\f223\"; }\n\n.fa-transgender:before {\n  content: \"\\f224\"; }\n\n.fa-transgender-alt:before {\n  content: \"\\f225\"; }\n\n.fa-venus-double:before {\n  content: \"\\f226\"; }\n\n.fa-mars-double:before {\n  content: \"\\f227\"; }\n\n.fa-venus-mars:before {\n  content: \"\\f228\"; }\n\n.fa-mars-stroke:before {\n  content: \"\\f229\"; }\n\n.fa-mars-stroke-v:before {\n  content: \"\\f22a\"; }\n\n.fa-mars-stroke-h:before {\n  content: \"\\f22b\"; }\n\n.fa-neuter:before {\n  content: \"\\f22c\"; }\n\n.fa-facebook-official:before {\n  content: \"\\f230\"; }\n\n.fa-pinterest-p:before {\n  content: \"\\f231\"; }\n\n.fa-whatsapp:before {\n  content: \"\\f232\"; }\n\n.fa-server:before {\n  content: \"\\f233\"; }\n\n.fa-user-plus:before {\n  content: \"\\f234\"; }\n\n.fa-user-times:before {\n  content: \"\\f235\"; }\n\n.fa-hotel:before, .fa-bed:before {\n  content: \"\\f236\"; }\n\n.fa-viacoin:before {\n  content: \"\\f237\"; }\n\n.fa-train:before {\n  content: \"\\f238\"; }\n\n.fa-subway:before {\n  content: \"\\f239\"; }\n\n.fa-medium:before {\n  content: \"\\f23a\"; }\n\n/* LOADING BAR */\n#loading.loaded img {\n  display: none; }\n\n#loading.loaded div {\n  display: block; }\n\n#loading img {\n  display: block; }\n\n#loading div {\n  display: none; }\n\n#loading.load-in-content {\n  position: absolute;\n  z-index: 1;\n  background-color: #fff;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  vertical-align: middle;\n  display: table-cell; }\n  #loading.load-in-content.loaded {\n    top: -150%; }\n  #loading.load-in-content img {\n    width: auto;\n    display: inline-block;\n    margin-top: 280px; }\n\n/* LOADING BAR */\n.page-select {\n  margin: 7px 0 1px;\n  border-bottom: 1px solid #ddd;\n  padding-bottom: 10px; }\n  .page-select label {\n    float: left;\n    margin-right: 8px; }\n  .page-select span {\n    overflow: hidden;\n    display: block;\n    padding: 0 1px; }\n  .page-select select {\n    font-size: 16px; }\n\n/* Organization Type Table */\np.note {\n  padding: .4em;\n  background-color: #ffc;\n  margin-top: .5em;\n  margin-bottom: 1em; }\n\n#organization-type-table {\n  position: relative;\n  width: 100%;\n  margin-top: 30px;\n  margin-bottom: 44px; }\n  #organization-type-table table.dc-datatable {\n    margin: 15px 0;\n    width: 100%; }\n    #organization-type-table table.dc-datatable th, #organization-type-table table.dc-datatable td {\n      font-size: 14px;\n      line-height: 16px;\n      vertical-align: top;\n      text-align: left;\n      padding: 5px 5px; }\n    #organization-type-table table.dc-datatable th {\n      background-color: #eee;\n      text-shadow: 0 -1px 0 rgba(255, 255, 255, 0.5); }\n      #organization-type-table table.dc-datatable th a {\n        color: #222; }\n        #organization-type-table table.dc-datatable th a .dynatable-arrow {\n          color: #666;\n          display: inline-block;\n          font-size: 11px;\n          margin-left: 3px; }\n  #organization-type-table .dynatable-search {\n    position: absolute;\n    top: -28px;\n    right: 5px;\n    font-size: 11px;\n    line-height: 2.4em;\n    width: 50%;\n    padding-left: 45px;\n    text-indent: -45px;\n    text-shadow: 0 -1px 0 rgba(255, 255, 255, 0.6); }\n    #organization-type-table .dynatable-search input {\n      width: 100%;\n      float: right;\n      border-radius: 3px;\n      padding: 4px 4px 4px 2px;\n      border: 1px solid #aaa;\n      margin-top: 1px;\n      outline: 0; }\n      #organization-type-table .dynatable-search input:focus {\n        border-color: #336799;\n        outline: 0;\n        box-shadow: 0 0 3px rgba(53, 104, 147, 0.6); }\n  #organization-type-table .dynatable-per-page {\n    position: absolute;\n    top: -30px;\n    left: 5px; }\n    #organization-type-table .dynatable-per-page span {\n      float: right;\n      margin-left: 3px;\n      margin-top: 2px;\n      font-size: 11px;\n      line-height: 2.2em;\n      text-shadow: 0 -1px 0 rgba(255, 255, 255, 0.6); }\n    #organization-type-table .dynatable-per-page select {\n      width: 64px; }\n  #organization-type-table .dynatable-record-count {\n    font-size: 11px;\n    text-transform: lowercase;\n    position: absolute;\n    bottom: -32px;\n    left: 6px;\n    color: #666;\n    text-shadow: 0 -1px 0 rgba(255, 255, 255, 0.6); }\n  #organization-type-table ul.dynatable-pagination-links {\n    margin: 0 5px 0 0;\n    list-style-type: none;\n    position: absolute;\n    bottom: -37px;\n    padding: 0;\n    right: 5px; }\n    #organization-type-table ul.dynatable-pagination-links li {\n      float: left; }\n      #organization-type-table ul.dynatable-pagination-links li:first-child span {\n        font-size: 11px;\n        text-shadow: 0 -1px 0 rgba(255, 255, 255, 0.6);\n        position: relative;\n        top: 2px; }\n    #organization-type-table ul.dynatable-pagination-links a.dynatable-page-link {\n      padding: 3px 3px;\n      display: block;\n      margin: 0 2px;\n      color: #336799;\n      text-decoration: underline;\n      font-size: 14px; }\n      #organization-type-table ul.dynatable-pagination-links a.dynatable-page-link.dynatable-active-page {\n        text-decoration: none;\n        font-weight: bold;\n        color: #222; }\n    #organization-type-table ul.dynatable-pagination-links a.dynatable-page-prev, #organization-type-table ul.dynatable-pagination-links a.dynatable-page-next {\n      background-color: #f6f6f6;\n      border: 2px solid rgba(53, 104, 147, 0.6);\n      border-radius: 3px;\n      padding: 2px 6px;\n      display: block;\n      text-decoration: none;\n      margin-left: 5px; }\n      #organization-type-table ul.dynatable-pagination-links a.dynatable-page-prev .fa, #organization-type-table ul.dynatable-pagination-links a.dynatable-page-next .fa {\n        color: #bbb; }\n      #organization-type-table ul.dynatable-pagination-links a.dynatable-page-prev:hover, #organization-type-table ul.dynatable-pagination-links a.dynatable-page-next:hover {\n        background-color: #fff; }\n        #organization-type-table ul.dynatable-pagination-links a.dynatable-page-prev:hover .fa, #organization-type-table ul.dynatable-pagination-links a.dynatable-page-next:hover .fa {\n          color: #336799; }\n      #organization-type-table ul.dynatable-pagination-links a.dynatable-page-prev.dynatable-disabled-page, #organization-type-table ul.dynatable-pagination-links a.dynatable-page-next.dynatable-disabled-page {\n        color: #bbb;\n        background-color: #f7f7f7;\n        border-color: #e0e0e0;\n        box-shadow: none;\n        text-decoration: none;\n        cursor: default; }\n        #organization-type-table ul.dynatable-pagination-links a.dynatable-page-prev.dynatable-disabled-page .fa, #organization-type-table ul.dynatable-pagination-links a.dynatable-page-prev.dynatable-disabled-page:hover .fa, #organization-type-table ul.dynatable-pagination-links a.dynatable-page-next.dynatable-disabled-page .fa, #organization-type-table ul.dynatable-pagination-links a.dynatable-page-next.dynatable-disabled-page:hover .fa {\n          color: #e0e0e0; }\n    #organization-type-table ul.dynatable-pagination-links a.dynatable-page-prev {\n      margin-right: 5px; }\n\n/* Organization Type Table */\n/**/\n.page-title {\n  font-size: 2em; }\n\n.large-tiles {\n  margin-bottom: 1.5em !important; }\n  .large-tiles a {\n    color: #0a5691;\n    border: 1px solid rgba(0, 0, 0, 0.1);\n    box-shadow: 1px 1px 1px 0 rgba(0, 0, 0, 0.2);\n    background-color: #eee;\n    width: 100%;\n    height: 11em;\n    display: block;\n    text-align: center;\n    margin: 1em 0 .5em 0;\n    position: relative;\n    top: 0;\n    left: 0;\n    -ms-transition: all 89ms ease-in;\n    /* IE10 is actually unprefixed */\n    transition: all 89ms ease-in 0; }\n    .large-tiles a i {\n      font-size: 6em;\n      margin-top: .25em;\n      text-shadow: 0px 0px 1px #297cbd; }\n    .large-tiles a span {\n      display: block;\n      font-style: italic;\n      color: #555;\n      text-shadow: 0 -1px 1px white;\n      margin-top: .5em; }\n    .large-tiles a:focus {\n      border-color: #0a5691; }\n    .large-tiles a:active {\n      border-color: #0a5691; }\n    .large-tiles a:hover, .large-tiles a:focus, .large-tiles a:active {\n      background-color: #ebebeb;\n      box-shadow: 1px 1px 1px 0 rgba(120, 120, 120, 0.1);\n      top: 1px;\n      left: 1px;\n      color: #000; }\n      .large-tiles a:hover i, .large-tiles a:focus i, .large-tiles a:active i {\n        color: #297cbd; }\n      .large-tiles a:hover span, .large-tiles a:focus span, .large-tiles a:active span {\n        display: block; }\n\n.hide-visually {\n  position: absolute !important;\n  left: -999999px !important;\n  top: auto !important;\n  overflow: hidden !important;\n  height: 1px !important;\n  width: 1px !important; }\n\n.skip-link {\n  top: -35px;\n  left: 50%;\n  position: absolute;\n  margin-left: -60px;\n  background: rgba(0, 0, 0, 0.9);\n  color: #fff !important;\n  display: block;\n  padding: 1px 10px 2px 10px;\n  text-decoration: none;\n  border-radius: 0 0 5px 5px;\n  z-index: 1;\n  font-size: 12px; }\n\n.allow-focus.skip-link:focus {\n  top: 0; }\n\n.row {\n  max-width: 100%; }\n\n.row-title {\n  background-color: #eee;\n  border-bottom: 1px solid #ccc; }\n  .row-title h1 {\n    font-size: 1em;\n    text-transform: uppercase;\n    line-height: 2.2em;\n    margin: 0; }\n\n.row-content {\n  background-color: #fff; }\n  .row-content a {\n    color: #0a5691; }\n    .row-content a:hover, .row-content a:focus, .row-content a:active {\n      color: #297cbd; }\n\n/*off-canvas fullscreen layout*/\n.off-canvas-wrap {\n  background-color: #fff;\n  overflow-y: auto; }\n\n.off-canvas-wrap.move-left {\n  background-color: #666; }\n\n.off-canvas-wrap .right-off-canvas-menu {\n  display: none; }\n\na.right-off-canvas-toggle {\n  background: none repeat scroll 0 0 transparent;\n  box-shadow: none;\n  height: 32px;\n  position: absolute;\n  width: 44px;\n  transition: margin 380ms ease 0s;\n  top: 0;\n  right: 0;\n  text-indent: -1000px;\n  overflow: hidden;\n  pointer-events: auto;\n  padding-left: 5px;\n  z-index: 10000000;\n  padding-right: 0.9375rem; }\n  a.right-off-canvas-toggle span {\n    background: none repeat scroll 0 0 #666;\n    border: 2px solid #515151;\n    border-radius: 5px;\n    display: block;\n    height: 1px;\n    position: relative;\n    text-indent: -1000px;\n    width: 25px;\n    top: -10px; }\n    a.right-off-canvas-toggle span:before, a.right-off-canvas-toggle span:after {\n      position: absolute;\n      top: -9px;\n      left: -2px;\n      content: \" \";\n      background-color: #666;\n      border: 2px solid #515151;\n      border-radius: 5px;\n      display: block;\n      height: 1px;\n      width: 25px; }\n    a.right-off-canvas-toggle span:after {\n      top: 5px; }\n\n.move-left a.right-off-canvas-toggle {\n  right: -.3425rem; }\n\n.off-canvas-fullscreen .off-canvas-wrap, .off-canvas-fullscreen .inner-wrap {\n  height: auto; }\n\n.canvas-content {\n  background-color: #fff;\n  box-shadow: 2px 0 1px rgba(0, 0, 0, 0.3);\n  padding-bottom: 2px;\n  height: 100%;\n  min-height: 100vh;\n  z-index: 1002; }\n\n.exit-off-canvas {\n  display: none; }\n\n.move-left .exit-off-canvas {\n  background: none;\n  box-shadow: none;\n  height: 100%;\n  left: auto;\n  right: 0;\n  width: 100%; }\n\n.off-canvas-wrap .right-off-canvas-menu {\n  display: block; }\n\n.move-left > .inner-wrap {\n  -ms-transform: translate(-90%, 0);\n  -webkit-transform: translate3d(-90%, 0, 0);\n  -moz-transform: translate3d(-90%, 0, 0);\n  -ms-transform: translate3d(-90%, 0, 0);\n  -o-transform: translate3d(-90%, 0, 0);\n  transform: translate3d(-90%, 0, 0); }\n\n.right-off-canvas-menu {\n  background-color: #666;\n  padding: 12px 0 10px 0;\n  right: -10%;\n  transform: translate3d(90%, 0px, 0px);\n  width: 87%; }\n  .right-off-canvas-menu .off-canvas-menu-container {\n    background-color: #fff;\n    padding: 10px 8px 20px;\n    margin: 0px 14px; }\n    .right-off-canvas-menu .off-canvas-menu-container h2 {\n      text-indent: -10000px;\n      height: auto;\n      margin: 0; }\n      .right-off-canvas-menu .off-canvas-menu-container h2 span {\n        display: none; }\n      .right-off-canvas-menu .off-canvas-menu-container h2 img {\n        float: left;\n        width: 96%; }\n    .right-off-canvas-menu .off-canvas-menu-container > ul {\n      list-style-type: none;\n      margin: 6px 0 0 0;\n      padding: 15px 0 0 0;\n      max-width: 540px;\n      border-top: 1px solid #eee; }\n    .right-off-canvas-menu .off-canvas-menu-container a {\n      color: #0a5691; }\n      .right-off-canvas-menu .off-canvas-menu-container a:hover, .right-off-canvas-menu .off-canvas-menu-container a:focus, .right-off-canvas-menu .off-canvas-menu-container a:active {\n        color: #297cbd; }\n\n@media only screen and (min-width: 46.13em) {\n  /* home page */\n  .large-tiles a {\n    height: 18em; }\n    .large-tiles a i {\n      font-size: 11em; }\n  /* offcanvas styles */\n  .move-left a.right-off-canvas-toggle {\n    right: 0; }\n  .right-off-canvas-menu {\n    -ms-transform: translate(76.2%, 0);\n    -webkit-transform: translate3d(76.2%, 0, 0);\n    -moz-transform: translate3d(76.2%, 0, 0);\n    -ms-transform: translate3d(76.2%, 0, 0);\n    -o-transform: translate3d(76.2%, 0, 0);\n    transform: translate3d(76.2%, 0px, 0px);\n    width: 38%; }\n    .right-off-canvas-menu .off-canvas-menu-container > ul {\n      max-width: none; }\n  .move-left .right-off-canvas-menu {\n    right: -9.6%; }\n  .move-left > .inner-wrap {\n    -ms-transform: translate(-39%, 0);\n    -webkit-transform: translate3d(-39%, 0, 0);\n    -moz-transform: translate3d(-39%, 0, 0);\n    -ms-transform: translate3d(-39%, 0, 0);\n    -o-transform: translate3d(-39%, 0, 0);\n    transform: translate3d(-39%, 0, 0); } }\n\n.dc-chart g.row text {\n  fill: black; }\n", ""]);

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(23);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(34)(content, {});
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		module.hot.accept("!!/Users/jackcompton/projects/18f-dryrun/node_modules/css-loader/index.js!/Users/jackcompton/projects/18f-dryrun/node_modules/sass-loader/index.js!/Users/jackcompton/projects/18f-dryrun/app/assets/stylesheets/_filter_builder.scss", function() {
			var newContent = require("!!/Users/jackcompton/projects/18f-dryrun/node_modules/css-loader/index.js!/Users/jackcompton/projects/18f-dryrun/node_modules/sass-loader/index.js!/Users/jackcompton/projects/18f-dryrun/app/assets/stylesheets/_filter_builder.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(50)();
	exports.push([module.id, ".row.row-filter {\n  /* optional foundation row layout */\n  background-color: rgba(120, 120, 120, 0.15);\n  padding: 0;\n  font-size: 12px;\n  min-height: 33px; }\n  .row.row-filter .filter-builder {\n    background-color: transparent; }\n\n.filter-builder {\n  background-color: rgba(120, 120, 120, 0.15);\n  border-bottom: 1px solid #cfcfcf;\n  padding: 0 0.9375rem;\n  font-size: 12px;\n  min-height: 33px;\n  pointer-events: none;\n  width: 100%; }\n  .filter-builder h2 {\n    margin: 0;\n    font-size: 12px;\n    position: absolute;\n    z-index: 0;\n    top: 3px; }\n  .filter-builder i.fa {\n    color: #666; }\n  .filter-builder ul {\n    padding: 0;\n    margin: 0;\n    list-style-type: none; }\n  .filter-builder li {\n    display: inline;\n    float: left; }\n  .filter-builder li.filtered-field {\n    background-color: #fff;\n    color: #666;\n    border: 1px solid #ccc;\n    margin: 3px 0 3px 1em;\n    padding: 0;\n    float: left;\n    border-radius: 5px;\n    font-size: 12px;\n    line-height: 1.5;\n    text-indent: 0;\n    overflow: hidden; }\n    .filter-builder li.filtered-field:first-child {\n      margin-left: 24px; }\n    .filter-builder li.filtered-field.no-tag {\n      background-color: transparent;\n      border-width: 0;\n      text-indent: 20px;\n      font-size: 12px; }\n      .filter-builder li.filtered-field.no-tag:hover {\n        color: #666;\n        background-color: transparent; }\n    .filter-builder li.filtered-field span {\n      display: table-cell;\n      height: 100%;\n      vertical-align: top;\n      padding: 3px 2px 3px 4px; }\n      .filter-builder li.filtered-field span.field-label {\n        cursor: default;\n        font-weight: bold;\n        padding-left: 4px;\n        white-space: nowrap; }\n      .filter-builder li.filtered-field span.close {\n        cursor: pointer;\n        padding-right: 3px;\n        pointer-events: auto; }\n        .filter-builder li.filtered-field span.close:hover .fa-times {\n          color: #C2113A; }\n        .filter-builder li.filtered-field span.close .fa-times {\n          font-size: 14px; }\n    .filter-builder li.filtered-field ul.filter-value-list {\n      display: table-cell; }\n      .filter-builder li.filtered-field ul.filter-value-list > li {\n        margin: 0px;\n        padding: 3px 5px;\n        pointer-events: auto; }\n        .filter-builder li.filtered-field ul.filter-value-list > li.filter-value {\n          font-weight: normal;\n          font-size: 12px;\n          border: 1px solid #d3d3d3;\n          margin: 2px 0 2px 3px;\n          padding: 0 4px;\n          border-radius: 4px;\n          cursor: pointer;\n          transition: all 140ms ease; }\n          .filter-builder li.filtered-field ul.filter-value-list > li.filter-value:hover {\n            text-decoration: line-through;\n            border-color: #eaeaea;\n            color: #aaa; }\n        .filter-builder li.filtered-field ul.filter-value-list > li.add-value {\n          padding: 0 4px;\n          margin-left: 2px;\n          border-color: #fff;\n          cursor: pointer;\n          line-height: 18px; }\n          .filter-builder li.filtered-field ul.filter-value-list > li.add-value .fa-plus {\n            border: 1px solid #dfdfdf;\n            padding: 1px 3px 1px 3px;\n            border-radius: 3px;\n            display: inline; }\n          .filter-builder li.filtered-field ul.filter-value-list > li.add-value:hover {\n            border-color: #fff; }\n            .filter-builder li.filtered-field ul.filter-value-list > li.add-value:hover .fa-plus {\n              color: #007e40;\n              border-color: #dadada;\n              box-shadow: 0 0 7px rgba(0, 0, 0, 0.17) inset; }\n  .filter-builder li.filtered-field .picker-choices, .filter-builder li.add-filter .picker-choices {\n    border: 1px solid #ddd;\n    border-bottom-color: #ccc;\n    position: absolute;\n    z-index: 99;\n    background-color: rgba(255, 255, 255, 0.95);\n    max-height: 26em;\n    width: 36%;\n    left: 0;\n    top: 32px;\n    box-shadow: 2px 3px 2px rgba(0, 0, 0, 0.1), 0px 0px 7px rgba(0, 0, 0, 0.08) inset; }\n    .filter-builder li.filtered-field .picker-choices .value-list-container, .filter-builder li.add-filter .picker-choices .value-list-container {\n      left: -180%;\n      top: 27px;\n      min-width: 174%;\n      max-height: 24em !important;\n      overflow-x: hidden;\n      overflow-y: hidden;\n      transition: all 380ms ease; }\n    .filter-builder li.filtered-field .picker-choices .value-list, .filter-builder li.add-filter .picker-choices .value-list {\n      left: -180%;\n      top: 27px;\n      min-width: 100%;\n      max-height: 14em !important;\n      overflow: auto;\n      overflow-x: hidden;\n      transition: all 380ms ease; }\n    .filter-builder li.filtered-field .picker-choices div.header, .filter-builder li.add-filter .picker-choices div.header {\n      position: relative;\n      font-family: 'Abel', Helvetica, Arial, sans-serif;\n      font-size: 12px;\n      padding: .1rem .9375rem;\n      border-bottom: 1px solid #ddd;\n      height: 27px;\n      line-height: 1.4rem;\n      color: #999;\n      background-color: #fff;\n      pointer-events: auto; }\n      .filter-builder li.filtered-field .picker-choices div.header .fa-times, .filter-builder li.add-filter .picker-choices div.header .fa-times {\n        width: 100%;\n        cursor: pointer;\n        position: absolute;\n        top: 0;\n        left: 0;\n        height: 100%;\n        text-align: right;\n        padding: 4px 5px 0 0;\n        font-size: 14px; }\n      .filter-builder li.filtered-field .picker-choices div.header:hover .fa-times, .filter-builder li.add-filter .picker-choices div.header:hover .fa-times {\n        color: #C2113A; }\n    .filter-builder li.filtered-field .picker-choices li, .filter-builder li.add-filter .picker-choices li {\n      display: block;\n      cursor: pointer;\n      border: none;\n      float: none;\n      padding: 0.4rem 0.9375rem;\n      font-size: 12px;\n      line-height: 1.1rem;\n      pointer-events: auto; }\n      .filter-builder li.filtered-field .picker-choices li:hover, .filter-builder li.add-filter .picker-choices li:hover {\n        background-color: #EEE; }\n      .filter-builder li.filtered-field .picker-choices li.selected, .filter-builder li.add-filter .picker-choices li.selected {\n        background-color: #ddd; }\n        .filter-builder li.filtered-field .picker-choices li.selected .value-list-container, .filter-builder li.add-filter .picker-choices li.selected .value-list-container {\n          left: 100%;\n          transition: all 180ms ease;\n          overflow: hidden; }\n  .filter-builder li.add-filter + li.filtered-field {\n    margin-left: 0; }\n  .filter-builder .listFilterContainer {\n    background-color: #eee;\n    border-bottom: 1px solid #dbdbdb;\n    padding: .7%;\n    box-shadow: 0 0 5px rgba(120, 120, 120, 0.2);\n    position: relative; }\n    .filter-builder .listFilterContainer i.fa {\n      font-size: 1.2em;\n      position: absolute;\n      margin-top: 6px;\n      margin-left: 6px; }\n    .filter-builder .listFilterContainer input {\n      width: 100%;\n      padding: 5px;\n      font-family: \"Helvetica Neue\", \"Helvetica\", Helvetica, Arial, sans-serif;\n      font-size: 12px;\n      background-color: #fff;\n      border-radius: 3px;\n      border: 1px solid #bbb;\n      text-indent: 16px; }\n  .filter-builder .add-value .listFilterContainer {\n    padding: .5%; }\n    .filter-builder .add-value .listFilterContainer i.fa {\n      margin-top: 5px;\n      margin-left: 5px; }\n    .filter-builder .add-value .listFilterContainer input {\n      padding-top: 4px;\n      text-indent: 15px; }\n  .filter-builder ::-webkit-input-placeholder {\n    font-family: 'Abel', Helvetica, Arial, sans-serif; }\n  .filter-builder :-moz-placeholder {\n    /* Firefox 18- */\n    font-family: 'Abel', Helvetica, Arial, sans-serif; }\n  .filter-builder ::-moz-placeholder {\n    /* Firefox 19+ */\n    font-family: 'Abel', Helvetica, Arial, sans-serif; }\n  .filter-builder :-ms-input-placeholder {\n    font-family: 'Abel', Helvetica, Arial, sans-serif; }\n  .filter-builder li.add-filter i.fa-plus {\n    display: block;\n    padding: 8px 3px 5px 16px;\n    position: relative;\n    left: -1px;\n    z-index: 1;\n    cursor: pointer;\n    top: 4px;\n    pointer-events: auto; }\n  .filter-builder li.add-filter:hover i.fa-plus {\n    color: #007e40; }\n  .filter-builder li.filtered-field .picker-choices {\n    overflow-y: hidden;\n    overflow-x: hidden;\n    width: 98%; }\n    .filter-builder li.filtered-field .picker-choices li {\n      color: #666; }\n  .filter-builder .dimension-list-container, .filter-builder .value-list-container {\n    display: none; }\n  .filter-builder .value-list-container li.hidden.value-option {\n    display: none; }\n", ""]);

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(25);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(34)(content, {});
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		module.hot.accept("!!/Users/jackcompton/projects/18f-dryrun/node_modules/css-loader/index.js!/Users/jackcompton/projects/18f-dryrun/node_modules/sass-loader/index.js!/Users/jackcompton/projects/18f-dryrun/app/assets/stylesheets/_d3-tips.scss", function() {
			var newContent = require("!!/Users/jackcompton/projects/18f-dryrun/node_modules/css-loader/index.js!/Users/jackcompton/projects/18f-dryrun/node_modules/sass-loader/index.js!/Users/jackcompton/projects/18f-dryrun/app/assets/stylesheets/_d3-tips.scss");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(50)();
	exports.push([module.id, ".d3-tip-mouse {\n  font-size: 13px;\n  line-height: 16px;\n  padding: 8px;\n  background: rgba(0, 0, 0, 0.8);\n  color: #fff;\n  border-radius: 2px;\n  pointer-events: none;\n  z-index: 100;\n  outline: none; }\n  .d3-tip-mouse label {\n    font-family: 'Abel', Helvetica, Arial, sans-serif;\n    font-weight: 400; }\n\n.d3-tip {\n  font-size: 13px;\n  line-height: 16px;\n  padding: 8px;\n  background: rgba(0, 0, 0, 0.8);\n  color: #fff;\n  border-radius: 2px;\n  pointer-events: none;\n  z-index: 100;\n  outline: none;\n  /* Creates a small triangle extender for the tooltip */\n  /* Northward tooltips */\n  /* Eastward tooltips */\n  /* Southward tooltips */\n  /* Westward tooltips */ }\n  .d3-tip label {\n    font-family: 'Abel', Helvetica, Arial, sans-serif;\n    font-weight: 400; }\n  .d3-tip:after {\n    box-sizing: border-box;\n    display: inline;\n    font-size: 10px;\n    width: 100%;\n    line-height: 1;\n    color: rgba(0, 0, 0, 0.8);\n    position: absolute;\n    pointer-events: none;\n    z-index: 100; }\n  .d3-tip.n:after {\n    content: \"\\25BC\";\n    top: auto;\n    bottom: -7px;\n    left: 0;\n    text-align: center; }\n  .d3-tip.ne:after {\n    content: \"\\25BC\";\n    top: auto;\n    bottom: -7px;\n    left: 0;\n    text-align: left;\n    padding-left: 8px; }\n  .d3-tip.nw:after {\n    content: \"\\25BC\";\n    top: auto;\n    bottom: -7px;\n    left: 0;\n    text-align: right;\n    padding-right: 8px; }\n  .d3-tip.e:after {\n    content: \"\\25C0\";\n    margin: -4px 0 0 0;\n    top: 50%;\n    left: -7px; }\n  .d3-tip.s:after {\n    content: \"\\25B2\";\n    margin: 0 0 1px 0;\n    top: -8px;\n    left: 0;\n    text-align: center; }\n  .d3-tip.w:after {\n    content: \"\\25B6\";\n    margin: -4px 0 0 -2px;\n    top: 50%;\n    left: 100%; }\n", ""]);

/***/ },
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * inflection
	 * Copyright(c) 2011 Ben Lin <ben@dreamerslab.com>
	 * MIT Licensed
	 *
	 * @fileoverview
	 * A port of inflection-js to node.js module.
	 */

	( function ( root, factory ){
	  if( true ){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }else if( typeof exports === 'object' ){
	    module.exports = factory();
	  }else{
	    root.inflection = factory();
	  }
	}( this, function (){

	  /**
	   * @description This is a list of nouns that use the same form for both singular and plural.
	   *              This list should remain entirely in lower case to correctly match Strings.
	   * @private
	   */
	  var uncountable_words = [
	    'equipment', 'information', 'rice', 'money', 'species',
	    'series', 'fish', 'sheep', 'moose', 'deer', 'news'
	  ];

	  /**
	   * @description These rules translate from the singular form of a noun to its plural form.
	   * @private
	   */
	  var plural_rules = [

	    // do not replace if its already a plural word
	    [ new RegExp( '(m)en$',      'gi' )],
	    [ new RegExp( '(pe)ople$',   'gi' )],
	    [ new RegExp( '(child)ren$', 'gi' )],
	    [ new RegExp( '([ti])a$',    'gi' )],
	    [ new RegExp( '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$','gi' )],
	    [ new RegExp( '(hive)s$',           'gi' )],
	    [ new RegExp( '(tive)s$',           'gi' )],
	    [ new RegExp( '(curve)s$',          'gi' )],
	    [ new RegExp( '([lr])ves$',         'gi' )],
	    [ new RegExp( '([^fo])ves$',        'gi' )],
	    [ new RegExp( '([^aeiouy]|qu)ies$', 'gi' )],
	    [ new RegExp( '(s)eries$',          'gi' )],
	    [ new RegExp( '(m)ovies$',          'gi' )],
	    [ new RegExp( '(x|ch|ss|sh)es$',    'gi' )],
	    [ new RegExp( '([m|l])ice$',        'gi' )],
	    [ new RegExp( '(bus)es$',           'gi' )],
	    [ new RegExp( '(o)es$',             'gi' )],
	    [ new RegExp( '(shoe)s$',           'gi' )],
	    [ new RegExp( '(cris|ax|test)es$',  'gi' )],
	    [ new RegExp( '(octop|vir)i$',      'gi' )],
	    [ new RegExp( '(alias|status)es$',  'gi' )],
	    [ new RegExp( '^(ox)en',            'gi' )],
	    [ new RegExp( '(vert|ind)ices$',    'gi' )],
	    [ new RegExp( '(matr)ices$',        'gi' )],
	    [ new RegExp( '(quiz)zes$',         'gi' )],

	    // original rule
	    [ new RegExp( '(m)an$', 'gi' ),                 '$1en' ],
	    [ new RegExp( '(pe)rson$', 'gi' ),              '$1ople' ],
	    [ new RegExp( '(child)$', 'gi' ),               '$1ren' ],
	    [ new RegExp( '^(ox)$', 'gi' ),                 '$1en' ],
	    [ new RegExp( '(ax|test)is$', 'gi' ),           '$1es' ],
	    [ new RegExp( '(octop|vir)us$', 'gi' ),         '$1i' ],
	    [ new RegExp( '(alias|status)$', 'gi' ),        '$1es' ],
	    [ new RegExp( '(bu)s$', 'gi' ),                 '$1ses' ],
	    [ new RegExp( '(buffal|tomat|potat)o$', 'gi' ), '$1oes' ],
	    [ new RegExp( '([ti])um$', 'gi' ),              '$1a' ],
	    [ new RegExp( 'sis$', 'gi' ),                   'ses' ],
	    [ new RegExp( '(?:([^f])fe|([lr])f)$', 'gi' ),  '$1$2ves' ],
	    [ new RegExp( '(hive)$', 'gi' ),                '$1s' ],
	    [ new RegExp( '([^aeiouy]|qu)y$', 'gi' ),       '$1ies' ],
	    [ new RegExp( '(x|ch|ss|sh)$', 'gi' ),          '$1es' ],
	    [ new RegExp( '(matr|vert|ind)ix|ex$', 'gi' ),  '$1ices' ],
	    [ new RegExp( '([m|l])ouse$', 'gi' ),           '$1ice' ],
	    [ new RegExp( '(quiz)$', 'gi' ),                '$1zes' ],

	    [ new RegExp( 's$', 'gi' ), 's' ],
	    [ new RegExp( '$', 'gi' ),  's' ]
	  ];

	  /**
	   * @description These rules translate from the plural form of a noun to its singular form.
	   * @private
	   */
	  var singular_rules = [

	    // do not replace if its already a singular word
	    [ new RegExp( '(m)an$',                 'gi' )],
	    [ new RegExp( '(pe)rson$',              'gi' )],
	    [ new RegExp( '(child)$',               'gi' )],
	    [ new RegExp( '^(ox)$',                 'gi' )],
	    [ new RegExp( '(ax|test)is$',           'gi' )],
	    [ new RegExp( '(octop|vir)us$',         'gi' )],
	    [ new RegExp( '(alias|status)$',        'gi' )],
	    [ new RegExp( '(bu)s$',                 'gi' )],
	    [ new RegExp( '(buffal|tomat|potat)o$', 'gi' )],
	    [ new RegExp( '([ti])um$',              'gi' )],
	    [ new RegExp( 'sis$',                   'gi' )],
	    [ new RegExp( '(?:([^f])fe|([lr])f)$',  'gi' )],
	    [ new RegExp( '(hive)$',                'gi' )],
	    [ new RegExp( '([^aeiouy]|qu)y$',       'gi' )],
	    [ new RegExp( '(x|ch|ss|sh)$',          'gi' )],
	    [ new RegExp( '(matr|vert|ind)ix|ex$',  'gi' )],
	    [ new RegExp( '([m|l])ouse$',           'gi' )],
	    [ new RegExp( '(quiz)$',                'gi' )],

	    // original rule
	    [ new RegExp( '(m)en$', 'gi' ),                                                       '$1an' ],
	    [ new RegExp( '(pe)ople$', 'gi' ),                                                    '$1rson' ],
	    [ new RegExp( '(child)ren$', 'gi' ),                                                  '$1' ],
	    [ new RegExp( '([ti])a$', 'gi' ),                                                     '$1um' ],
	    [ new RegExp( '((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$','gi' ), '$1$2sis' ],
	    [ new RegExp( '(hive)s$', 'gi' ),                                                     '$1' ],
	    [ new RegExp( '(tive)s$', 'gi' ),                                                     '$1' ],
	    [ new RegExp( '(curve)s$', 'gi' ),                                                    '$1' ],
	    [ new RegExp( '([lr])ves$', 'gi' ),                                                   '$1f' ],
	    [ new RegExp( '([^fo])ves$', 'gi' ),                                                  '$1fe' ],
	    [ new RegExp( '(m)ovies$', 'gi' ),                                                    '$1ovie' ],
	    [ new RegExp( '([^aeiouy]|qu)ies$', 'gi' ),                                           '$1y' ],
	    [ new RegExp( '(s)eries$', 'gi' ),                                                    '$1eries' ],
	    [ new RegExp( '(x|ch|ss|sh)es$', 'gi' ),                                              '$1' ],
	    [ new RegExp( '([m|l])ice$', 'gi' ),                                                  '$1ouse' ],
	    [ new RegExp( '(bus)es$', 'gi' ),                                                     '$1' ],
	    [ new RegExp( '(o)es$', 'gi' ),                                                       '$1' ],
	    [ new RegExp( '(shoe)s$', 'gi' ),                                                     '$1' ],
	    [ new RegExp( '(cris|ax|test)es$', 'gi' ),                                            '$1is' ],
	    [ new RegExp( '(octop|vir)i$', 'gi' ),                                                '$1us' ],
	    [ new RegExp( '(alias|status)es$', 'gi' ),                                            '$1' ],
	    [ new RegExp( '^(ox)en', 'gi' ),                                                      '$1' ],
	    [ new RegExp( '(vert|ind)ices$', 'gi' ),                                              '$1ex' ],
	    [ new RegExp( '(matr)ices$', 'gi' ),                                                  '$1ix' ],
	    [ new RegExp( '(quiz)zes$', 'gi' ),                                                   '$1' ],
	    [ new RegExp( 'ss$', 'gi' ),                                                          'ss' ],
	    [ new RegExp( 's$', 'gi' ),                                                           '' ]
	  ];

	  /**
	   * @description This is a list of words that should not be capitalized for title case.
	   * @private
	   */
	  var non_titlecased_words = [
	    'and', 'or', 'nor', 'a', 'an', 'the', 'so', 'but', 'to', 'of', 'at','by',
	    'from', 'into', 'on', 'onto', 'off', 'out', 'in', 'over', 'with', 'for'
	  ];

	  /**
	   * @description These are regular expressions used for converting between String formats.
	   * @private
	   */
	  var id_suffix         = new RegExp( '(_ids|_id)$', 'g' );
	  var underbar          = new RegExp( '_', 'g' );
	  var space_or_underbar = new RegExp( '[\ _]', 'g' );
	  var uppercase         = new RegExp( '([A-Z])', 'g' );
	  var underbar_prefix   = new RegExp( '^_' );

	  var inflector = {

	  /**
	   * A helper method that applies rules based replacement to a String.
	   * @private
	   * @function
	   * @param {String} str String to modify and return based on the passed rules.
	   * @param {Array: [RegExp, String]} rules Regexp to match paired with String to use for replacement
	   * @param {Array: [String]} skip Strings to skip if they match
	   * @param {String} override String to return as though this method succeeded (used to conform to APIs)
	   * @returns {String} Return passed String modified by passed rules.
	   * @example
	   *
	   *     this._apply_rules( 'cows', singular_rules ); // === 'cow'
	   */
	    _apply_rules : function ( str, rules, skip, override ){
	      if( override ){
	        str = override;
	      }else{
	        var ignore = ( inflector.indexOf( skip, str.toLowerCase()) > -1 );

	        if( !ignore ){
	          var i = 0;
	          var j = rules.length;

	          for( ; i < j; i++ ){
	            if( str.match( rules[ i ][ 0 ])){
	              if( rules[ i ][ 1 ] !== undefined ){
	                str = str.replace( rules[ i ][ 0 ], rules[ i ][ 1 ]);
	              }
	              break;
	            }
	          }
	        }
	      }

	      return str;
	    },



	  /**
	   * This lets us detect if an Array contains a given element.
	   * @public
	   * @function
	   * @param {Array} arr The subject array.
	   * @param {Object} item Object to locate in the Array.
	   * @param {Number} from_index Starts checking from this position in the Array.(optional)
	   * @param {Function} compare_func Function used to compare Array item vs passed item.(optional)
	   * @returns {Number} Return index position in the Array of the passed item.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.indexOf([ 'hi','there' ], 'guys' ); // === -1
	   *     inflection.indexOf([ 'hi','there' ], 'hi' ); // === 0
	   */
	    indexOf : function ( arr, item, from_index, compare_func ){
	      if( !from_index ){
	        from_index = -1;
	      }

	      var index = -1;
	      var i     = from_index;
	      var j     = arr.length;

	      for( ; i < j; i++ ){
	        if( arr[ i ]  === item || compare_func && compare_func( arr[ i ], item )){
	          index = i;
	          break;
	        }
	      }

	      return index;
	    },



	  /**
	   * This function adds pluralization support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @param {String} plural Overrides normal output with said String.(optional)
	   * @returns {String} Singular English language nouns are returned in plural form.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.pluralize( 'person' ); // === 'people'
	   *     inflection.pluralize( 'octopus' ); // === 'octopi'
	   *     inflection.pluralize( 'Hat' ); // === 'Hats'
	   *     inflection.pluralize( 'person', 'guys' ); // === 'guys'
	   */
	    pluralize : function ( str, plural ){
	      return inflector._apply_rules( str, plural_rules, uncountable_words, plural );
	    },



	  /**
	   * This function adds singularization support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @param {String} singular Overrides normal output with said String.(optional)
	   * @returns {String} Plural English language nouns are returned in singular form.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.singularize( 'people' ); // === 'person'
	   *     inflection.singularize( 'octopi' ); // === 'octopus'
	   *     inflection.singularize( 'Hats' ); // === 'Hat'
	   *     inflection.singularize( 'guys', 'person' ); // === 'person'
	   */
	    singularize : function ( str, singular ){
	      return inflector._apply_rules( str, singular_rules, uncountable_words, singular );
	    },



	  /**
	   * This function adds camelization support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)
	   *                                 Passing true will lowercase it.
	   * @returns {String} Lower case underscored words will be returned in camel case.
	   *                  additionally '/' is translated to '::'
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.camelize( 'message_properties' ); // === 'MessageProperties'
	   *     inflection.camelize( 'message_properties', true ); // === 'messageProperties'
	   */
	    camelize : function ( str, low_first_letter ){
	      var str_path = str.split( '/' );
	      var i        = 0;
	      var j        = str_path.length;
	      var str_arr, init_x, k, l, first;

	      for( ; i < j; i++ ){
	        str_arr = str_path[ i ].split( '_' );
	        k       = 0;
	        l       = str_arr.length;

	        for( ; k < l; k++ ){
	          if( k !== 0 ){
	            str_arr[ k ] = str_arr[ k ].toLowerCase();
	          }

	          first = str_arr[ k ].charAt( 0 );
	          first = low_first_letter && i === 0 && k === 0
	            ? first.toLowerCase() : first.toUpperCase();
	          str_arr[ k ] = first + str_arr[ k ].substring( 1 );
	        }

	        str_path[ i ] = str_arr.join( '' );
	      }

	      return str_path.join( '::' );
	    },



	  /**
	   * This function adds underscore support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @param {Boolean} all_upper_case Default is to lowercase and add underscore prefix.(optional)
	   *                  Passing true will return as entered.
	   * @returns {String} Camel cased words are returned as lower cased and underscored.
	   *                  additionally '::' is translated to '/'.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.underscore( 'MessageProperties' ); // === 'message_properties'
	   *     inflection.underscore( 'messageProperties' ); // === 'message_properties'
	   *     inflection.underscore( 'MP', true ); // === 'MP'
	   */
	    underscore : function ( str, all_upper_case ){
	      if( all_upper_case && str === str.toUpperCase()) return str;

	      var str_path = str.split( '::' );
	      var i        = 0;
	      var j        = str_path.length;

	      for( ; i < j; i++ ){
	        str_path[ i ] = str_path[ i ].replace( uppercase, '_$1' );
	        str_path[ i ] = str_path[ i ].replace( underbar_prefix, '' );
	      }

	      return str_path.join( '/' ).toLowerCase();
	    },



	  /**
	   * This function adds humanize support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @param {Boolean} low_first_letter Default is to capitalize the first letter of the results.(optional)
	   *                                 Passing true will lowercase it.
	   * @returns {String} Lower case underscored words will be returned in humanized form.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.humanize( 'message_properties' ); // === 'Message properties'
	   *     inflection.humanize( 'message_properties', true ); // === 'message properties'
	   */
	    humanize : function ( str, low_first_letter ){
	      str = str.toLowerCase();
	      str = str.replace( id_suffix, '' );
	      str = str.replace( underbar, ' ' );

	      if( !low_first_letter ){
	        str = inflector.capitalize( str );
	      }

	      return str;
	    },



	  /**
	   * This function adds capitalization support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @returns {String} All characters will be lower case and the first will be upper.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.capitalize( 'message_properties' ); // === 'Message_properties'
	   *     inflection.capitalize( 'message properties', true ); // === 'Message properties'
	   */
	    capitalize : function ( str ){
	      str = str.toLowerCase();

	      return str.substring( 0, 1 ).toUpperCase() + str.substring( 1 );
	    },



	  /**
	   * This function adds dasherization support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @returns {String} Replaces all spaces or underbars with dashes.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.dasherize( 'message_properties' ); // === 'message-properties'
	   *     inflection.dasherize( 'Message Properties' ); // === 'Message-Properties'
	   */
	    dasherize : function ( str ){
	      return str.replace( space_or_underbar, '-' );
	    },



	  /**
	   * This function adds titleize support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @returns {String} Capitalizes words as you would for a book title.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.titleize( 'message_properties' ); // === 'Message Properties'
	   *     inflection.titleize( 'message properties to keep' ); // === 'Message Properties to Keep'
	   */
	    titleize : function ( str ){
	      str         = str.toLowerCase().replace( underbar, ' ' );
	      var str_arr = str.split( ' ' );
	      var i       = 0;
	      var j       = str_arr.length;
	      var d, k, l;

	      for( ; i < j; i++ ){
	        d = str_arr[ i ].split( '-' );
	        k = 0;
	        l = d.length;

	        for( ; k < l; k++){
	          if( inflector.indexOf( non_titlecased_words, d[ k ].toLowerCase()) < 0 ){
	            d[ k ] = inflector.capitalize( d[ k ]);
	          }
	        }

	        str_arr[ i ] = d.join( '-' );
	      }

	      str = str_arr.join( ' ' );
	      str = str.substring( 0, 1 ).toUpperCase() + str.substring( 1 );

	      return str;
	    },



	  /**
	   * This function adds demodulize support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @returns {String} Removes module names leaving only class names.(Ruby style)
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.demodulize( 'Message::Bus::Properties' ); // === 'Properties'
	   */
	    demodulize : function ( str ){
	      var str_arr = str.split( '::' );

	      return str_arr[ str_arr.length - 1 ];
	    },



	  /**
	   * This function adds tableize support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @returns {String} Return camel cased words into their underscored plural form.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.tableize( 'MessageBusProperty' ); // === 'message_bus_properties'
	   */
	    tableize : function ( str ){
	      str = inflector.underscore( str );
	      str = inflector.pluralize( str );

	      return str;
	    },



	  /**
	   * This function adds classification support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @returns {String} Underscored plural nouns become the camel cased singular form.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.classify( 'message_bus_properties' ); // === 'MessageBusProperty'
	   */
	    classify : function ( str ){
	      str = inflector.camelize( str );
	      str = inflector.singularize( str );

	      return str;
	    },



	  /**
	   * This function adds foreign key support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @param {Boolean} drop_id_ubar Default is to seperate id with an underbar at the end of the class name,
	                                 you can pass true to skip it.(optional)
	   * @returns {String} Underscored plural nouns become the camel cased singular form.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.foreign_key( 'MessageBusProperty' ); // === 'message_bus_property_id'
	   *     inflection.foreign_key( 'MessageBusProperty', true ); // === 'message_bus_propertyid'
	   */
	    foreign_key : function ( str, drop_id_ubar ){
	      str = inflector.demodulize( str );
	      str = inflector.underscore( str ) + (( drop_id_ubar ) ? ( '' ) : ( '_' )) + 'id';

	      return str;
	    },



	  /**
	   * This function adds ordinalize support to every String object.
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @returns {String} Return all found numbers their sequence like '22nd'.
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.ordinalize( 'the 1 pitch' ); // === 'the 1st pitch'
	   */
	    ordinalize : function ( str ){
	      var str_arr = str.split( ' ' );
	      var i       = 0;
	      var j       = str_arr.length;

	      for( ; i < j; i++ ){
	        var k = parseInt( str_arr[ i ], 10 );

	        if( !isNaN( k )){
	          var ltd = str_arr[ i ].substring( str_arr[ i ].length - 2 );
	          var ld  = str_arr[ i ].substring( str_arr[ i ].length - 1 );
	          var suf = 'th';

	          if( ltd != '11' && ltd != '12' && ltd != '13' ){
	            if( ld === '1' ){
	              suf = 'st';
	            }else if( ld === '2' ){
	              suf = 'nd';
	            }else if( ld === '3' ){
	              suf = 'rd';
	            }
	          }

	          str_arr[ i ] += suf;
	        }
	      }

	      return str_arr.join( ' ' );
	    },

	  /**
	   * This function performs multiple inflection methods on a string
	   * @public
	   * @function
	   * @param {String} str The subject string.
	   * @param {Array} arr An array of inflection methods.
	   * @returns {String}
	   * @example
	   *
	   *     var inflection = require( 'inflection' );
	   *
	   *     inflection.transform( 'all job', [ 'pluralize', 'capitalize', 'dasherize' ]); // === 'All-jobs'
	   */
	    transform : function ( str, arr ){
	      var i = 0;
	      var j = arr.length;

	      for( ;i < j; i++ ){
	        var method = arr[ i ];

	        if( this.hasOwnProperty( method )){
	          str = this[ method ]( str );
	        }
	      }

	      return str;
	    }
	  };

	/**
	 * @public
	 */
	  inflector.version = '1.3.8';

	  return inflector;
	}));


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;;(function () {
		'use strict';

		/**
		 * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.
		 *
		 * @codingstandard ftlabs-jsv2
		 * @copyright The Financial Times Limited [All Rights Reserved]
		 * @license MIT License (see LICENSE.txt)
		 */

		/*jslint browser:true, node:true*/
		/*global define, Event, Node*/


		/**
		 * Instantiate fast-clicking listeners on the specified layer.
		 *
		 * @constructor
		 * @param {Element} layer The layer to listen on
		 * @param {Object} [options={}] The options to override the defaults
		 */
		function FastClick(layer, options) {
			var oldOnClick;

			options = options || {};

			/**
			 * Whether a click is currently being tracked.
			 *
			 * @type boolean
			 */
			this.trackingClick = false;


			/**
			 * Timestamp for when click tracking started.
			 *
			 * @type number
			 */
			this.trackingClickStart = 0;


			/**
			 * The element being tracked for a click.
			 *
			 * @type EventTarget
			 */
			this.targetElement = null;


			/**
			 * X-coordinate of touch start event.
			 *
			 * @type number
			 */
			this.touchStartX = 0;


			/**
			 * Y-coordinate of touch start event.
			 *
			 * @type number
			 */
			this.touchStartY = 0;


			/**
			 * ID of the last touch, retrieved from Touch.identifier.
			 *
			 * @type number
			 */
			this.lastTouchIdentifier = 0;


			/**
			 * Touchmove boundary, beyond which a click will be cancelled.
			 *
			 * @type number
			 */
			this.touchBoundary = options.touchBoundary || 10;


			/**
			 * The FastClick layer.
			 *
			 * @type Element
			 */
			this.layer = layer;

			/**
			 * The minimum time between tap(touchstart and touchend) events
			 *
			 * @type number
			 */
			this.tapDelay = options.tapDelay || 200;

			/**
			 * The maximum time for a tap
			 *
			 * @type number
			 */
			this.tapTimeout = options.tapTimeout || 700;

			if (FastClick.notNeeded(layer)) {
				return;
			}

			// Some old versions of Android don't have Function.prototype.bind
			function bind(method, context) {
				return function() { return method.apply(context, arguments); };
			}


			var methods = ['onMouse', 'onClick', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel'];
			var context = this;
			for (var i = 0, l = methods.length; i < l; i++) {
				context[methods[i]] = bind(context[methods[i]], context);
			}

			// Set up event handlers as required
			if (deviceIsAndroid) {
				layer.addEventListener('mouseover', this.onMouse, true);
				layer.addEventListener('mousedown', this.onMouse, true);
				layer.addEventListener('mouseup', this.onMouse, true);
			}

			layer.addEventListener('click', this.onClick, true);
			layer.addEventListener('touchstart', this.onTouchStart, false);
			layer.addEventListener('touchmove', this.onTouchMove, false);
			layer.addEventListener('touchend', this.onTouchEnd, false);
			layer.addEventListener('touchcancel', this.onTouchCancel, false);

			// Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
			// which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick
			// layer when they are cancelled.
			if (!Event.prototype.stopImmediatePropagation) {
				layer.removeEventListener = function(type, callback, capture) {
					var rmv = Node.prototype.removeEventListener;
					if (type === 'click') {
						rmv.call(layer, type, callback.hijacked || callback, capture);
					} else {
						rmv.call(layer, type, callback, capture);
					}
				};

				layer.addEventListener = function(type, callback, capture) {
					var adv = Node.prototype.addEventListener;
					if (type === 'click') {
						adv.call(layer, type, callback.hijacked || (callback.hijacked = function(event) {
							if (!event.propagationStopped) {
								callback(event);
							}
						}), capture);
					} else {
						adv.call(layer, type, callback, capture);
					}
				};
			}

			// If a handler is already declared in the element's onclick attribute, it will be fired before
			// FastClick's onClick handler. Fix this by pulling out the user-defined handler function and
			// adding it as listener.
			if (typeof layer.onclick === 'function') {

				// Android browser on at least 3.2 requires a new reference to the function in layer.onclick
				// - the old one won't work if passed to addEventListener directly.
				oldOnClick = layer.onclick;
				layer.addEventListener('click', function(event) {
					oldOnClick(event);
				}, false);
				layer.onclick = null;
			}
		}

		/**
		* Windows Phone 8.1 fakes user agent string to look like Android and iPhone.
		*
		* @type boolean
		*/
		var deviceIsWindowsPhone = navigator.userAgent.indexOf("Windows Phone") >= 0;

		/**
		 * Android requires exceptions.
		 *
		 * @type boolean
		 */
		var deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0 && !deviceIsWindowsPhone;


		/**
		 * iOS requires exceptions.
		 *
		 * @type boolean
		 */
		var deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;


		/**
		 * iOS 4 requires an exception for select elements.
		 *
		 * @type boolean
		 */
		var deviceIsIOS4 = deviceIsIOS && (/OS 4_\d(_\d)?/).test(navigator.userAgent);


		/**
		 * iOS 6.0-7.* requires the target element to be manually derived
		 *
		 * @type boolean
		 */
		var deviceIsIOSWithBadTarget = deviceIsIOS && (/OS [6-7]_\d/).test(navigator.userAgent);

		/**
		 * BlackBerry requires exceptions.
		 *
		 * @type boolean
		 */
		var deviceIsBlackBerry10 = navigator.userAgent.indexOf('BB10') > 0;

		/**
		 * Determine whether a given element requires a native click.
		 *
		 * @param {EventTarget|Element} target Target DOM element
		 * @returns {boolean} Returns true if the element needs a native click
		 */
		FastClick.prototype.needsClick = function(target) {
			switch (target.nodeName.toLowerCase()) {

			// Don't send a synthetic click to disabled inputs (issue #62)
			case 'button':
			case 'select':
			case 'textarea':
				if (target.disabled) {
					return true;
				}

				break;
			case 'input':

				// File inputs need real clicks on iOS 6 due to a browser bug (issue #68)
				if ((deviceIsIOS && target.type === 'file') || target.disabled) {
					return true;
				}

				break;
			case 'label':
			case 'iframe': // iOS8 homescreen apps can prevent events bubbling into frames
			case 'video':
				return true;
			}

			return (/\bneedsclick\b/).test(target.className);
		};


		/**
		 * Determine whether a given element requires a call to focus to simulate click into element.
		 *
		 * @param {EventTarget|Element} target Target DOM element
		 * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.
		 */
		FastClick.prototype.needsFocus = function(target) {
			switch (target.nodeName.toLowerCase()) {
			case 'textarea':
				return true;
			case 'select':
				return !deviceIsAndroid;
			case 'input':
				switch (target.type) {
				case 'button':
				case 'checkbox':
				case 'file':
				case 'image':
				case 'radio':
				case 'submit':
					return false;
				}

				// No point in attempting to focus disabled inputs
				return !target.disabled && !target.readOnly;
			default:
				return (/\bneedsfocus\b/).test(target.className);
			}
		};


		/**
		 * Send a click event to the specified element.
		 *
		 * @param {EventTarget|Element} targetElement
		 * @param {Event} event
		 */
		FastClick.prototype.sendClick = function(targetElement, event) {
			var clickEvent, touch;

			// On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)
			if (document.activeElement && document.activeElement !== targetElement) {
				document.activeElement.blur();
			}

			touch = event.changedTouches[0];

			// Synthesise a click event, with an extra attribute so it can be tracked
			clickEvent = document.createEvent('MouseEvents');
			clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
			clickEvent.forwardedTouchEvent = true;
			targetElement.dispatchEvent(clickEvent);
		};

		FastClick.prototype.determineEventType = function(targetElement) {

			//Issue #159: Android Chrome Select Box does not open with a synthetic click event
			if (deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {
				return 'mousedown';
			}

			return 'click';
		};


		/**
		 * @param {EventTarget|Element} targetElement
		 */
		FastClick.prototype.focus = function(targetElement) {
			var length;

			// Issue #160: on iOS 7, some input elements (e.g. date datetime month) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.
			if (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month') {
				length = targetElement.value.length;
				targetElement.setSelectionRange(length, length);
			} else {
				targetElement.focus();
			}
		};


		/**
		 * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.
		 *
		 * @param {EventTarget|Element} targetElement
		 */
		FastClick.prototype.updateScrollParent = function(targetElement) {
			var scrollParent, parentElement;

			scrollParent = targetElement.fastClickScrollParent;

			// Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the
			// target element was moved to another parent.
			if (!scrollParent || !scrollParent.contains(targetElement)) {
				parentElement = targetElement;
				do {
					if (parentElement.scrollHeight > parentElement.offsetHeight) {
						scrollParent = parentElement;
						targetElement.fastClickScrollParent = parentElement;
						break;
					}

					parentElement = parentElement.parentElement;
				} while (parentElement);
			}

			// Always update the scroll top tracker if possible.
			if (scrollParent) {
				scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
			}
		};


		/**
		 * @param {EventTarget} targetElement
		 * @returns {Element|EventTarget}
		 */
		FastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {

			// On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.
			if (eventTarget.nodeType === Node.TEXT_NODE) {
				return eventTarget.parentNode;
			}

			return eventTarget;
		};


		/**
		 * On touch start, record the position and scroll offset.
		 *
		 * @param {Event} event
		 * @returns {boolean}
		 */
		FastClick.prototype.onTouchStart = function(event) {
			var targetElement, touch, selection;

			// Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).
			if (event.targetTouches.length > 1) {
				return true;
			}

			targetElement = this.getTargetElementFromEventTarget(event.target);
			touch = event.targetTouches[0];

			if (deviceIsIOS) {

				// Only trusted events will deselect text on iOS (issue #49)
				selection = window.getSelection();
				if (selection.rangeCount && !selection.isCollapsed) {
					return true;
				}

				if (!deviceIsIOS4) {

					// Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):
					// when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched
					// with the same identifier as the touch event that previously triggered the click that triggered the alert.
					// Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an
					// immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.
					// Issue 120: touch.identifier is 0 when Chrome dev tools 'Emulate touch events' is set with an iOS device UA string,
					// which causes all touch events to be ignored. As this block only applies to iOS, and iOS identifiers are always long,
					// random integers, it's safe to to continue if the identifier is 0 here.
					if (touch.identifier && touch.identifier === this.lastTouchIdentifier) {
						event.preventDefault();
						return false;
					}

					this.lastTouchIdentifier = touch.identifier;

					// If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:
					// 1) the user does a fling scroll on the scrollable layer
					// 2) the user stops the fling scroll with another tap
					// then the event.target of the last 'touchend' event will be the element that was under the user's finger
					// when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check
					// is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).
					this.updateScrollParent(targetElement);
				}
			}

			this.trackingClick = true;
			this.trackingClickStart = event.timeStamp;
			this.targetElement = targetElement;

			this.touchStartX = touch.pageX;
			this.touchStartY = touch.pageY;

			// Prevent phantom clicks on fast double-tap (issue #36)
			if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
				event.preventDefault();
			}

			return true;
		};


		/**
		 * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.
		 *
		 * @param {Event} event
		 * @returns {boolean}
		 */
		FastClick.prototype.touchHasMoved = function(event) {
			var touch = event.changedTouches[0], boundary = this.touchBoundary;

			if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
				return true;
			}

			return false;
		};


		/**
		 * Update the last position.
		 *
		 * @param {Event} event
		 * @returns {boolean}
		 */
		FastClick.prototype.onTouchMove = function(event) {
			if (!this.trackingClick) {
				return true;
			}

			// If the touch has moved, cancel the click tracking
			if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
				this.trackingClick = false;
				this.targetElement = null;
			}

			return true;
		};


		/**
		 * Attempt to find the labelled control for the given label element.
		 *
		 * @param {EventTarget|HTMLLabelElement} labelElement
		 * @returns {Element|null}
		 */
		FastClick.prototype.findControl = function(labelElement) {

			// Fast path for newer browsers supporting the HTML5 control attribute
			if (labelElement.control !== undefined) {
				return labelElement.control;
			}

			// All browsers under test that support touch events also support the HTML5 htmlFor attribute
			if (labelElement.htmlFor) {
				return document.getElementById(labelElement.htmlFor);
			}

			// If no for attribute exists, attempt to retrieve the first labellable descendant element
			// the list of which is defined here: http://www.w3.org/TR/html5/forms.html#category-label
			return labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');
		};


		/**
		 * On touch end, determine whether to send a click event at once.
		 *
		 * @param {Event} event
		 * @returns {boolean}
		 */
		FastClick.prototype.onTouchEnd = function(event) {
			var forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;

			if (!this.trackingClick) {
				return true;
			}

			// Prevent phantom clicks on fast double-tap (issue #36)
			if ((event.timeStamp - this.lastClickTime) < this.tapDelay) {
				this.cancelNextClick = true;
				return true;
			}

			if ((event.timeStamp - this.trackingClickStart) > this.tapTimeout) {
				return true;
			}

			// Reset to prevent wrong click cancel on input (issue #156).
			this.cancelNextClick = false;

			this.lastClickTime = event.timeStamp;

			trackingClickStart = this.trackingClickStart;
			this.trackingClick = false;
			this.trackingClickStart = 0;

			// On some iOS devices, the targetElement supplied with the event is invalid if the layer
			// is performing a transition or scroll, and has to be re-detected manually. Note that
			// for this to function correctly, it must be called *after* the event target is checked!
			// See issue #57; also filed as rdar://13048589 .
			if (deviceIsIOSWithBadTarget) {
				touch = event.changedTouches[0];

				// In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null
				targetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;
				targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;
			}

			targetTagName = targetElement.tagName.toLowerCase();
			if (targetTagName === 'label') {
				forElement = this.findControl(targetElement);
				if (forElement) {
					this.focus(targetElement);
					if (deviceIsAndroid) {
						return false;
					}

					targetElement = forElement;
				}
			} else if (this.needsFocus(targetElement)) {

				// Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.
				// Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).
				if ((event.timeStamp - trackingClickStart) > 100 || (deviceIsIOS && window.top !== window && targetTagName === 'input')) {
					this.targetElement = null;
					return false;
				}

				this.focus(targetElement);
				this.sendClick(targetElement, event);

				// Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.
				// Also this breaks opening selects when VoiceOver is active on iOS6, iOS7 (and possibly others)
				if (!deviceIsIOS || targetTagName !== 'select') {
					this.targetElement = null;
					event.preventDefault();
				}

				return false;
			}

			if (deviceIsIOS && !deviceIsIOS4) {

				// Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled
				// and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).
				scrollParent = targetElement.fastClickScrollParent;
				if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
					return true;
				}
			}

			// Prevent the actual click from going though - unless the target node is marked as requiring
			// real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.
			if (!this.needsClick(targetElement)) {
				event.preventDefault();
				this.sendClick(targetElement, event);
			}

			return false;
		};


		/**
		 * On touch cancel, stop tracking the click.
		 *
		 * @returns {void}
		 */
		FastClick.prototype.onTouchCancel = function() {
			this.trackingClick = false;
			this.targetElement = null;
		};


		/**
		 * Determine mouse events which should be permitted.
		 *
		 * @param {Event} event
		 * @returns {boolean}
		 */
		FastClick.prototype.onMouse = function(event) {

			// If a target element was never set (because a touch event was never fired) allow the event
			if (!this.targetElement) {
				return true;
			}

			if (event.forwardedTouchEvent) {
				return true;
			}

			// Programmatically generated events targeting a specific element should be permitted
			if (!event.cancelable) {
				return true;
			}

			// Derive and check the target element to see whether the mouse event needs to be permitted;
			// unless explicitly enabled, prevent non-touch click events from triggering actions,
			// to prevent ghost/doubleclicks.
			if (!this.needsClick(this.targetElement) || this.cancelNextClick) {

				// Prevent any user-added listeners declared on FastClick element from being fired.
				if (event.stopImmediatePropagation) {
					event.stopImmediatePropagation();
				} else {

					// Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
					event.propagationStopped = true;
				}

				// Cancel the event
				event.stopPropagation();
				event.preventDefault();

				return false;
			}

			// If the mouse event is permitted, return true for the action to go through.
			return true;
		};


		/**
		 * On actual clicks, determine whether this is a touch-generated click, a click action occurring
		 * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or
		 * an actual click which should be permitted.
		 *
		 * @param {Event} event
		 * @returns {boolean}
		 */
		FastClick.prototype.onClick = function(event) {
			var permitted;

			// It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.
			if (this.trackingClick) {
				this.targetElement = null;
				this.trackingClick = false;
				return true;
			}

			// Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.
			if (event.target.type === 'submit' && event.detail === 0) {
				return true;
			}

			permitted = this.onMouse(event);

			// Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.
			if (!permitted) {
				this.targetElement = null;
			}

			// If clicks are permitted, return true for the action to go through.
			return permitted;
		};


		/**
		 * Remove all FastClick's event listeners.
		 *
		 * @returns {void}
		 */
		FastClick.prototype.destroy = function() {
			var layer = this.layer;

			if (deviceIsAndroid) {
				layer.removeEventListener('mouseover', this.onMouse, true);
				layer.removeEventListener('mousedown', this.onMouse, true);
				layer.removeEventListener('mouseup', this.onMouse, true);
			}

			layer.removeEventListener('click', this.onClick, true);
			layer.removeEventListener('touchstart', this.onTouchStart, false);
			layer.removeEventListener('touchmove', this.onTouchMove, false);
			layer.removeEventListener('touchend', this.onTouchEnd, false);
			layer.removeEventListener('touchcancel', this.onTouchCancel, false);
		};


		/**
		 * Check whether FastClick is needed.
		 *
		 * @param {Element} layer The layer to listen on
		 */
		FastClick.notNeeded = function(layer) {
			var metaViewport;
			var chromeVersion;
			var blackberryVersion;
			var firefoxVersion;

			// Devices that don't support touch don't need FastClick
			if (typeof window.ontouchstart === 'undefined') {
				return true;
			}

			// Chrome version - zero for other browsers
			chromeVersion = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];

			if (chromeVersion) {

				if (deviceIsAndroid) {
					metaViewport = document.querySelector('meta[name=viewport]');

					if (metaViewport) {
						// Chrome on Android with user-scalable="no" doesn't need FastClick (issue #89)
						if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
							return true;
						}
						// Chrome 32 and above with width=device-width or less don't need FastClick
						if (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {
							return true;
						}
					}

				// Chrome desktop doesn't need FastClick (issue #15)
				} else {
					return true;
				}
			}

			if (deviceIsBlackBerry10) {
				blackberryVersion = navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/);

				// BlackBerry 10.3+ does not require Fastclick library.
				// https://github.com/ftlabs/fastclick/issues/251
				if (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {
					metaViewport = document.querySelector('meta[name=viewport]');

					if (metaViewport) {
						// user-scalable=no eliminates click delay.
						if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
							return true;
						}
						// width=device-width (or less than device-width) eliminates click delay.
						if (document.documentElement.scrollWidth <= window.outerWidth) {
							return true;
						}
					}
				}
			}

			// IE10 with -ms-touch-action: none or manipulation, which disables double-tap-to-zoom (issue #97)
			if (layer.style.msTouchAction === 'none' || layer.style.touchAction === 'manipulation') {
				return true;
			}

			// Firefox version - zero for other browsers
			firefoxVersion = +(/Firefox\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];

			if (firefoxVersion >= 27) {
				// Firefox 27+ does not have tap delay if the content is not zoomable - https://bugzilla.mozilla.org/show_bug.cgi?id=922896

				metaViewport = document.querySelector('meta[name=viewport]');
				if (metaViewport && (metaViewport.content.indexOf('user-scalable=no') !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {
					return true;
				}
			}

			// IE11: prefixed -ms-touch-action is no longer supported and it's recomended to use non-prefixed version
			// http://msdn.microsoft.com/en-us/library/windows/apps/Hh767313.aspx
			if (layer.style.touchAction === 'none' || layer.style.touchAction === 'manipulation') {
				return true;
			}

			return false;
		};


		/**
		 * Factory method for creating a FastClick object
		 *
		 * @param {Element} layer The layer to listen on
		 * @param {Object} [options={}] The options to override the defaults
		 */
		FastClick.attach = function(layer, options) {
			return new FastClick(layer, options);
		};


		if (true) {

			// AMD. Register as an anonymous module.
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return FastClick;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (typeof module !== 'undefined' && module.exports) {
			module.exports = FastClick.attach;
			module.exports.FastClick = FastClick;
		} else {
			window.FastClick = FastClick;
		}
	}());


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0;

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function createStyleElement() {
		var styleElement = document.createElement("style");
		var head = getHeadElement();
		styleElement.type = "text/css";
		head.appendChild(styleElement);
		return styleElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement());
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else {
			styleElement = createStyleElement();
			update = applyToTag.bind(null, styleElement);
			remove = function () {
				styleElement.parentNode.removeChild(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	function replaceText(source, id, replacement) {
		var boundaries = ["/** >>" + id + " **/", "/** " + id + "<< **/"];
		var start = source.lastIndexOf(boundaries[0]);
		var wrappedReplacement = replacement
			? (boundaries[0] + replacement + boundaries[1])
			: "";
		if (source.lastIndexOf(boundaries[0]) >= 0) {
			var end = source.lastIndexOf(boundaries[1]) + boundaries[1].length;
			return source.slice(0, start) + wrappedReplacement + source.slice(end);
		} else {
			return source + wrappedReplacement;
		}
	}

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(styleElement.styleSheet.cssText, index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if(sourceMap && typeof btoa === "function") {
			try {
				css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(JSON.stringify(sourceMap)) + " */";
				css = "@import url(\"data:text/css;base64," + btoa(css) + "\")";
			} catch(e) {}
		}

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["foundation"] = __webpack_require__(36);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Foundation Responsive Library
	 * http://foundation.zurb.com
	 * Copyright 2014, ZURB
	 * Free to use under the MIT license.
	 * http://www.opensource.org/licenses/mit-license.php
	*/

	(function ($, window, document, undefined) {
	  'use strict';

	  var header_helpers = function (class_array) {
	    var i = class_array.length;
	    var head = $('head');

	    while (i--) {
	      if (head.has('.' + class_array[i]).length === 0) {
	        head.append('<meta class="' + class_array[i] + '" />');
	      }
	    }
	  };

	  header_helpers([
	    'foundation-mq-small',
	    'foundation-mq-small-only',
	    'foundation-mq-medium',
	    'foundation-mq-medium-only',
	    'foundation-mq-large',
	    'foundation-mq-large-only',
	    'foundation-mq-xlarge',
	    'foundation-mq-xlarge-only',
	    'foundation-mq-xxlarge',
	    'foundation-data-attribute-namespace']);

	  // Enable FastClick if present

	  $(function () {
	    if (typeof FastClick !== 'undefined') {
	      // Don't attach to body if undefined
	      if (typeof document.body !== 'undefined') {
	        FastClick.attach(document.body);
	      }
	    }
	  });

	  // private Fast Selector wrapper,
	  // returns jQuery object. Only use where
	  // getElementById is not available.
	  var S = function (selector, context) {
	    if (typeof selector === 'string') {
	      if (context) {
	        var cont;
	        if (context.jquery) {
	          cont = context[0];
	          if (!cont) {
	            return context;
	          }
	        } else {
	          cont = context;
	        }
	        return $(cont.querySelectorAll(selector));
	      }

	      return $(document.querySelectorAll(selector));
	    }

	    return $(selector, context);
	  };

	  // Namespace functions.

	  var attr_name = function (init) {
	    var arr = [];
	    if (!init) {
	      arr.push('data');
	    }
	    if (this.namespace.length > 0) {
	      arr.push(this.namespace);
	    }
	    arr.push(this.name);

	    return arr.join('-');
	  };

	  var add_namespace = function (str) {
	    var parts = str.split('-'),
	        i = parts.length,
	        arr = [];

	    while (i--) {
	      if (i !== 0) {
	        arr.push(parts[i]);
	      } else {
	        if (this.namespace.length > 0) {
	          arr.push(this.namespace, parts[i]);
	        } else {
	          arr.push(parts[i]);
	        }
	      }
	    }

	    return arr.reverse().join('-');
	  };

	  // Event binding and data-options updating.

	  var bindings = function (method, options) {
	    var self = this,
	        bind = function(){
	          var $this = S(this),
	              should_bind_events = !$this.data(self.attr_name(true) + '-init');
	          $this.data(self.attr_name(true) + '-init', $.extend({}, self.settings, (options || method), self.data_options($this)));

	          if (should_bind_events) {
	            self.events(this);
	          }
	        };

	    if (S(this.scope).is('[' + this.attr_name() +']')) {
	      bind.call(this.scope);
	    } else {
	      S('[' + this.attr_name() +']', this.scope).each(bind);
	    }
	    // # Patch to fix #5043 to move this *after* the if/else clause in order for Backbone and similar frameworks to have improved control over event binding and data-options updating.
	    if (typeof method === 'string') {
	      return this[method].call(this, options);
	    }

	  };

	  var single_image_loaded = function (image, callback) {
	    function loaded () {
	      callback(image[0]);
	    }

	    function bindLoad () {
	      this.one('load', loaded);

	      if (/MSIE (\d+\.\d+);/.test(navigator.userAgent)) {
	        var src = this.attr( 'src' ),
	            param = src.match( /\?/ ) ? '&' : '?';

	        param += 'random=' + (new Date()).getTime();
	        this.attr('src', src + param);
	      }
	    }

	    if (!image.attr('src')) {
	      loaded();
	      return;
	    }

	    if (image[0].complete || image[0].readyState === 4) {
	      loaded();
	    } else {
	      bindLoad.call(image);
	    }
	  };

	  /*
	    https://github.com/paulirish/matchMedia.js
	  */

	  window.matchMedia = window.matchMedia || (function ( doc ) {

	    'use strict';

	    var bool,
	        docElem = doc.documentElement,
	        refNode = docElem.firstElementChild || docElem.firstChild,
	        // fakeBody required for <FF4 when executed in <head>
	        fakeBody = doc.createElement( 'body' ),
	        div = doc.createElement( 'div' );

	    div.id = 'mq-test-1';
	    div.style.cssText = 'position:absolute;top:-100em';
	    fakeBody.style.background = 'none';
	    fakeBody.appendChild(div);

	    return function (q) {

	      div.innerHTML = '&shy;<style media="' + q + '"> #mq-test-1 { width: 42px; }</style>';

	      docElem.insertBefore( fakeBody, refNode );
	      bool = div.offsetWidth === 42;
	      docElem.removeChild( fakeBody );

	      return {
	        matches : bool,
	        media : q
	      };

	    };

	  }( document ));

	  /*
	   * jquery.requestAnimationFrame
	   * https://github.com/gnarf37/jquery-requestAnimationFrame
	   * Requires jQuery 1.8+
	   *
	   * Copyright (c) 2012 Corey Frang
	   * Licensed under the MIT license.
	   */

	  (function(jQuery) {


	  // requestAnimationFrame polyfill adapted from Erik Möller
	  // fixes from Paul Irish and Tino Zijdel
	  // http://paulirish.com/2011/requestanimationframe-for-smart-animating/
	  // http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating

	  var animating,
	      lastTime = 0,
	      vendors = ['webkit', 'moz'],
	      requestAnimationFrame = window.requestAnimationFrame,
	      cancelAnimationFrame = window.cancelAnimationFrame,
	      jqueryFxAvailable = 'undefined' !== typeof jQuery.fx;

	  for (; lastTime < vendors.length && !requestAnimationFrame; lastTime++) {
	    requestAnimationFrame = window[ vendors[lastTime] + 'RequestAnimationFrame' ];
	    cancelAnimationFrame = cancelAnimationFrame ||
	      window[ vendors[lastTime] + 'CancelAnimationFrame' ] ||
	      window[ vendors[lastTime] + 'CancelRequestAnimationFrame' ];
	  }

	  function raf() {
	    if (animating) {
	      requestAnimationFrame(raf);

	      if (jqueryFxAvailable) {
	        jQuery.fx.tick();
	      }
	    }
	  }

	  if (requestAnimationFrame) {
	    // use rAF
	    window.requestAnimationFrame = requestAnimationFrame;
	    window.cancelAnimationFrame = cancelAnimationFrame;

	    if (jqueryFxAvailable) {
	      jQuery.fx.timer = function (timer) {
	        if (timer() && jQuery.timers.push(timer) && !animating) {
	          animating = true;
	          raf();
	        }
	      };

	      jQuery.fx.stop = function () {
	        animating = false;
	      };
	    }
	  } else {
	    // polyfill
	    window.requestAnimationFrame = function (callback) {
	      var currTime = new Date().getTime(),
	        timeToCall = Math.max(0, 16 - (currTime - lastTime)),
	        id = window.setTimeout(function () {
	          callback(currTime + timeToCall);
	        }, timeToCall);
	      lastTime = currTime + timeToCall;
	      return id;
	    };

	    window.cancelAnimationFrame = function (id) {
	      clearTimeout(id);
	    };

	  }

	  }( $ ));

	  function removeQuotes (string) {
	    if (typeof string === 'string' || string instanceof String) {
	      string = string.replace(/^['\\/"]+|(;\s?})+|['\\/"]+$/g, '');
	    }

	    return string;
	  }

	  window.Foundation = {
	    name : 'Foundation',

	    version : '{{VERSION}}',

	    media_queries : {
	      'small'       : S('.foundation-mq-small').css('font-family').replace(/^[\/\\'"]+|(;\s?})+|[\/\\'"]+$/g, ''),
	      'small-only'  : S('.foundation-mq-small-only').css('font-family').replace(/^[\/\\'"]+|(;\s?})+|[\/\\'"]+$/g, ''),
	      'medium'      : S('.foundation-mq-medium').css('font-family').replace(/^[\/\\'"]+|(;\s?})+|[\/\\'"]+$/g, ''),
	      'medium-only' : S('.foundation-mq-medium-only').css('font-family').replace(/^[\/\\'"]+|(;\s?})+|[\/\\'"]+$/g, ''),
	      'large'       : S('.foundation-mq-large').css('font-family').replace(/^[\/\\'"]+|(;\s?})+|[\/\\'"]+$/g, ''),
	      'large-only'  : S('.foundation-mq-large-only').css('font-family').replace(/^[\/\\'"]+|(;\s?})+|[\/\\'"]+$/g, ''),
	      'xlarge'      : S('.foundation-mq-xlarge').css('font-family').replace(/^[\/\\'"]+|(;\s?})+|[\/\\'"]+$/g, ''),
	      'xlarge-only' : S('.foundation-mq-xlarge-only').css('font-family').replace(/^[\/\\'"]+|(;\s?})+|[\/\\'"]+$/g, ''),
	      'xxlarge'     : S('.foundation-mq-xxlarge').css('font-family').replace(/^[\/\\'"]+|(;\s?})+|[\/\\'"]+$/g, '')
	    },

	    stylesheet : $('<style></style>').appendTo('head')[0].sheet,

	    global : {
	      namespace : undefined
	    },

	    init : function (scope, libraries, method, options, response) {
	      var args = [scope, method, options, response],
	          responses = [];

	      // check RTL
	      this.rtl = /rtl/i.test(S('html').attr('dir'));

	      // set foundation global scope
	      this.scope = scope || this.scope;

	      this.set_namespace();

	      if (libraries && typeof libraries === 'string' && !/reflow/i.test(libraries)) {
	        if (this.libs.hasOwnProperty(libraries)) {
	          responses.push(this.init_lib(libraries, args));
	        }
	      } else {
	        for (var lib in this.libs) {
	          responses.push(this.init_lib(lib, libraries));
	        }
	      }

	      S(window).load(function () {
	        S(window)
	          .trigger('resize.fndtn.clearing')
	          .trigger('resize.fndtn.dropdown')
	          .trigger('resize.fndtn.equalizer')
	          .trigger('resize.fndtn.interchange')
	          .trigger('resize.fndtn.joyride')
	          .trigger('resize.fndtn.magellan')
	          .trigger('resize.fndtn.topbar')
	          .trigger('resize.fndtn.slider');
	      });

	      return scope;
	    },

	    init_lib : function (lib, args) {
	      if (this.libs.hasOwnProperty(lib)) {
	        this.patch(this.libs[lib]);

	        if (args && args.hasOwnProperty(lib)) {
	            if (typeof this.libs[lib].settings !== 'undefined') {
	              $.extend(true, this.libs[lib].settings, args[lib]);
	            } else if (typeof this.libs[lib].defaults !== 'undefined') {
	              $.extend(true, this.libs[lib].defaults, args[lib]);
	            }
	          return this.libs[lib].init.apply(this.libs[lib], [this.scope, args[lib]]);
	        }

	        args = args instanceof Array ? args : new Array(args);
	        return this.libs[lib].init.apply(this.libs[lib], args);
	      }

	      return function () {};
	    },

	    patch : function (lib) {
	      lib.scope = this.scope;
	      lib.namespace = this.global.namespace;
	      lib.rtl = this.rtl;
	      lib['data_options'] = this.utils.data_options;
	      lib['attr_name'] = attr_name;
	      lib['add_namespace'] = add_namespace;
	      lib['bindings'] = bindings;
	      lib['S'] = this.utils.S;
	    },

	    inherit : function (scope, methods) {
	      var methods_arr = methods.split(' '),
	          i = methods_arr.length;

	      while (i--) {
	        if (this.utils.hasOwnProperty(methods_arr[i])) {
	          scope[methods_arr[i]] = this.utils[methods_arr[i]];
	        }
	      }
	    },

	    set_namespace : function () {

	      // Description:
	      //    Don't bother reading the namespace out of the meta tag
	      //    if the namespace has been set globally in javascript
	      //
	      // Example:
	      //    Foundation.global.namespace = 'my-namespace';
	      // or make it an empty string:
	      //    Foundation.global.namespace = '';
	      //
	      //

	      // If the namespace has not been set (is undefined), try to read it out of the meta element.
	      // Otherwise use the globally defined namespace, even if it's empty ('')
	      var namespace = ( this.global.namespace === undefined ) ? $('.foundation-data-attribute-namespace').css('font-family') : this.global.namespace;

	      // Finally, if the namsepace is either undefined or false, set it to an empty string.
	      // Otherwise use the namespace value.
	      this.global.namespace = ( namespace === undefined || /false/i.test(namespace) ) ? '' : namespace;
	    },

	    libs : {},

	    // methods that can be inherited in libraries
	    utils : {

	      // Description:
	      //    Fast Selector wrapper returns jQuery object. Only use where getElementById
	      //    is not available.
	      //
	      // Arguments:
	      //    Selector (String): CSS selector describing the element(s) to be
	      //    returned as a jQuery object.
	      //
	      //    Scope (String): CSS selector describing the area to be searched. Default
	      //    is document.
	      //
	      // Returns:
	      //    Element (jQuery Object): jQuery object containing elements matching the
	      //    selector within the scope.
	      S : S,

	      // Description:
	      //    Executes a function a max of once every n milliseconds
	      //
	      // Arguments:
	      //    Func (Function): Function to be throttled.
	      //
	      //    Delay (Integer): Function execution threshold in milliseconds.
	      //
	      // Returns:
	      //    Lazy_function (Function): Function with throttling applied.
	      throttle : function (func, delay) {
	        var timer = null;

	        return function () {
	          var context = this, args = arguments;

	          if (timer == null) {
	            timer = setTimeout(function () {
	              func.apply(context, args);
	              timer = null;
	            }, delay);
	          }
	        };
	      },

	      // Description:
	      //    Executes a function when it stops being invoked for n seconds
	      //    Modified version of _.debounce() http://underscorejs.org
	      //
	      // Arguments:
	      //    Func (Function): Function to be debounced.
	      //
	      //    Delay (Integer): Function execution threshold in milliseconds.
	      //
	      //    Immediate (Bool): Whether the function should be called at the beginning
	      //    of the delay instead of the end. Default is false.
	      //
	      // Returns:
	      //    Lazy_function (Function): Function with debouncing applied.
	      debounce : function (func, delay, immediate) {
	        var timeout, result;
	        return function () {
	          var context = this, args = arguments;
	          var later = function () {
	            timeout = null;
	            if (!immediate) {
	              result = func.apply(context, args);
	            }
	          };
	          var callNow = immediate && !timeout;
	          clearTimeout(timeout);
	          timeout = setTimeout(later, delay);
	          if (callNow) {
	            result = func.apply(context, args);
	          }
	          return result;
	        };
	      },

	      // Description:
	      //    Parses data-options attribute
	      //
	      // Arguments:
	      //    El (jQuery Object): Element to be parsed.
	      //
	      // Returns:
	      //    Options (Javascript Object): Contents of the element's data-options
	      //    attribute.
	      data_options : function (el, data_attr_name) {
	        data_attr_name = data_attr_name || 'options';
	        var opts = {}, ii, p, opts_arr,
	            data_options = function (el) {
	              var namespace = Foundation.global.namespace;

	              if (namespace.length > 0) {
	                return el.data(namespace + '-' + data_attr_name);
	              }

	              return el.data(data_attr_name);
	            };

	        var cached_options = data_options(el);

	        if (typeof cached_options === 'object') {
	          return cached_options;
	        }

	        opts_arr = (cached_options || ':').split(';');
	        ii = opts_arr.length;

	        function isNumber (o) {
	          return !isNaN (o - 0) && o !== null && o !== '' && o !== false && o !== true;
	        }

	        function trim (str) {
	          if (typeof str === 'string') {
	            return $.trim(str);
	          }
	          return str;
	        }

	        while (ii--) {
	          p = opts_arr[ii].split(':');
	          p = [p[0], p.slice(1).join(':')];

	          if (/true/i.test(p[1])) {
	            p[1] = true;
	          }
	          if (/false/i.test(p[1])) {
	            p[1] = false;
	          }
	          if (isNumber(p[1])) {
	            if (p[1].indexOf('.') === -1) {
	              p[1] = parseInt(p[1], 10);
	            } else {
	              p[1] = parseFloat(p[1]);
	            }
	          }

	          if (p.length === 2 && p[0].length > 0) {
	            opts[trim(p[0])] = trim(p[1]);
	          }
	        }

	        return opts;
	      },

	      // Description:
	      //    Adds JS-recognizable media queries
	      //
	      // Arguments:
	      //    Media (String): Key string for the media query to be stored as in
	      //    Foundation.media_queries
	      //
	      //    Class (String): Class name for the generated <meta> tag
	      register_media : function (media, media_class) {
	        if (Foundation.media_queries[media] === undefined) {
	          $('head').append('<meta class="' + media_class + '"/>');
	          Foundation.media_queries[media] = removeQuotes($('.' + media_class).css('font-family'));
	        }
	      },

	      // Description:
	      //    Add custom CSS within a JS-defined media query
	      //
	      // Arguments:
	      //    Rule (String): CSS rule to be appended to the document.
	      //
	      //    Media (String): Optional media query string for the CSS rule to be
	      //    nested under.
	      add_custom_rule : function (rule, media) {
	        if (media === undefined && Foundation.stylesheet) {
	          Foundation.stylesheet.insertRule(rule, Foundation.stylesheet.cssRules.length);
	        } else {
	          var query = Foundation.media_queries[media];

	          if (query !== undefined) {
	            Foundation.stylesheet.insertRule('@media ' +
	              Foundation.media_queries[media] + '{ ' + rule + ' }', Foundation.stylesheet.cssRules.length);
	          }
	        }
	      },

	      // Description:
	      //    Performs a callback function when an image is fully loaded
	      //
	      // Arguments:
	      //    Image (jQuery Object): Image(s) to check if loaded.
	      //
	      //    Callback (Function): Function to execute when image is fully loaded.
	      image_loaded : function (images, callback) {
	        var self = this,
	            unloaded = images.length;

	        function pictures_has_height(images) {
	          var pictures_number = images.length;

	          for (var i = pictures_number - 1; i >= 0; i--) {
	            if(images.attr('height') === undefined) {
	              return false;
	            };
	          };

	          return true;
	        }

	        if (unloaded === 0 || pictures_has_height(images)) {
	          callback(images);
	        }

	        images.each(function () {
	          single_image_loaded(self.S(this), function () {
	            unloaded -= 1;
	            if (unloaded === 0) {
	              callback(images);
	            }
	          });
	        });
	      },

	      // Description:
	      //    Returns a random, alphanumeric string
	      //
	      // Arguments:
	      //    Length (Integer): Length of string to be generated. Defaults to random
	      //    integer.
	      //
	      // Returns:
	      //    Rand (String): Pseudo-random, alphanumeric string.
	      random_str : function () {
	        if (!this.fidx) {
	          this.fidx = 0;
	        }
	        this.prefix = this.prefix || [(this.name || 'F'), (+new Date).toString(36)].join('-');

	        return this.prefix + (this.fidx++).toString(36);
	      },

	      // Description:
	      //    Helper for window.matchMedia
	      //
	      // Arguments:
	      //    mq (String): Media query
	      //
	      // Returns:
	      //    (Boolean): Whether the media query passes or not
	      match : function (mq) {
	        return window.matchMedia(mq).matches;
	      },

	      // Description:
	      //    Helpers for checking Foundation default media queries with JS
	      //
	      // Returns:
	      //    (Boolean): Whether the media query passes or not

	      is_small_up : function () {
	        return this.match(Foundation.media_queries.small);
	      },

	      is_medium_up : function () {
	        return this.match(Foundation.media_queries.medium);
	      },

	      is_large_up : function () {
	        return this.match(Foundation.media_queries.large);
	      },

	      is_xlarge_up : function () {
	        return this.match(Foundation.media_queries.xlarge);
	      },

	      is_xxlarge_up : function () {
	        return this.match(Foundation.media_queries.xxlarge);
	      },

	      is_small_only : function () {
	        return !this.is_medium_up() && !this.is_large_up() && !this.is_xlarge_up() && !this.is_xxlarge_up();
	      },

	      is_medium_only : function () {
	        return this.is_medium_up() && !this.is_large_up() && !this.is_xlarge_up() && !this.is_xxlarge_up();
	      },

	      is_large_only : function () {
	        return this.is_medium_up() && this.is_large_up() && !this.is_xlarge_up() && !this.is_xxlarge_up();
	      },

	      is_xlarge_only : function () {
	        return this.is_medium_up() && this.is_large_up() && this.is_xlarge_up() && !this.is_xxlarge_up();
	      },

	      is_xxlarge_only : function () {
	        return this.is_medium_up() && this.is_large_up() && this.is_xlarge_up() && this.is_xxlarge_up();
	      }
	    }
	  };

	  $.fn.foundation = function () {
	    var args = Array.prototype.slice.call(arguments, 0);

	    return this.each(function () {
	      Foundation.init.apply(Foundation, [this].concat(args));
	      return this;
	    });
	  };

	}(jQuery, window, window.document));


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["foundationOffcanvas"] = __webpack_require__(38);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	;(function ($, window, document, undefined) {
	  'use strict';

	  Foundation.libs.offcanvas = {
	    name : 'offcanvas',

	    version : '{{VERSION}}',

	    settings : {
	      open_method : 'move',
	      close_on_click : false
	    },

	    init : function (scope, method, options) {
	      this.bindings(method, options);
	    },

	    events : function () {
	      var self = this,
	          S = self.S,
	          move_class = '',
	          right_postfix = '',
	          left_postfix = '';

	      if (this.settings.open_method === 'move') {
	        move_class = 'move-';
	        right_postfix = 'right';
	        left_postfix = 'left';
	      } else if (this.settings.open_method === 'overlap_single') {
	        move_class = 'offcanvas-overlap-';
	        right_postfix = 'right';
	        left_postfix = 'left';
	      } else if (this.settings.open_method === 'overlap') {
	        move_class = 'offcanvas-overlap';
	      }

	      S(this.scope).off('.offcanvas')
	        .on('click.fndtn.offcanvas', '.left-off-canvas-toggle', function (e) {
	          self.click_toggle_class(e, move_class + right_postfix);
	          if (self.settings.open_method !== 'overlap') {
	            S('.left-submenu').removeClass(move_class + right_postfix);
	          }
	          $('.left-off-canvas-toggle').attr('aria-expanded', 'true');
	        })
	        .on('click.fndtn.offcanvas', '.left-off-canvas-menu a', function (e) {
	          var settings = self.get_settings(e);
	          var parent = S(this).parent();

	          if (settings.close_on_click && !parent.hasClass('has-submenu') && !parent.hasClass('back')) {
	            self.hide.call(self, move_class + right_postfix, self.get_wrapper(e));
	            parent.parent().removeClass(move_class + right_postfix);
	          } else if (S(this).parent().hasClass('has-submenu')) {
	            e.preventDefault();
	            S(this).siblings('.left-submenu').toggleClass(move_class + right_postfix);
	          } else if (parent.hasClass('back')) {
	            e.preventDefault();
	            parent.parent().removeClass(move_class + right_postfix);
	          }
	          $('.left-off-canvas-toggle').attr('aria-expanded', 'true');
	        })
	        .on('click.fndtn.offcanvas', '.right-off-canvas-toggle', function (e) {
	          self.click_toggle_class(e, move_class + left_postfix);
	          if (self.settings.open_method !== 'overlap') {
	            S('.right-submenu').removeClass(move_class + left_postfix);
	          }
	          $('.right-off-canvas-toggle').attr('aria-expanded', 'true');
	        })
	        .on('click.fndtn.offcanvas', '.right-off-canvas-menu a', function (e) {
	          var settings = self.get_settings(e);
	          var parent = S(this).parent();

	          if (settings.close_on_click && !parent.hasClass('has-submenu') && !parent.hasClass('back')) {
	            self.hide.call(self, move_class + left_postfix, self.get_wrapper(e));
	            parent.parent().removeClass(move_class + left_postfix);
	          } else if (S(this).parent().hasClass('has-submenu')) {
	            e.preventDefault();
	            S(this).siblings('.right-submenu').toggleClass(move_class + left_postfix);
	          } else if (parent.hasClass('back')) {
	            e.preventDefault();
	            parent.parent().removeClass(move_class + left_postfix);
	          }
	          $('.right-off-canvas-toggle').attr('aria-expanded', 'true');
	        })
	        .on('click.fndtn.offcanvas', '.exit-off-canvas', function (e) {
	          self.click_remove_class(e, move_class + left_postfix);
	          S('.right-submenu').removeClass(move_class + left_postfix);
	          if (right_postfix) {
	            self.click_remove_class(e, move_class + right_postfix);
	            S('.left-submenu').removeClass(move_class + left_postfix);
	          }
	          $('.right-off-canvas-toggle').attr('aria-expanded', 'true');
	        })
	        .on('click.fndtn.offcanvas', '.exit-off-canvas', function (e) {
	          self.click_remove_class(e, move_class + left_postfix);
	          $('.left-off-canvas-toggle').attr('aria-expanded', 'false');
	          if (right_postfix) {
	            self.click_remove_class(e, move_class + right_postfix);
	            $('.right-off-canvas-toggle').attr('aria-expanded', 'false');
	          }
	        });
	    },

	    toggle : function (class_name, $off_canvas) {
	      $off_canvas = $off_canvas || this.get_wrapper();
	      if ($off_canvas.is('.' + class_name)) {
	        this.hide(class_name, $off_canvas);
	      } else {
	        this.show(class_name, $off_canvas);
	      }
	    },

	    show : function (class_name, $off_canvas) {
	      $off_canvas = $off_canvas || this.get_wrapper();
	      $off_canvas.trigger('open.fndtn.offcanvas');
	      $off_canvas.addClass(class_name);
	    },

	    hide : function (class_name, $off_canvas) {
	      $off_canvas = $off_canvas || this.get_wrapper();
	      $off_canvas.trigger('close.fndtn.offcanvas');
	      $off_canvas.removeClass(class_name);
	    },

	    click_toggle_class : function (e, class_name) {
	      e.preventDefault();
	      var $off_canvas = this.get_wrapper(e);
	      this.toggle(class_name, $off_canvas);
	    },

	    click_remove_class : function (e, class_name) {
	      e.preventDefault();
	      var $off_canvas = this.get_wrapper(e);
	      this.hide(class_name, $off_canvas);
	    },

	    get_settings : function (e) {
	      var offcanvas  = this.S(e.target).closest('[' + this.attr_name() + ']');
	      return offcanvas.data(this.attr_name(true) + '-init') || this.settings;
	    },

	    get_wrapper : function (e) {
	      var $off_canvas = this.S(e ? e.target : this.scope).closest('.off-canvas-wrap');

	      if ($off_canvas.length === 0) {
	        $off_canvas = this.S('.off-canvas-wrap');
	      }
	      return $off_canvas;
	    },

	    reflow : function () {}
	  };
	}(jQuery, window, window.document));


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["jQuery"] = __webpack_require__(40);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global["$"] = __webpack_require__(41);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v2.1.3
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2014-12-18T15:11Z
	 */

	(function( global, factory ) {

		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//

	var arr = [];

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var support = {};



	var
		// Use the correct document accordingly with window argument (sandbox)
		document = window.document,

		version = "2.1.3",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {
			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android<4.1
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {
		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// Start with an empty selector
		selector: "",

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?

				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :

				// Return all the elements in a clean array
				slice.call( this );
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		// (You can seed the arguments with an array of args, but this is
		// only used internally.)
		each: function( callback, args ) {
			return jQuery.each( this, callback, args );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map(this, function( elem, i ) {
				return callback.call( elem, i, elem );
			}));
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor(null);
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[0] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {
			// Only deal with non-null/undefined values
			if ( (options = arguments[ i ]) != null ) {
				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray(src) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend({
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		isFunction: function( obj ) {
			return jQuery.type(obj) === "function";
		},

		isArray: Array.isArray,

		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function( obj ) {
			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;
		},

		isPlainObject: function( obj ) {
			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}

			if ( obj.constructor &&
					!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
				return false;
			}

			// If the function hasn't returned already, we're confident that
			// |obj| is a plain object, created by {} or constructed with new Object
			return true;
		},

		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},

		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}
			// Support: Android<4.0, iOS<6 (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call(obj) ] || "object" :
				typeof obj;
		},

		// Evaluates a script in a global context
		globalEval: function( code ) {
			var script,
				indirect = eval;

			code = jQuery.trim( code );

			if ( code ) {
				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if ( code.indexOf("use strict") === 1 ) {
					script = document.createElement("script");
					script.text = code;
					document.head.appendChild( script ).parentNode.removeChild( script );
				} else {
				// Otherwise, avoid the DOM node creation, insertion
				// and removal by using an indirect global eval
					indirect( code );
				}
			}
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE9-11+
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},

		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		// args is for internal usage only
		each: function( obj, callback, args ) {
			var value,
				i = 0,
				length = obj.length,
				isArray = isArraylike( obj );

			if ( args ) {
				if ( isArray ) {
					for ( ; i < length; i++ ) {
						value = callback.apply( obj[ i ], args );

						if ( value === false ) {
							break;
						}
					}
				} else {
					for ( i in obj ) {
						value = callback.apply( obj[ i ], args );

						if ( value === false ) {
							break;
						}
					}
				}

			// A special, fast, case for the most common use of each
			} else {
				if ( isArray ) {
					for ( ; i < length; i++ ) {
						value = callback.call( obj[ i ], i, obj[ i ] );

						if ( value === false ) {
							break;
						}
					}
				} else {
					for ( i in obj ) {
						value = callback.call( obj[ i ], i, obj[ i ] );

						if ( value === false ) {
							break;
						}
					}
				}
			}

			return obj;
		},

		// Support: Android<4.1
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArraylike( Object(arr) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var value,
				i = 0,
				length = elems.length,
				isArray = isArraylike( elems ),
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;

			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}

			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	});

	// Populate the class2type map
	jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	});

	function isArraylike( obj ) {
		var length = obj.length,
			type = jQuery.type( obj );

		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}

		if ( obj.nodeType === 1 && length ) {
			return true;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.0-pre
	 * http://sizzlejs.com/
	 *
	 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2014-12-16
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
		// http://www.w3.org/TR/css3-syntax/#characters
		characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

		// Loosely modeled on CSS identifier characters
		// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
		// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = characterEncoding.replace( "w", "w#" ),

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + characterEncoding + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + characterEncoding + ")" ),
			"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
			"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,
		rescape = /'|\\/g,

		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var match, elem, m, nodeType,
			// QSA vars
			i, groups, old, nid, newContext, newSelector;

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}

		context = context || document;
		results = results || [];
		nodeType = context.nodeType;

		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		if ( !seed && documentIsHTML ) {

			// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
				// Speed-up: Sizzle("#ID")
				if ( (m = match[1]) ) {
					if ( nodeType === 9 ) {
						elem = context.getElementById( m );
						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document (jQuery #6963)
						if ( elem && elem.parentNode ) {
							// Handle the case where IE, Opera, and Webkit return items
							// by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}
					} else {
						// Context is not a document
						if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
							contains( context, elem ) && elem.id === m ) {
							results.push( elem );
							return results;
						}
					}

				// Speed-up: Sizzle("TAG")
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Speed-up: Sizzle(".CLASS")
				} else if ( (m = match[3]) && support.getElementsByClassName ) {
					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// QSA path
			if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
				nid = old = expando;
				newContext = context;
				newSelector = nodeType !== 1 && selector;

				// qSA works strangely on Element-rooted queries
				// We can work around this by specifying an extra ID on the root
				// and working up from there (Thanks to Andrew Dupont for the technique)
				// IE 8 doesn't work on object elements
				if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
					groups = tokenize( selector );

					if ( (old = context.getAttribute("id")) ) {
						nid = old.replace( rescape, "\\$&" );
					} else {
						context.setAttribute( "id", nid );
					}
					nid = "[id='" + nid + "'] ";

					i = groups.length;
					while ( i-- ) {
						groups[i] = nid + toSelector( groups[i] );
					}
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
					newSelector = groups.join(",");
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch(qsaError) {
					} finally {
						if ( !old ) {
							context.removeAttribute("id");
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");

		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = attrs.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// If no document and documentElement is available, return
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Set our document
		document = doc;
		docElem = doc.documentElement;
		parent = doc.defaultView;

		// Support: IE>8
		// If iframe document is assigned to "document" variable and if iframe has been reloaded,
		// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
		// IE6-8 do not support the defaultView property so parent will be undefined
		if ( parent && parent !== parent.top ) {
			// IE11 does not have attachEvent, so all must suffer
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Support tests
		---------------------------------------------------------------------- */
		documentIsHTML = !isXML( doc );

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( doc.createComment("") );
			return !div.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( doc.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
		});

		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					return m && m.parentNode ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];

			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\f]' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = doc.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully does not implement inclusive descendent
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === doc ? -1 :
					b === doc ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return doc;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, outerCache, node, diff, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {
								// Seek `elem` from a previously-cached index
								outerCache = parent[ expando ] || (parent[ expando ] = {});
								cache = outerCache[ type ] || [];
								nodeIndex = cache[0] === dirruns && cache[1];
								diff = cache[0] === dirruns && cache[2];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										outerCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							// Use previously-cached element index if available
							} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
								diff = cache[1];

							// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
							} else {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
										// Cache the index of each encountered element
										if ( useCache ) {
											(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},

			"disabled": function( elem ) {
				return elem.disabled === true;
			},

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});
							if ( (oldCache = outerCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								outerCache[ dir ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context !== document && context;
				}

				// Add elements passing elementMatchers directly to results
				// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context, xml ) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// Apply set filters to unmatched elements
				matchedCount += i;
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is no seed and only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[":"] = jQuery.expr.pseudos;
	jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;



	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			});

		}

		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			});

		}

		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}

			qualifier = jQuery.filter( qualifier, elements );
		}

		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
		});
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			}));
	};

	jQuery.fn.extend({
		find: function( selector ) {
			var i,
				len = this.length,
				ret = [],
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter(function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				}) );
			}

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow(this, selector || [], false) );
		},
		not: function( selector ) {
			return this.pushStack( winnow(this, selector || [], true) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	});


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

		init = jQuery.fn.init = function( selector, context ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && (match[1] || !context) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[1] ) {
						context = context instanceof jQuery ? context[0] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[1],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {
								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[2] );

						// Support: Blackberry 4.6
						// gEBID returns nodes no longer in the document (#6963)
						if ( elem && elem.parentNode ) {
							// Inject the element directly into the jQuery object
							this.length = 1;
							this[0] = elem;
						}

						this.context = document;
						this.selector = selector;
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || rootjQuery ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[0] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return typeof rootjQuery.ready !== "undefined" ?
					rootjQuery.ready( selector ) :
					// Execute immediately if ready is not present
					selector( jQuery );
			}

			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,
		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.extend({
		dir: function( elem, dir, until ) {
			var matched = [],
				truncate = until !== undefined;

			while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
				if ( elem.nodeType === 1 ) {
					if ( truncate && jQuery( elem ).is( until ) ) {
						break;
					}
					matched.push( elem );
				}
			}
			return matched;
		},

		sibling: function( n, elem ) {
			var matched = [];

			for ( ; n; n = n.nextSibling ) {
				if ( n.nodeType === 1 && n !== elem ) {
					matched.push( n );
				}
			}

			return matched;
		}
	});

	jQuery.fn.extend({
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter(function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[i] ) ) {
						return true;
					}
				}
			});
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;

			for ( ; i < l; i++ ) {
				for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
					// Always skip document fragments
					if ( cur.nodeType < 11 && (pos ?
						pos.index(cur) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector(cur, selectors)) ) {

						matched.push( cur );
						break;
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
		},

		// Determine the position of an element within the set
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.unique(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter(selector)
			);
		}
	});

	function sibling( cur, dir ) {
		while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each({
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return jQuery.dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return jQuery.dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return jQuery.dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return jQuery.dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return jQuery.dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return jQuery.dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return jQuery.sibling( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {
				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.unique( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	});
	var rnotwhite = (/\S+/g);



	// String to Object options format cache
	var optionsCache = {};

	// Convert String-formatted options into Object-formatted ones and store in cache
	function createOptions( options ) {
		var object = optionsCache[ options ] = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		});
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			( optionsCache[ options ] || createOptions( options ) ) :
			jQuery.extend( {}, options );

		var // Last fire value (for non-forgettable lists)
			memory,
			// Flag to know if list was already fired
			fired,
			// Flag to know if list is currently firing
			firing,
			// First callback to fire (used internally by add and fireWith)
			firingStart,
			// End of the loop when firing
			firingLength,
			// Index of currently firing callback (modified by remove if needed)
			firingIndex,
			// Actual callback list
			list = [],
			// Stack of fire calls for repeatable lists
			stack = !options.once && [],
			// Fire callbacks
			fire = function( data ) {
				memory = options.memory && data;
				fired = true;
				firingIndex = firingStart || 0;
				firingStart = 0;
				firingLength = list.length;
				firing = true;
				for ( ; list && firingIndex < firingLength; firingIndex++ ) {
					if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
						memory = false; // To prevent further calls using add
						break;
					}
				}
				firing = false;
				if ( list ) {
					if ( stack ) {
						if ( stack.length ) {
							fire( stack.shift() );
						}
					} else if ( memory ) {
						list = [];
					} else {
						self.disable();
					}
				}
			},
			// Actual Callbacks object
			self = {
				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {
						// First, we save the current length
						var start = list.length;
						(function add( args ) {
							jQuery.each( args, function( _, arg ) {
								var type = jQuery.type( arg );
								if ( type === "function" ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && type !== "string" ) {
									// Inspect recursively
									add( arg );
								}
							});
						})( arguments );
						// Do we need to add the callbacks to the
						// current firing batch?
						if ( firing ) {
							firingLength = list.length;
						// With memory, if we're not firing then
						// we should call right away
						} else if ( memory ) {
							firingStart = start;
							fire( memory );
						}
					}
					return this;
				},
				// Remove a callback from the list
				remove: function() {
					if ( list ) {
						jQuery.each( arguments, function( _, arg ) {
							var index;
							while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
								list.splice( index, 1 );
								// Handle firing indexes
								if ( firing ) {
									if ( index <= firingLength ) {
										firingLength--;
									}
									if ( index <= firingIndex ) {
										firingIndex--;
									}
								}
							}
						});
					}
					return this;
				},
				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
				},
				// Remove all callbacks from the list
				empty: function() {
					list = [];
					firingLength = 0;
					return this;
				},
				// Have the list do nothing anymore
				disable: function() {
					list = stack = memory = undefined;
					return this;
				},
				// Is it disabled?
				disabled: function() {
					return !list;
				},
				// Lock the list in its current state
				lock: function() {
					stack = undefined;
					if ( !memory ) {
						self.disable();
					}
					return this;
				},
				// Is it locked?
				locked: function() {
					return !stack;
				},
				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( list && ( !fired || stack ) ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						if ( firing ) {
							stack.push( args );
						} else {
							fire( args );
						}
					}
					return this;
				},
				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},
				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	jQuery.extend({

		Deferred: function( func ) {
			var tuples = [
					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks("memory") ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred(function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[1] ](function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.done( newDefer.resolve )
											.fail( newDefer.reject )
											.progress( newDefer.notify );
									} else {
										newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
									}
								});
							});
							fns = null;
						}).promise();
					},
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Keep pipe for back-compat
			promise.pipe = promise.then;

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];

				// promise[ done | fail | progress ] = list.add
				promise[ tuple[1] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add(function() {
						// state = [ resolved | rejected ]
						state = stateString;

					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}

				// deferred[ resolve | reject | notify ]
				deferred[ tuple[0] ] = function() {
					deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[0] + "With" ] = list.fireWith;
			});

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,

				// the count of uncompleted subordinates
				remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

				// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );
						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},

				progressValues, progressContexts, resolveContexts;

			// Add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject )
							.progress( updateFunc( i, progressContexts, progressValues ) );
					} else {
						--remaining;
					}
				}
			}

			// If we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}

			return deferred.promise();
		}
	});


	// The deferred used on DOM ready
	var readyList;

	jQuery.fn.ready = function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	};

	jQuery.extend({
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );

			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	});

	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed, false );
		window.removeEventListener( "load", completed, false );
		jQuery.ready();
	}

	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {

			readyList = jQuery.Deferred();

			// Catch cases where $(document).ready() is called after the browser event has already occurred.
			// We once tried to use readyState "interactive" here, but it caused issues like the one
			// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
			if ( document.readyState === "complete" ) {
				// Handle it asynchronously to allow scripts the opportunity to delay ready
				setTimeout( jQuery.ready );

			} else {

				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed, false );

				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed, false );
			}
		}
		return readyList.promise( obj );
	};

	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				len ? fn( elems[0], key ) : emptyGet;
	};


	/**
	 * Determines whether an object can have data
	 */
	jQuery.acceptData = function( owner ) {
		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};


	function Data() {
		// Support: Android<4,
		// Old WebKit does not have Object.preventExtensions/freeze method,
		// return new empty object instead with no [[set]] accessor
		Object.defineProperty( this.cache = {}, 0, {
			get: function() {
				return {};
			}
		});

		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;
	Data.accepts = jQuery.acceptData;

	Data.prototype = {
		key: function( owner ) {
			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return the key for a frozen object.
			if ( !Data.accepts( owner ) ) {
				return 0;
			}

			var descriptor = {},
				// Check if the owner object already has a cache key
				unlock = owner[ this.expando ];

			// If not, create one
			if ( !unlock ) {
				unlock = Data.uid++;

				// Secure it in a non-enumerable, non-writable property
				try {
					descriptor[ this.expando ] = { value: unlock };
					Object.defineProperties( owner, descriptor );

				// Support: Android<4
				// Fallback to a less secure definition
				} catch ( e ) {
					descriptor[ this.expando ] = unlock;
					jQuery.extend( owner, descriptor );
				}
			}

			// Ensure the cache object
			if ( !this.cache[ unlock ] ) {
				this.cache[ unlock ] = {};
			}

			return unlock;
		},
		set: function( owner, data, value ) {
			var prop,
				// There may be an unlock assigned to this node,
				// if there is no entry for this "owner", create one inline
				// and set the unlock as though an owner entry had always existed
				unlock = this.key( owner ),
				cache = this.cache[ unlock ];

			// Handle: [ owner, key, value ] args
			if ( typeof data === "string" ) {
				cache[ data ] = value;

			// Handle: [ owner, { properties } ] args
			} else {
				// Fresh assignments by object are shallow copied
				if ( jQuery.isEmptyObject( cache ) ) {
					jQuery.extend( this.cache[ unlock ], data );
				// Otherwise, copy the properties one-by-one to the cache object
				} else {
					for ( prop in data ) {
						cache[ prop ] = data[ prop ];
					}
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			// Either a valid cache is found, or will be created.
			// New caches will be created and the unlock returned,
			// allowing direct access to the newly created
			// empty data object. A valid owner object must be provided.
			var cache = this.cache[ this.key( owner ) ];

			return key === undefined ?
				cache : cache[ key ];
		},
		access: function( owner, key, value ) {
			var stored;
			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					((key && typeof key === "string") && value === undefined) ) {

				stored = this.get( owner, key );

				return stored !== undefined ?
					stored : this.get( owner, jQuery.camelCase(key) );
			}

			// [*]When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i, name, camel,
				unlock = this.key( owner ),
				cache = this.cache[ unlock ];

			if ( key === undefined ) {
				this.cache[ unlock ] = {};

			} else {
				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {
					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat( key.map( jQuery.camelCase ) );
				} else {
					camel = jQuery.camelCase( key );
					// Try the string as a key before any manipulation
					if ( key in cache ) {
						name = [ key, camel ];
					} else {
						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ?
							[ name ] : ( name.match( rnotwhite ) || [] );
					}
				}

				i = name.length;
				while ( i-- ) {
					delete cache[ name[ i ] ];
				}
			}
		},
		hasData: function( owner ) {
			return !jQuery.isEmptyObject(
				this.cache[ owner[ this.expando ] ] || {}
			);
		},
		discard: function( owner ) {
			if ( owner[ this.expando ] ) {
				delete this.cache[ owner[ this.expando ] ];
			}
		}
	};
	var data_priv = new Data();

	var data_user = new Data();



	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /([A-Z])/g;

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :
						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch( e ) {}

				// Make sure we set the data so it isn't changed later
				data_user.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend({
		hasData: function( elem ) {
			return data_user.hasData( elem ) || data_priv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return data_user.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			data_user.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to data_priv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return data_priv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			data_priv.remove( elem, name );
		}
	});

	jQuery.fn.extend({
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = data_user.get( elem );

					if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice(5) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						data_priv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each(function() {
					data_user.set( this, key );
				});
			}

			return access( this, function( value ) {
				var data,
					camelKey = jQuery.camelCase( key );

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {
					// Attempt to get data from the cache
					// with the key as-is
					data = data_user.get( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to get data from the cache
					// with the key camelized
					data = data_user.get( elem, camelKey );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, camelKey, undefined );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				this.each(function() {
					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = data_user.get( this, camelKey );

					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					data_user.set( this, camelKey, value );

					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if ( key.indexOf("-") !== -1 && data !== undefined ) {
						data_user.set( this, key, value );
					}
				});
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each(function() {
				data_user.remove( this, key );
			});
		}
	});


	jQuery.extend({
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = data_priv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = data_priv.access( elem, type, jQuery.makeArray(data) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return data_priv.get( elem, key ) || data_priv.access( elem, key, {
				empty: jQuery.Callbacks("once memory").add(function() {
					data_priv.remove( elem, [ type + "queue", key ] );
				})
			});
		}
	});

	jQuery.fn.extend({
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[0], type );
			}

			return data === undefined ?
				this :
				this.each(function() {
					var queue = jQuery.queue( this, type, data );

					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[0] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				});
		},
		dequeue: function( type ) {
			return this.each(function() {
				jQuery.dequeue( this, type );
			});
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = data_priv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	});
	var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHidden = function( elem, el ) {
			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
		};

	var rcheckableType = (/^(?:checkbox|radio)$/i);



	(function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// Support: Safari<=5.1
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Safari<=5.1, Android<4.2
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE<=11+
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	})();
	var strundefined = typeof undefined;



	support.focusinBubbles = "onfocusin" in window;


	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
		rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = data_priv.get( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !(events = elemData.events) ) {
				events = elemData.events = {};
			}
			if ( !(eventHandle = elemData.handle) ) {
				eventHandle = elemData.handle = function( e ) {
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[t] ) || [];
				type = origType = tmp[1];
				namespaces = ( tmp[2] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend({
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join(".")
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !(handlers = events[ type ]) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle, false );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = data_priv.hasData( elem ) && data_priv.get( elem );

			if ( !elemData || !(events = elemData.events) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[t] ) || [];
				type = origType = tmp[1];
				namespaces = ( tmp[2] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				delete elemData.handle;
				data_priv.remove( elem, "events" );
			}
		},

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf(".") >= 0 ) {
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split(".");
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf(":") < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join(".");
			event.namespace_re = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === (elem.ownerDocument || document) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
					jQuery.acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		dispatch: function( event ) {

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );

			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[0] = event;
			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
								.apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( (event.result = ret) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			// Avoid non-left-click bubbling in Firefox (#3861)
			if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.disabled !== true || event.type !== "click" ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) >= 0 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push({ elem: cur, handlers: matches });
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
			}

			return handlerQueue;
		},

		// Includes some event props shared by KeyEvent and MouseEvent
		props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

		fixHooks: {},

		keyHooks: {
			props: "char charCode key keyCode".split(" "),
			filter: function( event, original ) {

				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}

				return event;
			}
		},

		mouseHooks: {
			props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
			filter: function( event, original ) {
				var eventDoc, doc, body,
					button = original.button;

				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;

					event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}

				return event;
			}
		},

		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}

			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];

			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

			event = new jQuery.Event( originalEvent );

			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}

			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if ( !event.target ) {
				event.target = document;
			}

			// Support: Safari 6.0+, Chrome<28
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}

			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},

		special: {
			load: {
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {
				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		},

		simulate: function( type, elem, event, bubble ) {
			// Piggyback on a donor event to simulate a different one.
			// Fake originalEvent to avoid donor's stopPropagation, but if the
			// simulated event prevents default then we do the same on the donor.
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true,
					originalEvent: {}
				}
			);
			if ( bubble ) {
				jQuery.event.trigger( e, null, elem );
			} else {
				jQuery.event.dispatch.call( elem, e );
			}
			if ( e.isDefaultPrevented() ) {
				event.preventDefault();
			}
		}
	};

	jQuery.removeEvent = function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	};

	jQuery.Event = function( src, props ) {
		// Allow instantiation without the 'new' keyword
		if ( !(this instanceof jQuery.Event) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&
					// Support: Android<4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e && e.preventDefault ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e && e.stopPropagation ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e && e.stopImmediatePropagation ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// Support: Chrome 15+
	jQuery.each({
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mousenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	});

	// Support: Firefox, Chrome, Safari
	// Create "bubbling" focus and blur events
	if ( !support.focusinBubbles ) {
		jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
					jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
				};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = data_priv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = data_priv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						data_priv.remove( doc, fix );

					} else {
						data_priv.access( doc, fix, attaches );
					}
				}
			};
		});
	}

	jQuery.fn.extend({

		on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
			var origFn, type;

			// Types can be a map of types/handlers
			if ( typeof types === "object" ) {
				// ( types-Object, selector, data )
				if ( typeof selector !== "string" ) {
					// ( types-Object, data )
					data = data || selector;
					selector = undefined;
				}
				for ( type in types ) {
					this.on( type, selector, data, types[ type ], one );
				}
				return this;
			}

			if ( data == null && fn == null ) {
				// ( types, fn )
				fn = selector;
				data = selector = undefined;
			} else if ( fn == null ) {
				if ( typeof selector === "string" ) {
					// ( types, selector, fn )
					fn = data;
					data = undefined;
				} else {
					// ( types, data, fn )
					fn = data;
					data = selector;
					selector = undefined;
				}
			}
			if ( fn === false ) {
				fn = returnFalse;
			} else if ( !fn ) {
				return this;
			}

			if ( one === 1 ) {
				origFn = fn;
				fn = function( event ) {
					// Can use an empty set, since event contains the info
					jQuery().off( event );
					return origFn.apply( this, arguments );
				};
				// Use same guid so caller can remove using origFn
				fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
			}
			return this.each( function() {
				jQuery.event.add( this, types, fn, data, selector );
			});
		},
		one: function( types, selector, data, fn ) {
			return this.on( types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {
				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each(function() {
				jQuery.event.remove( this, types, fn, selector );
			});
		},

		trigger: function( type, data ) {
			return this.each(function() {
				jQuery.event.trigger( type, data, this );
			});
		},
		triggerHandler: function( type, data ) {
			var elem = this[0];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	});


	var
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
		rtagName = /<([\w:]+)/,
		rhtml = /<|&#?\w+;/,
		rnoInnerhtml = /<(?:script|style|link)/i,
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptType = /^$|\/(?:java|ecma)script/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

		// We have to close these tags to support XHTML (#13200)
		wrapMap = {

			// Support: IE9
			option: [ 1, "<select multiple='multiple'>", "</select>" ],

			thead: [ 1, "<table>", "</table>" ],
			col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
			tr: [ 2, "<table><tbody>", "</tbody></table>" ],
			td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

			_default: [ 0, "", "" ]
		};

	// Support: IE9
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;

	// Support: 1.x compatibility
	// Manipulating tables requires a tbody
	function manipulationTarget( elem, content ) {
		return jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

			elem.getElementsByTagName("tbody")[0] ||
				elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
			elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );

		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute("type");
		}

		return elem;
	}

	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			data_priv.set(
				elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
			);
		}
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( data_priv.hasData( src ) ) {
			pdataOld = data_priv.access( src );
			pdataCur = data_priv.set( dest, pdataOld );
			events = pdataOld.events;

			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( data_user.hasData( src ) ) {
			udataOld = data_user.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			data_user.set( dest, udataCur );
		}
	}

	function getAll( context, tag ) {
		var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
				context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
				[];

		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], ret ) :
			ret;
	}

	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	jQuery.extend({
		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );

			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		buildFragment: function( elems, context, scripts, selection ) {
			var elem, tmp, tag, wrap, contains, j,
				fragment = context.createDocumentFragment(),
				nodes = [],
				i = 0,
				l = elems.length;

			for ( ; i < l; i++ ) {
				elem = elems[ i ];

				if ( elem || elem === 0 ) {

					// Add nodes directly
					if ( jQuery.type( elem ) === "object" ) {
						// Support: QtWebKit, PhantomJS
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

					// Convert non-html into a text node
					} else if ( !rhtml.test( elem ) ) {
						nodes.push( context.createTextNode( elem ) );

					// Convert html into DOM nodes
					} else {
						tmp = tmp || fragment.appendChild( context.createElement("div") );

						// Deserialize a standard representation
						tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
						wrap = wrapMap[ tag ] || wrapMap._default;
						tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

						// Descend through wrappers to the right content
						j = wrap[ 0 ];
						while ( j-- ) {
							tmp = tmp.lastChild;
						}

						// Support: QtWebKit, PhantomJS
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( nodes, tmp.childNodes );

						// Remember the top-level container
						tmp = fragment.firstChild;

						// Ensure the created nodes are orphaned (#12392)
						tmp.textContent = "";
					}
				}
			}

			// Remove wrapper from fragment
			fragment.textContent = "";

			i = 0;
			while ( (elem = nodes[ i++ ]) ) {

				// #4087 - If origin and destination elements are the same, and this is
				// that element, do not do anything
				if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
					continue;
				}

				contains = jQuery.contains( elem.ownerDocument, elem );

				// Append to fragment
				tmp = getAll( fragment.appendChild( elem ), "script" );

				// Preserve script evaluation history
				if ( contains ) {
					setGlobalEval( tmp );
				}

				// Capture executables
				if ( scripts ) {
					j = 0;
					while ( (elem = tmp[ j++ ]) ) {
						if ( rscriptType.test( elem.type || "" ) ) {
							scripts.push( elem );
						}
					}
				}
			}

			return fragment;
		},

		cleanData: function( elems ) {
			var data, elem, type, key,
				special = jQuery.event.special,
				i = 0;

			for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
				if ( jQuery.acceptData( elem ) ) {
					key = elem[ data_priv.expando ];

					if ( key && (data = data_priv.cache[ key ]) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}
						if ( data_priv.cache[ key ] ) {
							// Discard any remaining `private` data
							delete data_priv.cache[ key ];
						}
					}
				}
				// Discard any remaining `user` data
				delete data_user.cache[ elem[ data_user.expando ] ];
			}
		}
	});

	jQuery.fn.extend({
		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each(function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					});
			}, null, value, arguments.length );
		},

		append: function() {
			return this.domManip( arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			});
		},

		prepend: function() {
			return this.domManip( arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			});
		},

		before: function() {
			return this.domManip( arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			});
		},

		after: function() {
			return this.domManip( arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			});
		},

		remove: function( selector, keepData /* Internal Use Only */ ) {
			var elem,
				elems = selector ? jQuery.filter( selector, this ) : this,
				i = 0;

			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( getAll( elem ) );
				}

				if ( elem.parentNode ) {
					if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
						setGlobalEval( getAll( elem, "script" ) );
					}
					elem.parentNode.removeChild( elem );
				}
			}

			return this;
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; (elem = this[i]) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map(function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			});
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = value.replace( rxhtmlTag, "<$1></$2>" );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var arg = arguments[ 0 ];

			// Make the changes, replacing each context element with the new content
			this.domManip( arguments, function( elem ) {
				arg = this.parentNode;

				jQuery.cleanData( getAll( this ) );

				if ( arg ) {
					arg.replaceChild( elem, this );
				}
			});

			// Force removal if there was no new content (e.g., from empty arguments)
			return arg && (arg.length || arg.nodeType) ? this : this.remove();
		},

		detach: function( selector ) {
			return this.remove( selector, true );
		},

		domManip: function( args, callback ) {

			// Flatten any nested arrays
			args = concat.apply( [], args );

			var fragment, first, scripts, hasScripts, node, doc,
				i = 0,
				l = this.length,
				set = this,
				iNoClone = l - 1,
				value = args[ 0 ],
				isFunction = jQuery.isFunction( value );

			// We can't cloneNode fragments that contain checked, in WebKit
			if ( isFunction ||
					( l > 1 && typeof value === "string" &&
						!support.checkClone && rchecked.test( value ) ) ) {
				return this.each(function( index ) {
					var self = set.eq( index );
					if ( isFunction ) {
						args[ 0 ] = value.call( this, index, self.html() );
					}
					self.domManip( args, callback );
				});
			}

			if ( l ) {
				fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
				first = fragment.firstChild;

				if ( fragment.childNodes.length === 1 ) {
					fragment = first;
				}

				if ( first ) {
					scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
					hasScripts = scripts.length;

					// Use the original fragment for the last item instead of the first because it can end up
					// being emptied incorrectly in certain situations (#8070).
					for ( ; i < l; i++ ) {
						node = fragment;

						if ( i !== iNoClone ) {
							node = jQuery.clone( node, true, true );

							// Keep references to cloned scripts for later restoration
							if ( hasScripts ) {
								// Support: QtWebKit
								// jQuery.merge because push.apply(_, arraylike) throws
								jQuery.merge( scripts, getAll( node, "script" ) );
							}
						}

						callback.call( this[ i ], node, i );
					}

					if ( hasScripts ) {
						doc = scripts[ scripts.length - 1 ].ownerDocument;

						// Reenable scripts
						jQuery.map( scripts, restoreScript );

						// Evaluate executable scripts on first document insertion
						for ( i = 0; i < hasScripts; i++ ) {
							node = scripts[ i ];
							if ( rscriptType.test( node.type || "" ) &&
								!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

								if ( node.src ) {
									// Optional AJAX dependency, but won't run scripts if not present
									if ( jQuery._evalUrl ) {
										jQuery._evalUrl( node.src );
									}
								} else {
									jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
								}
							}
						}
					}
				}
			}

			return this;
		}
	});

	jQuery.each({
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	});


	var iframe,
		elemdisplay = {};

	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */
	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var style,
			elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

			// getDefaultComputedStyle might be reliably used only on attached element
			display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

				// Use of this method is a temporary fix (more like optimization) until something better comes along,
				// since it was removed from specification and supported only in FF
				style.display : jQuery.css( elem[ 0 ], "display" );

		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();

		return display;
	}

	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];

		if ( !display ) {
			display = actualDisplay( nodeName, doc );

			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {

				// Use the already-created iframe if possible
				iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[ 0 ].contentDocument;

				// Support: IE
				doc.write();
				doc.close();

				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}

			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}

		return display;
	}
	var rmargin = (/^margin/);

	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {
			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			if ( elem.ownerDocument.defaultView.opener ) {
				return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
			}

			return window.getComputedStyle( elem, null );
		};



	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// Support: IE9
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];
		}

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// Support: iOS < 6
			// A tribute to the "awesome hack by Dean Edwards"
			// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?
			// Support: IE
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {
					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return (this.get = hookFn).apply( this, arguments );
			}
		};
	}


	(function() {
		var pixelPositionVal, boxSizingReliableVal,
			docElem = document.documentElement,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		if ( !div.style ) {
			return;
		}

		// Support: IE9-11+
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
			"position:absolute";
		container.appendChild( div );

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computePixelPositionAndBoxSizingReliable() {
			div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
				"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
				"border:1px;padding:1px;width:4px;position:absolute";
			div.innerHTML = "";
			docElem.appendChild( container );

			var divStyle = window.getComputedStyle( div, null );
			pixelPositionVal = divStyle.top !== "1%";
			boxSizingReliableVal = divStyle.width === "4px";

			docElem.removeChild( container );
		}

		// Support: node.js jsdom
		// Don't assume that getComputedStyle is a property of the global object
		if ( window.getComputedStyle ) {
			jQuery.extend( support, {
				pixelPosition: function() {

					// This test is executed only once but we still do memoizing
					// since we can use the boxSizingReliable pre-computing.
					// No need to check if the test was already performed, though.
					computePixelPositionAndBoxSizingReliable();
					return pixelPositionVal;
				},
				boxSizingReliable: function() {
					if ( boxSizingReliableVal == null ) {
						computePixelPositionAndBoxSizingReliable();
					}
					return boxSizingReliableVal;
				},
				reliableMarginRight: function() {

					// Support: Android 2.3
					// Check if div with explicit width and no margin-right incorrectly
					// gets computed margin-right based on width of container. (#3333)
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// This support function is only executed once so no memoizing is needed.
					var ret,
						marginDiv = div.appendChild( document.createElement( "div" ) );

					// Reset CSS: box-sizing; display; margin; border; padding
					marginDiv.style.cssText = div.style.cssText =
						// Support: Firefox<29, Android 2.3
						// Vendor-prefix box-sizing
						"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
						"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
					marginDiv.style.marginRight = marginDiv.style.width = "0";
					div.style.width = "1px";
					docElem.appendChild( container );

					ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );

					docElem.removeChild( container );
					div.removeChild( marginDiv );

					return ret;
				}
			});
		}
	})();


	// A method for quickly swapping in/out CSS properties to get correct calculations.
	jQuery.swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};


	var
		// Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
		rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( style, name ) {

		// Shortcut for names that are not vendor prefixed
		if ( name in style ) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[0].toUpperCase() + name.slice(1),
			origName = name,
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in style ) {
				return name;
			}
		}

		return origName;
	}

	function setPositiveNumber( elem, value, subtract ) {
		var matches = rnumsplit.exec( value );
		return matches ?
			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
			value;
	}

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?
			// If we already have the right measurement, avoid augmentation
			4 :
			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,

			val = 0;

		for ( ; i < 4; i += 2 ) {
			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}

			if ( isBorderBox ) {
				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {
				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		return val;
	}

	function getWidthOrHeight( elem, name, extra ) {

		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {
			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}

			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test(val) ) {
				return val;
			}

			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );

			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}

		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;

		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			values[ index ] = data_priv.get( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {
				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}

				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
				}
			} else {
				hidden = isHidden( elem );

				if ( display !== "none" || !hidden ) {
					data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
				}
			}
		}

		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}

		return elements;
	}

	jQuery.extend({

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;

			name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && (ret = rrelNum.exec( value )) ) {
					value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}

				// If a number, add 'px' to the (except for certain CSS properties)
				if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
					value += "px";
				}

				// Support: IE9-11+
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
					style[ name ] = value;
				}

			} else {
				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );

			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
			}
			return val;
		}
	});

	jQuery.each([ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
						jQuery.swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						}) :
						getWidthOrHeight( elem, name, extra );
				}
			},

			set: function( elem, value, extra ) {
				var styles = extra && getStyles( elem );
				return setPositiveNumber( elem, value, extra ?
					augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					) : 0
				);
			}
		};
	});

	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				return jQuery.swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each({
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split(" ") : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	});

	jQuery.fn.extend({
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each(function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			});
		}
	});


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || "swing";
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				if ( tween.elem[ tween.prop ] != null &&
					(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
					return tween.elem[ tween.prop ];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {
				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		}
	};

	jQuery.fx = Tween.prototype.init;

	// Back Compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
		rrun = /queueHooks$/,
		animationPrefilters = [ defaultPrefilter ],
		tweeners = {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value ),
					target = tween.cur(),
					parts = rfxnum.exec( value ),
					unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

					// Starting value computation is required for potential unit mismatches
					start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
						rfxnum.exec( jQuery.css( tween.elem, prop ) ),
					scale = 1,
					maxIterations = 20;

				if ( start && start[ 3 ] !== unit ) {
					// Trust units reported by jQuery.css
					unit = unit || start[ 3 ];

					// Make sure we update the tween properties later on
					parts = parts || [];

					// Iteratively approximate from a nonzero starting point
					start = +target || 1;

					do {
						// If previous iteration zeroed out, double until we get *something*.
						// Use string for doubling so we don't accidentally see scale as unchanged below
						scale = scale || ".5";

						// Adjust and apply
						start = start / scale;
						jQuery.style( tween.elem, prop, start + unit );

					// Update scale, tolerating zero or NaN from tween.cur(),
					// break the loop if scale is unchanged or perfect, or if we've just had enough
					} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
				}

				// Update tween properties
				if ( parts ) {
					start = tween.start = +start || +target || 0;
					tween.unit = unit;
					// If a +=/-= token was provided, we're doing a relative animation
					tween.end = parts[ 1 ] ?
						start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
						+parts[ 2 ];
				}

				return tween;
			} ]
		};

	// Animations created synchronously will run synchronously
	function createFxNow() {
		setTimeout(function() {
			fxNow = undefined;
		});
		return ( fxNow = jQuery.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( (tween = collection[ index ].call( animation, prop, value )) ) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = data_priv.get( elem, "fxshow" );

		// Handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always(function() {
				// Ensure the complete handler is called before this completes
				anim.always(function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				});
			});
		}

		// Height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );

			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				data_priv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
				style.display = "inline-block";
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}

		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}

		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = data_priv.access( elem, "fxshow", {} );
			}

			// Store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done(function() {
					jQuery( elem ).hide();
				});
			}
			anim.done(function() {
				var prop;

				data_priv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			});
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}

		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
			style.display = display;
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = animationPrefilters.length,
			deferred = jQuery.Deferred().always( function() {
				// Don't match elem in the :animated selector
				delete tick.elem;
			}),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ]);

				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise({
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, { specialEasing: {} }, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,
						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			}),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length ; index++ ) {
			result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			})
		);

		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}

	jQuery.Animation = jQuery.extend( Animation, {

		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.split(" ");
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				tweeners[ prop ] = tweeners[ prop ] || [];
				tweeners[ prop ].unshift( callback );
			}
		},

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				animationPrefilters.unshift( callback );
			} else {
				animationPrefilters.push( callback );
			}
		}
	});

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
			opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend({
		fadeTo: function( speed, to, easing, callback ) {

			// Show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()

				// Animate to the value specified
				.end().animate({ opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {
					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || data_priv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each(function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = data_priv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			});
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each(function() {
				var index,
					data = data_priv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// Turn off finishing flag
				delete data.finish;
			});
		}
	});

	jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	});

	// Generate shortcuts for custom animations
	jQuery.each({
		slideDown: genFx("show"),
		slideUp: genFx("hide"),
		slideToggle: genFx("toggle"),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	});

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = jQuery.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;

	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};

	jQuery.fx.stop = function() {
		clearInterval( timerId );
		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	};


	(function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: iOS<=5.1, Android<=4.2+
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE<=11+
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: Android<=2.3
		// Options inside disabled selects are incorrectly marked as disabled
		select.disabled = true;
		support.optDisabled = !opt.disabled;

		// Support: IE<=11+
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	})();


	var nodeHook, boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend({
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each(function() {
				jQuery.removeAttr( this, name );
			});
		}
	});

	jQuery.extend({
		attr: function( elem, name, value ) {
			var hooks, ret,
				nType = elem.nodeType;

			// don't get/set attributes on text, comment and attribute nodes
			if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === strundefined ) {
				return jQuery.prop( elem, name, value );
			}

			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
			}

			if ( value !== undefined ) {

				if ( value === null ) {
					jQuery.removeAttr( elem, name );

				} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
					return ret;

				} else {
					elem.setAttribute( name, value + "" );
					return value;
				}

			} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				ret = jQuery.find.attr( elem, name );

				// Non-existent attributes return null, we normalize to undefined
				return ret == null ?
					undefined :
					ret;
			}
		},

		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( (name = attrNames[i++]) ) {
					propName = jQuery.propFix[ name ] || name;

					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {
						// Set corresponding property to false
						elem[ propName ] = false;
					}

					elem.removeAttribute( name );
				}
			}
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		}
	});

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {
				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	});




	var rfocusable = /^(?:input|select|textarea|button)$/i;

	jQuery.fn.extend({
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each(function() {
				delete this[ jQuery.propFix[ name ] || name ];
			});
		}
	});

	jQuery.extend({
		propFix: {
			"for": "htmlFor",
			"class": "className"
		},

		prop: function( elem, name, value ) {
			var ret, hooks, notxml,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

			if ( notxml ) {
				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
					ret :
					( elem[ name ] = value );

			} else {
				return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
					ret :
					elem[ name ];
			}
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {
					return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
						elem.tabIndex :
						-1;
				}
			}
		}
	});

	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			}
		};
	}

	jQuery.each([
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	});




	var rclass = /[\t\r\n\f]/g;

	jQuery.fn.extend({
		addClass: function( value ) {
			var classes, elem, cur, clazz, j, finalValue,
				proceed = typeof value === "string" && value,
				i = 0,
				len = this.length;

			if ( jQuery.isFunction( value ) ) {
				return this.each(function( j ) {
					jQuery( this ).addClass( value.call( this, j, this.className ) );
				});
			}

			if ( proceed ) {
				// The disjunction here is for better compressibility (see removeClass)
				classes = ( value || "" ).match( rnotwhite ) || [];

				for ( ; i < len; i++ ) {
					elem = this[ i ];
					cur = elem.nodeType === 1 && ( elem.className ?
						( " " + elem.className + " " ).replace( rclass, " " ) :
						" "
					);

					if ( cur ) {
						j = 0;
						while ( (clazz = classes[j++]) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( elem.className !== finalValue ) {
							elem.className = finalValue;
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, clazz, j, finalValue,
				proceed = arguments.length === 0 || typeof value === "string" && value,
				i = 0,
				len = this.length;

			if ( jQuery.isFunction( value ) ) {
				return this.each(function( j ) {
					jQuery( this ).removeClass( value.call( this, j, this.className ) );
				});
			}
			if ( proceed ) {
				classes = ( value || "" ).match( rnotwhite ) || [];

				for ( ; i < len; i++ ) {
					elem = this[ i ];
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && ( elem.className ?
						( " " + elem.className + " " ).replace( rclass, " " ) :
						""
					);

					if ( cur ) {
						j = 0;
						while ( (clazz = classes[j++]) ) {
							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = value ? jQuery.trim( cur ) : "";
						if ( elem.className !== finalValue ) {
							elem.className = finalValue;
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value;

			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( jQuery.isFunction( value ) ) {
				return this.each(function( i ) {
					jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
				});
			}

			return this.each(function() {
				if ( type === "string" ) {
					// Toggle individual class names
					var className,
						i = 0,
						self = jQuery( this ),
						classNames = value.match( rnotwhite ) || [];

					while ( (className = classNames[ i++ ]) ) {
						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( type === strundefined || type === "boolean" ) {
					if ( this.className ) {
						// store className if set
						data_priv.set( this, "__className__", this.className );
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
				}
			});
		},

		hasClass: function( selector ) {
			var className = " " + selector + " ",
				i = 0,
				l = this.length;
			for ( ; i < l; i++ ) {
				if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
					return true;
				}
			}

			return false;
		}
	});




	var rreturn = /\r/g;

	jQuery.fn.extend({
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[0];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ?
						// Handle most common string cases
						ret.replace(rreturn, "") :
						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction( value );

			return this.each(function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					});
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			});
		}
	});

	jQuery.extend({
		valHooks: {
			option: {
				get: function( elem ) {
					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :
						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						jQuery.trim( jQuery.text( elem ) );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// IE6-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&
								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];
						if ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {
							optionSet = true;
						}
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	});

	// Radios and checkboxes getter/setter
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute("value") === null ? "on" : elem.value;
			};
		}
	});




	// Return jQuery for attributes-only inclusion


	jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	});

	jQuery.fn.extend({
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		},

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
		}
	});


	var nonce = jQuery.now();

	var rquery = (/\?/);



	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function( data ) {
		return JSON.parse( data + "" );
	};


	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE9
		try {
			tmp = new DOMParser();
			xml = tmp.parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
		rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Document location
		ajaxLocation = window.location.href,

		// Segment location into parts
		ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

			if ( jQuery.isFunction( func ) ) {
				// For each dataType in the dataTypeExpression
				while ( (dataType = dataTypes[i++]) ) {
					// Prepend if requested
					if ( dataType[0] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

					// Otherwise append
					} else {
						(structure[ dataType ] = structure[ dataType ] || []).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			});
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {
			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},
			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

			// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {
									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s[ "throws" ] ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend({

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: ajaxLocation,
			type: "GET",
			isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /xml/,
				html: /html/,
				json: /json/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,
				// URL without anti-cache param
				cacheURL,
				// Response headers
				responseHeadersString,
				responseHeaders,
				// timeout handle
				timeoutTimer,
				// Cross-domain detection vars
				parts,
				// To know if global events are to be dispatched
				fireGlobals,
				// Loop variable
				i,
				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),
				// Callbacks context
				callbackContext = s.context || s,
				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,
				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks("once memory"),
				// Status-dependent callbacks
				statusCode = s.statusCode || {},
				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},
				// The jqXHR state
				state = 0,
				// Default abort message
				strAbort = "canceled",
				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( (match = rheaders.exec( responseHeadersString )) ) {
									responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {
									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {
								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;

			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
				.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

			// A cross-domain request is in order when we have a protocol:host:port mismatch
			if ( s.crossDomain == null ) {
				parts = rurl.exec( s.url.toLowerCase() );
				s.crossDomain = !!( parts &&
					( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
						( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
							( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
				);
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger("ajaxStart");
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?

						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :

						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
					s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}
				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = setTimeout(function() {
						jqXHR.abort("timeout");
					}, s.timeout );
				}

				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {
					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );
					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Called once
				if ( state === 2 ) {
					return;
				}

				// State is "done" now
				state = 2;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader("Last-Modified");
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader("etag");
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger("ajaxStop");
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	});

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {
			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			return jQuery.ajax({
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			});
		};
	});


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax({
			url: url,
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		});
	};


	jQuery.fn.extend({
		wrapAll: function( html ) {
			var wrap;

			if ( jQuery.isFunction( html ) ) {
				return this.each(function( i ) {
					jQuery( this ).wrapAll( html.call(this, i) );
				});
			}

			if ( this[ 0 ] ) {

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map(function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				}).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each(function( i ) {
					jQuery( this ).wrapInner( html.call(this, i) );
				});
			}

			return this.each(function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			});
		},

		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );

			return this.each(function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
			});
		},

		unwrap: function() {
			return this.parent().each(function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			}).end();
		}
	});


	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
	};
	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};




	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( jQuery.isArray( obj ) ) {
			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {
					// Treat each array item as a scalar.
					add( prefix, v );

				} else {
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
				}
			});

		} else if ( !traditional && jQuery.type( obj ) === "object" ) {
			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {
			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			});

		} else {
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};

	jQuery.fn.extend({
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map(function() {
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			})
			.filter(function() {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			})
			.map(function( i, elem ) {
				var val = jQuery( this ).val();

				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						}) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			}).get();
		}
	});


	jQuery.ajaxSettings.xhr = function() {
		try {
			return new XMLHttpRequest();
		} catch( e ) {}
	};

	var xhrId = 0,
		xhrCallbacks = {},
		xhrSuccessStatus = {
			// file protocol always yields status code 0, assume 200
			0: 200,
			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	// Support: IE9
	// Open requests must be manually aborted on unload (#5280)
	// See https://support.microsoft.com/kb/2856746 for more info
	if ( window.attachEvent ) {
		window.attachEvent( "onunload", function() {
			for ( var key in xhrCallbacks ) {
				xhrCallbacks[ key ]();
			}
		});
	}

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport(function( options ) {
		var callback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr(),
						id = ++xhrId;

					xhr.open( options.type, options.url, options.async, options.username, options.password );

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								delete xhrCallbacks[ id ];
								callback = xhr.onload = xhr.onerror = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {
									complete(
										// file: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,
										// Support: IE9
										// Accessing binary-data responseText throws an exception
										// (#11426)
										typeof xhr.responseText === "string" ? {
											text: xhr.responseText
										} : undefined,
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					xhr.onerror = callback("error");

					// Create the abort callback
					callback = xhrCallbacks[ id ] = callback("abort");

					try {
						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {
						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	});




	// Install script dataType
	jQuery.ajaxSetup({
		accepts: {
			script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /(?:java|ecma)script/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	});

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	});

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {
		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery("<script>").prop({
						async: true,
						charset: s.scriptCharset,
						src: s.url
					}).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	});




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup({
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	});

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters["script json"] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always(function() {
				// Restore preexisting value
				window[ callbackName ] = overwritten;

				// Save back as free
				if ( s[ callbackName ] ) {
					// make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			});

			// Delegate to script
			return "script";
		}
	});




	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	// Keep a copy of the old load method
	var _load = jQuery.fn.load;

	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}

		var selector, type, response,
			self = this,
			off = url.indexOf(" ");

		if ( off >= 0 ) {
			selector = jQuery.trim( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( jQuery.isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax({
				url: url,

				// if "type" variable is undefined, then "GET" method will be used
				type: type,
				dataType: "html",
				data: params
			}).done(function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			}).complete( callback && function( jqXHR, status ) {
				self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
			});
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	});




	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};




	var docElem = window.document.documentElement;

	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}

	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( jQuery.isFunction( options ) ) {
				options = options.call( elem, i, curOffset );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend({
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each(function( i ) {
						jQuery.offset.setOffset( this, options, i );
					});
			}

			var docElem, win,
				elem = this[ 0 ],
				box = { top: 0, left: 0 },
				doc = elem && elem.ownerDocument;

			if ( !doc ) {
				return;
			}

			docElem = doc.documentElement;

			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}

			// Support: BlackBerry 5, iOS 3 (original iPhone)
			// If we don't have gBCR, just use 0,0 rather than error
			if ( typeof elem.getBoundingClientRect !== strundefined ) {
				box = elem.getBoundingClientRect();
			}
			win = getWindow( doc );
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {
				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();

			} else {
				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		offsetParent: function() {
			return this.map(function() {
				var offsetParent = this.offsetParent || docElem;

				while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || docElem;
			});
		}
	});

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : window.pageXOffset,
						top ? val : window.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length, null );
		};
	});

	// Support: Safari<7+, Chrome<37+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );
					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	});


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( jQuery.isWindow( elem ) ) {
						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?
						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		});
	});


	// The number of elements contained in the matched element set
	jQuery.fn.size = function() {
		return this.length;
	};

	jQuery.fn.andSelf = jQuery.fn.addBack;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}




	var
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( typeof noGlobal === strundefined ) {
		window.jQuery = window.$ = jQuery;
	}




	return jQuery;

	}));


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(_chart) {

	  _chart.dataConfigKey = function(_) {
	    if (!arguments.length) return _chart._dataConfigKey;
	    _chart._dataConfigKey = _;
	    return _chart;
	  }

	  _chart.wireUpData = function(dataConfig){

	    var thisDataConfig = dataConfig[_chart.dataConfigKey()];
	  	var dimension = thisDataConfig.dimension;
	  	var group = thisDataConfig.group;

	    _chart.dataConfig = function() {return thisDataConfig;}
	    _chart.headerLabel = function() {return _chart.dataConfig().label;}

	  	if (dimension) _chart.dimension(dimension);
	    if (group) _chart.group(group);
	    if (_chart.totalCapacity && _chart.totalCapacityGenerator) _chart.totalCapacity(_chart.totalCapacityGenerator()); 
	    if (_chart.label && thisDataConfig.label_column && thisDataConfig.label_column !== thisDataConfig.key_column) { 
	      _chart.label(function(d){ 
	        var dataConfigItem = dataConfig[_chart.dataConfigKey()];
	    	  return (dataConfigItem.labelForKey && dataConfigItem.labelForKey(d.key || d)) || d.key;
	      });
	    }
	    if (_chart.resize) _chart.resize();
	  }

	  return _chart;
	}

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	var lodash = __webpack_require__(78);

	function addLookupFunctions(_cfg){
		for (var configKey in _cfg){
		  var c = _cfg[configKey];
		  if (c.label_column && c.key_column !== c.label_column) {
		    buildLookupTable(c);
		    c.labelForKey = function(key){
		      return this.lookupTable[key];
		    }
		  } else {
		    c.labelForKey = function(key){
		      return key;
		    }
		  }
		}
	}

	function buildLookupTable(c){
		c.lookupTable = {};
		var allRecords = c.dimension.top(Infinity);
		allRecords.forEach(function(row){
		  var key = row[c.key_column];
		  var value = row[c.label_column];
		  if (c.lookupTable[key] === undefined) c.lookupTable[key] = value;
		});
	}

	module.exports = function(configObject){
		var _sourceConfig = configObject;

		var _configurator = {};

		_configurator.sourceConfig = function() {
			return _sourceConfig;
		}

		_configurator.instantiate = function(opts) {	
			// AutoConfig Functions:
			//	Each function on "ac" can be used as a value for the "autoConfig" property
			//	on a data config item.
			//
			//	If no value is present for autoConfig: group and/or dimension properties of the 
			//	data config item must be set as functions.
			var ac = {};
			ac.sum = function(config){
			// "all": This option sets up both a dimension and group for the key_column.
			// Group is a simple sum based on opts.measureColumn.
				config.dimension = simpleDimension(config.key_column);
				config.group = sumGroup(config.dimension);
			}
			// "specificCount": This option sets up both a dimension and group for the key_column.
			// Group is now reduced by countGroup(record count), not by sum. 
			ac.count = function(config) {
				config.dimension = simpleDimension(config.key_column);
				config.group = countGroup(config.dimension);
			};
			ac.totalSum = function(config){
			// "totalSum": This option sets up only a group with a "total" sum based on opts.measureColumn
				config.group = opts.crossfilterObject.groupAll().reduceSum(function(d){
	          	  return Math.round(d[opts.measureColumn]) || 0;
	        	});
			}
			ac.totalCount = function(config){
			// "totalCount": This option sets up only a group with a "total" count. 
				config.group = opts.crossfilterObject.groupAll().reduceCount();
			}
			ac.hierarchical = function(config){
			// "hierarchical": This option sets up levels, dimensions, measureColumn.
			// Useful for charts such as Treemap & Sankey.
			    var levels = [];
			    config.columns.forEach(function(c){
			      levels.push({
			        dimension: simpleDimension(c),
			        columnName: c
			      });
			    });
			    config.levels = levels;
			    config.measureColumn = opts.measureColumn;
			}

			// autoConfig support functions
			function simpleDimension(dataColumn){
				return opts.crossfilterObject.dimension(function(d){
				  return (d[dataColumn] === undefined || d[dataColumn] === NaN || d[dataColumn] === '') ? "Unknown" : d[dataColumn].trim();
				});  
			}
			function sumGroup(dimension) {
				return dimension.group().reduceSum(function(d){
				  return Math.round(d[opts.measureColumn]) || 0;
				});
			}
			function countGroup(dimension) {
				//had to return object like this so that number display could use the group.value()
				//added group property for access to the group needed in country detail
				return {value: function(){ 
									return dimension
											.group()
											.reduceCount()
											.all()
											.filter(function(i){
												return i.value != 0;
											}).length;
						},
						group: function() {
									return dimension.group().reduceCount();
						}

				};
				//return dimension.group().reduceCount();
			}
			

			// Instantiate config for given opts
			var _cfg = lodash.cloneDeep(_sourceConfig);	
			for (var configKey in _cfg){
				var autoConfigName = _cfg[configKey].autoConfig;
				if (autoConfigName) {
				// Invoke auto config function for each item, if defined
					ac[autoConfigName](_cfg[configKey]); 
				} else {
				// Invoke manually configured functions for dimension and group
					if (_cfg[configKey].dimension)
						_cfg[configKey].dimension = _cfg[configKey].dimension(opts);
					if (_cfg[configKey].group) 
						_cfg[configKey].group = _cfg[configKey].group(opts);
				}

			}

			addLookupFunctions(_cfg);

			return _cfg;
		}

		return _configurator;
	} 

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	var dc = __webpack_require__(51),
	    inflection = __webpack_require__(32);

	module.exports = function (parent, chartGroup) {
	  
	    var _chart = dc.baseMixin({});    
	    var _filterSources = [];
	    _chart._mandatoryAttributes([]);

	    _chart.filterSources = function(_) {
	        // _ is of the following format:
	        // [{chart: yourDcChartObject, icon: 'fontawesome-class', label: 'Your Label'}]
	        if (!arguments.length) return _filterSources;
	        _filterSources = _;
	        return _chart;
	    }

	    _chart._doRender = function () {
	        var hasFilters = false;
	        //var filterSources = [{name: 'country', icon: 'globe', label: 'Country'},{name: 'economic-sector', icon: 'cube', label: 'Sector'},{name: 'implementing-agency', icon: 'institution', label: 'Agency'}]
	        var filtered = _filterSources.filter(function(d){ return d.chart.filters().length > 0});
	        if (filtered.length > 0) hasFilters = true;

	        _chart.root().classed('filter-trail', true);
	        _chart.root().html('');
	        var list = _chart.root().append('ul')

	        if (hasFilters) {
	          var filteredFieldsRoot = list.selectAll('li.filtered-field')
	              .data(filtered)
	            .enter().append('li').classed('filtered-field', true);

	          var fieldLabels = filteredFieldsRoot.selectAll('span.field-label')
	              .data(function(d){return [d];})
	            .enter().append('span').classed('field-label', true)
	            .text(function(d){return d.label});

	          var filteredFields = filteredFieldsRoot.selectAll('ul')
	             .data(filtered)
	            .enter().append('ul')
	            .classed('filter-value-list', true);

	          var filterValues = filteredFields.selectAll('li.filter-value')
	              .data(function(d){return d.chart.filters().map(function(v){return {chart: d.chart, value: v};});})
	            .enter().append('li')
	            .classed('filter-value', true)
	            .text(function(d){return d.value;})
	            .on('click', function(d){
	              d.chart.filter(d.value); 
	              dc.redrawAll();
	            });

	          var addValueButton = filteredFields.selectAll('li.add-value')
	            .data(function(d){return [d.chart];})
	            .enter()
	            .append('li')
	            .classed({'add-value': true, 'filter-value': true})  
	            .attr('id', function(d){return d.dataConfigKey()})
	            .each(function(d, i){
	              var opts = d.group().top(Infinity).map(function(i){return i.key});
	              dropPicker(this)
	                .options(opts)
	                .onPick(function(value){
	                  d.filter(value);
	                  dc.redrawAll();
	                })
	                .render();
	            })
	            .append('i')
	            .classed({'fa': true, 'fa-plus': true});
	            
	          var clearFilterButton = filteredFieldsRoot.selectAll('span.close')
	            .data(function(d){return [d.chart];})
	            .enter()
	            .append('span')  
	            .classed({'close': true})
	            .on('click', function(chart){
	              chart.filterAll();
	              dc.redrawAll();
	            })
	            .append('i')
	            .classed({'fa': true, 'fa-times': true});
	        }

	        return _chart;
	    };

	    _chart._doRedraw = function(){
	        return _chart._doRender();
	    };

	    return _chart.anchor(parent, chartGroup);
	  } 


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	var dc = __webpack_require__(51),
	    inflection = __webpack_require__(32);

	module.exports = function (parent, chartGroup) {
	  
	    var _chart = dc.baseMixin({});    
	    var _filterSources = [];
	    _chart._mandatoryAttributes([]);

	    _chart.filterSources = function(_) {
	        // _ is of the following format:
	        // [{chart: yourDcChartObject, icon: 'fontawesome-class', label: 'Your Label'}]
	        if (!arguments.length) return _filterSources;
	        _filterSources = _;
	        return _chart;
	    };

	    _chart._doRender = function () {
	        var hasFilters = false;
	        var filtered = _filterSources.filter(function(d){ return d.chart.filters().length > 0});
	        var notFiltered = _filterSources.filter(function(d){ return d.chart.filters().length === 0});
	        if (filtered.length > 0) hasFilters = true;

	        _chart.root().classed('filter-builder', true);
	        _chart.root().html('');
	        _chart.root().append('h2').html('<i class="fa fa-2x fa-filter"></i><span class="hide-visually">Filter</span>');
	        var list = _chart.root().append('ul');

	        var addFilterButton = list.append('li').classed('add-filter', true)
	        addFilterButton.append('i')
	          .classed({'fa': true, 'fa-plus': true});
	        filterMenu(addFilterButton, notFiltered);

	        if (hasFilters) {
	          var filteredFieldsRoot = list.selectAll('li.filtered-field')
	              .data(filtered)
	            .enter().append('li').classed('filtered-field', true);

	          var fieldLabels = filteredFieldsRoot.selectAll('span.field-label')
	              .data(function(d){return [d];})
	            .enter().append('span').classed('field-label', true)
	            .text(function(d){return d.label});

	          var filteredFields = filteredFieldsRoot.selectAll('ul')
	             .data(function(d){return [d];})
	            .enter().append('ul')
	            .classed('filter-value-list', true);

	          var filterValues = filteredFields.selectAll('li.filter-value')
	              .data(function(d){return d.chart.filters().map(function(v){return {chart: d.chart, filterValue: v};});})
	            .enter().append('li')
	            .classed('filter-value', true)
	            .text(function(d){return tryLabel(d);})
	            .on('click', function(d){
	              d.chart.filter(d.filterValue); // dc base .filter() function works for removal as well as addition of filters
	              dc.redrawAll();
	              d3.event.stopPropagation();
	            });

	          var addValueButton = filteredFields.selectAll('li.add-value')
	            .data(function(d){return [d];})
	            .enter()
	            .append('li')
	            .classed({'add-value': true, 'filter-value': true})  
	            .append('i')
	            .classed({'fa': true, 'fa-plus': true})
	            .on("click", function(){
	              showValueOptions(this);
	              d3.event.stopPropagation();
	            });
	            
	          valuePicker(addValueButton);


	          var clearFilterButton = filteredFieldsRoot.selectAll('span.close')
	            .data(function(d){return [d.chart];})
	            .enter()
	            .append('span')  
	            .classed({'close': true})
	            .on('click', function(chart){
	              chart.filterAll();
	              dc.redrawAll();
	              d3.event.stopPropagation();
	            })
	            .append('i')
	            .classed({'fa': true, 'fa-times': true});
	        }

	        return _chart;
	    };

	    function tryLabel(filterItem){
	      if (filterItem.chart.label && filterItem.chart.label() !== undefined){
	        return filterItem.chart.label()({key: filterItem.filterValue}) || "N/A";
	      } 
	      return filterItem.filterValue || "N/A";
	    }

	    function optionSort(a, b){
	      var aLabel = tryLabel(a);
	      var bLabel = tryLabel(b);

	      if (aLabel > bLabel) {
	        return 1;
	      }
	      if (aLabel < bLabel){
	        return -1;
	      }
	      return 0;
	    }

	    _chart._doRedraw = function(){
	        return _chart._doRender();
	    };

	    // Filter Menu
	    function filterMenu(parent, options){
	      var _parentElement;
	      if (parent.on === undefined) {
	        _parentElement = d3.select(parent);
	      } else {
	        _parentElement = parent;
	      } 
	      
	      var _dimensionListContainer = _parentElement.append('div')
	        .classed({'picker-choices': true, 'dimension-list-container': true});

	      _dimensionListContainer.append('div')
	        .classed('header', true)
	        .text('Add a Filter on')
	        .append('i')
	        .classed({'fa': true, 'fa-times': true})
	        .on('click', function(){

	          _dimensionListContainer.style('display', 'none');
	          _dimensionList.selectAll('div.picker-choices').style('display', 'none');
	          _dimensionList.selectAll('li.selected').classed('selected', false);
	          d3.event.stopPropagation();
	        });

	      var _dimensionList = _dimensionListContainer.append('ul')
	        .classed({'dimension-list': true});

	      var _dimensionOptions = _dimensionList.selectAll('li.dimension-option')
	          .data(options)
	        .enter().append('li')
	        .attr('class', function(d){
	          return (d.options && d.options.class);
	        })
	        .classed('dimension-option', true)
	        .text(function(d){return d.label;})
	        .on('click', function(d){
	          showValueOptions(this, _parentElement);
	          d3.event.stopPropagation();
	        })

	      valuePicker(_dimensionOptions);


	      _parentElement.on('click', function(){
	        blurMenus();
	        d3.select(this).select('.dimension-list-container').style("display", "block");
	        d3.event.stopPropagation();
	      });

	    }

	    function valuePicker(selection){

	      var _valueListContainer = selection.selectAll('div.value-list-container')
	          .data(function(d){return [d];})
	        .enter().append('div')
	        .classed({'picker-choices': true,'value-list-container': true});

	      _valueListContainer.selectAll('div.header')
	          .data(function(d){return [d];})
	        .enter().append('div')
	        .classed('header', true)
	        .text(function(d){return 'Choose a value for "' + d.label +'"';})
	        .append('i')
	        .classed({'fa': true, 'fa-times': true})
	        .on('click', function(){
	          _valueListContainer.style('display', 'none');
	          _valueList.selectAll('div.picker-choices').style('display', 'none');
	          _valueList.selectAll('li.selected').classed('selected', false);
	          d3.event.stopPropagation();
	        }); 

	      var _listFilterContainer = _valueListContainer
	        .append('div')
	        .classed('listFilterContainer', true);

	      _listFilterContainer
	        .append('i')
	        .classed('fa fa-2x fa-search', true);

	      _listFilterContainer
	          .data(function(d){return [d];})
	        .append('input')
	        .attr('placeholder','Filter the list below...')
	        .on("click", function(d) {
	          d3.event.stopPropagation();
	        })
	        .on('input', function(d){
	          that = this;
	          dc.events.trigger(function(){
	            selection.select('ul.'+dc.utils.nameToId(d.label)).selectAll('li.value-option')
	              .classed('hidden', function(d){
	                var re = new RegExp(that.value, 'i');
	                return this.textContent.search(re) < 0; 
	              });
	          }, 200);
	        });

	      var _valueList = _valueListContainer.selectAll('ul.value-list')
	          .data(function(d){return [d];})
	        .enter().append('ul')
	        .attr('class', function(d){return dc.utils.nameToId(d.label)})
	        .classed({'value-list': true});
	    
	      var _valueOptions = _valueList.selectAll('li.value-option')
	          .data(function(d){
	            return d.chart.group().top(Infinity)
	              .map(function(i){ return {chart: d.chart, filterValue: i.key};})
	              .filter(function(i){
	                return i.chart.filters().indexOf(i.filterValue) < 0;
	              })
	              .sort(optionSort);
	          })
	        .enter().append('li')
	        .text(function(d){return tryLabel(d);})
	        .classed('value-option', true)
	        .on('click', function(d){
	          d.chart.filter(d.filterValue);
	          dc.redrawAll();
	          d3.event.stopPropagation();
	        });
	        
	    }

	    function showValueOptions(element, parentElement){
	      var _element;
	      if (element.on === undefined) {
	        _element = d3.select(element);
	      } else {
	        _element = element;
	      } 
	      if (parentElement) {
	        parentElement.selectAll('ul.dimension-list .value-list-container').style('display', 'none');
	        parentElement.selectAll('ul.dimension-list li').classed('selected', false);
	      }  
	      else {
	        blurMenus();
	      }

	      _element.select('.value-list-container').style('display','block');
	      _element.classed('selected', true);
	    }

	    function blurMenus() {
	      d3.selectAll(".value-list-container")[0].forEach(function(valueOptionList) {
	        d3.select(valueOptionList).style('display', "none");
	      });

	      d3.select('.dimension-list-container').style("display", "none");

	    }

	    d3.select("html").on("click", function(){
	      d3.selectAll('.picker-choices').style('display', 'none');
	    })

	    return _chart.anchor(parent, chartGroup);
	  } 


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	var dc = __webpack_require__(51);

	module.exports = function (parent, chartGroup) {

	    var _chart = dc.baseMixin({});
	    var _defaultValue;
	    var _currentSelection;
	 
	    /**
	        #### .defaultValue(primitive)
	        Explicitly set default selection. If not set, defaults to the first item in the select options.

	    **/
	    _chart.defaultValue = function(_) {
	    	if (!arguments.length) return _defaultValue;
	    	_defaultValue = _;
	    	return _chart;
	    };


	    _chart.currentSelection = function(_) {
	      if(!arguments.length) return _currentSelection || _distinctDimensionValues()[0];
	      //TODO: add ability to make a selection
	    };
	    function _distinctDimensionValues() {
	      return _chart.group().all().map(function(o){return o.key;});
	    }

	    _chart._doRender = function () {

	    	_chart.root().classed('select-control', true);
	    	_chart.root().html('');

	    	var selectionList = _chart.root().append('select');

	    	if(_currentSelection === undefined) {
	    		if(_defaultValue === undefined) {
	    	    	_defaultValue = _distinctDimensionValues()[0];
	    		}
				_currentSelection = _defaultValue;
	    	}

	    	selectionList.selectAll('option')
	    	    .data(_distinctDimensionValues())
	    	  .enter().append('option')
	    	    .attr('selected', function(d){ return d === _currentSelection ? '' : null})
	    	    .text(function(d){return d})
	    	    .attr('value', function(d){return d;});

		    selectionList.on('change', function(){

		        _currentSelection = this.value;
	     		// Avoid double-firing _invokeFilteredListener that comes with _chart.filterAll();
	     		_chart.replaceFilter(this.value);

	     		dc.redrawAll();
		    });

	    };


	    _chart._doRedraw = function(){
	    	return _chart._doRender();
	    };

	    return _chart.anchor(parent, chartGroup);
	};


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	var $  = __webpack_require__(39);
	window.jQuery = $;
	var dc = __webpack_require__(51),
	    dynatable = __webpack_require__(81);


	module.exports = function(parent, chartGroup){

	  var _chart = dc.baseMixin({});
	  var _columns; 
	  var _dataTable;
	  var _settings;

	  /**
	      #### .columns({label: String, csvColumnName: String})
	      Explicitly set default selection. If not set, defaults to the first item in the select options.
	  
	  **/
	  _chart.columns = function(_) {
	    if (!arguments.length) return _columns;
	    _columns = _;
	    return _chart;
	  };

	  _chart.settings = function(_) {
	    if (!arguments.length) return _settings;
	    _settings = _;
	    return _chart;
	  };

	  _chart.dataTable = function() {
	    return _dataTable;
	  };

	  _chart._doRender = function() {
	    // Insert Table HTML into parent node
	    if (!_dataTable){
	      _chart.root().html("");
	      var table = _chart.root().append('table');
	      table.attr("class", "dc-datatable");
	      //id for the table is needed to allow for mutliple dynatables on one page
	      table.attr("id", parent.replace("#", "") + "-id"); 

	      var headerRow = table.append('thead').append('tr');
	      headerRow.selectAll('th')
	        .data(_columns).enter()
	          .append('th')
	          .attr("data-dynatable-column", function(d){return d.csvColumnName})
	          .style({"text-align": function(d){return d.alignment}})
	          .text(function(d){return d.label});

	      //wasnt what the best way would be to pass the readers and writers from aid-explorer-dashboard
	      var dynatableConfig = {
	          features: {
	              pushState: false,
	              search: true
	          },
	          inputs: {
	            paginationPrev: '<i class="fa fa-caret-square-o-left"></i>&#160;Previous',
	            paginationNext: 'Next&#160;<i class="fa fa-caret-square-o-right"></i>',
	            perPageText: 'records per page'
	          },
	          dataset: {
	              records: _chart.dimension().top(10),
	              perPageDefault: 10,
	              perPageOptions: [10, 50, 100, 200, 500]
	          }
	      };

	      $.extend(dynatableConfig, _settings);

	      // Initialize jQuery DataTable
	      _dataTable = $(parent + " table").dynatable(dynatableConfig).data('dynatable');
	    }  
	    //_chart._doRedraw(); 
	    RefreshTable(10);   
	  }

	  _chart._doRedraw = function(){
	    RefreshTable();
	  }

	  function RefreshTable(_) {
	    var top = (_ || Infinity);
	    dc.events.trigger(function () {
	        _dataTable.settings.dataset.originalRecords = _chart.dimension().top(top);
	        _dataTable.paginationPage.set(1);
	        _dataTable.process();
	    });
	  };

	  return _chart.anchor(parent, chartGroup);
	}

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	var dc = __webpack_require__(51);

	//This component will take a collection of dc charts as the input, 
	//and output a 508 compliant version of the charts using the chart data.
	module.exports = function(parent, chartGroup) {

		var _chart = dc.baseMixin({});
		var _hiddenClassName = 'hide-visually';

		//all of the charts to be translated to 508
		var _charts; 

		_chart._mandatoryAttributes(undefined);

		_chart.hiddenClassName = function(_) {
			if(!arguments.length) return _hiddenClassName;
			_hiddenClassName = _;
			return _chart;
		};

		_chart.charts = function(_) {
			if(!arguments.length) return _charts;
			_charts = _;
			return _chart;
		};

		_chart.refreshList = function() {
			_chart.root().html('');
			Object.keys(_charts).forEach(function(chartName) {
				_chart.root()
					.append("h2")
					.attr("tabindex", "0")
					.text(chartName);
				var dataList = _chart.root().append("ul").style("list-style-type", "none");
				var chartToHide = _charts[chartName].chart;
				var chartFormatter = _charts[chartName].formatter || function(k, v) {return k + " " + v;};

				//hide the chart from 508 reader
				chartToHide.root()
					.attr("aria-hidden", "true");

				//add the chart data to a list of data for 508 readers
				chartToHide.data().forEach(function(d) {

					//check for normal .data() values
					if(!d) {
						dataList.append("li").append("button")
							.text(chartFormatter("No Data", ""));
					}
					else if(d.key !== undefined && d.value != undefined) {
						var key = chartToHide.label()(d);
						var value = chartToHide.valueAccessor()(d);

						dataList.append("li").append("button")
							.on("click", function(){
								chartToHide.filter(d.key);
								dc.redrawAll();
							})
							.text(chartFormatter(key, value));
					}
					//check for .data() value from barchart
					else if(d.values !== undefined) {
						d.values.forEach(function(dNested){
							var dataObj = dNested.data;
							var key = chartToHide.label()(dataObj);
							var value;
							value = chartToHide.valueAccessor()(dataObj);

							dataList.append("li").append("button")
								.on("click", function(){
									chartToHide.filter(dataObj.key);
									dc.redrawAll();
								})
								.text(chartFormatter(key, value));
						});
						
					}
					//check for .data() value from treemap
					else if(d.depth !== undefined) {
						var dataObj = d;
						var key = dataObj.name;
						var value = dataObj.value;

						//add a level
						var newLevel = dataList.append("li");
						newLevel.append("h2").text("Top Level: " + dataObj.columnName)
						newLevel.append("h3").text(chartFormatter(key, value));
						var levelList = newLevel.append("ul").style("list-style-type", "none");
						//New structure for reader because of hierarchical data
						addDataNodesTreemap(dataObj, levelList);

					}
					//check for .data() value from sankey
					else if(d.links !== undefined) {
						var dataObj = d;
						var topLevelColumnName = dataObj.nodes[0].columnName;

						//only traverse from the top level down the tree
						dataObj.nodes.forEach(function(node) {
							if(node.columnName === topLevelColumnName) {
								var key = node.name;
								var value = node.value;

								//add a level
								var newLevel = dataList.append("li");
								newLevel.append("h2").text("Column: " + node.columnName);
								newLevel.append("h3").text(chartFormatter(key, value));
								var levelList = newLevel.append("ul").style("list-style-type", "none");
								addDataNodesSankey(node, levelList)
							}
						});
					}


				});

				function addDataNodesTreemap(dataObj, listSelector) {
					if(dataObj._children) {
						dataObj._children.forEach(function(childObj) {
							var key = childObj.name;
							var value = childObj.value;

							var newLevel = listSelector.append("li");
							newLevel.append("h2").text("Level: " + childObj.columnName);
							newLevel.append("h3").text(chartFormatter(key, value));
							
							if(childObj._children) {
								var levelList = newLevel.append("ul").style("list-style-type", "none");
								addDataNodesTreemap(childObj, levelList);
							}
						});
					}
					return;
				}

				function addDataNodesSankey(dataObj, listSelector) {
					dataObj.sourceLinks.forEach(function(linkToNextNode) {
						var targetNode = linkToNextNode.target;
						var key = targetNode.name;
						var value = targetNode.value;

						var newLevel = listSelector.append("li");
						newLevel.append("h2").text("Column: " + targetNode.columnName);
						newLevel.append("h3").text(chartFormatter(key, value));

						if(targetNode.sourceLinks.length > 0){
							var levelList = newLevel.append("ul").style("list-style-type", "none");
							addDataNodesSankey(targetNode, levelList);
						}
					});
				}
			
			});
		};



		_chart._doRender = function() {
			_chart.root().classed('audio-dash', true);
			_chart.root().classed(_hiddenClassName, true);

			_chart.refreshList();
		};

		_chart._doRedraw = function() {
			_chart.refreshList();
		};

		return _chart.anchor(parent, chartGroup);
	};

/***/ },
/* 49 */,
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function() {
		var list = [];
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
		return list;
	}

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	// Import DC and dependencies

	d3 = __webpack_require__(52);
	crossfilter = __webpack_require__(80);
	module.exports = __webpack_require__(77);


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function() {
	  var d3 = {
	    version: "3.4.13"
	  };
	  if (!Date.now) Date.now = function() {
	    return +new Date();
	  };
	  var d3_arraySlice = [].slice, d3_array = function(list) {
	    return d3_arraySlice.call(list);
	  };
	  var d3_document = document, d3_documentElement = d3_document.documentElement, d3_window = window;
	  try {
	    d3_array(d3_documentElement.childNodes)[0].nodeType;
	  } catch (e) {
	    d3_array = function(list) {
	      var i = list.length, array = new Array(i);
	      while (i--) array[i] = list[i];
	      return array;
	    };
	  }
	  try {
	    d3_document.createElement("div").style.setProperty("opacity", 0, "");
	  } catch (error) {
	    var d3_element_prototype = d3_window.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = d3_window.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
	    d3_element_prototype.setAttribute = function(name, value) {
	      d3_element_setAttribute.call(this, name, value + "");
	    };
	    d3_element_prototype.setAttributeNS = function(space, local, value) {
	      d3_element_setAttributeNS.call(this, space, local, value + "");
	    };
	    d3_style_prototype.setProperty = function(name, value, priority) {
	      d3_style_setProperty.call(this, name, value + "", priority);
	    };
	  }
	  d3.ascending = d3_ascending;
	  function d3_ascending(a, b) {
	    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	  }
	  d3.descending = function(a, b) {
	    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	  };
	  d3.min = function(array, f) {
	    var i = -1, n = array.length, a, b;
	    if (arguments.length === 1) {
	      while (++i < n && !((a = array[i]) != null && a <= a)) a = undefined;
	      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
	    } else {
	      while (++i < n && !((a = f.call(array, array[i], i)) != null && a <= a)) a = undefined;
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
	    }
	    return a;
	  };
	  d3.max = function(array, f) {
	    var i = -1, n = array.length, a, b;
	    if (arguments.length === 1) {
	      while (++i < n && !((a = array[i]) != null && a <= a)) a = undefined;
	      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
	    } else {
	      while (++i < n && !((a = f.call(array, array[i], i)) != null && a <= a)) a = undefined;
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
	    }
	    return a;
	  };
	  d3.extent = function(array, f) {
	    var i = -1, n = array.length, a, b, c;
	    if (arguments.length === 1) {
	      while (++i < n && !((a = c = array[i]) != null && a <= a)) a = c = undefined;
	      while (++i < n) if ((b = array[i]) != null) {
	        if (a > b) a = b;
	        if (c < b) c = b;
	      }
	    } else {
	      while (++i < n && !((a = c = f.call(array, array[i], i)) != null && a <= a)) a = undefined;
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
	        if (a > b) a = b;
	        if (c < b) c = b;
	      }
	    }
	    return [ a, c ];
	  };
	  function d3_number(x) {
	    return x === null ? NaN : +x;
	  }
	  function d3_numeric(x) {
	    return !isNaN(x);
	  }
	  d3.sum = function(array, f) {
	    var s = 0, n = array.length, a, i = -1;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = +array[i])) s += a;
	    } else {
	      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;
	    }
	    return s;
	  };
	  d3.mean = function(array, f) {
	    var s = 0, n = array.length, a, i = -1, j = n;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;
	    } else {
	      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;
	    }
	    return j ? s / j : undefined;
	  };
	  d3.quantile = function(values, p) {
	    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
	    return e ? v + e * (values[h] - v) : v;
	  };
	  d3.median = function(array, f) {
	    var numbers = [], n = array.length, a, i = -1;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);
	    } else {
	      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);
	    }
	    return numbers.length ? d3.quantile(numbers.sort(d3_ascending), .5) : undefined;
	  };
	  function d3_bisector(compare) {
	    return {
	      left: function(a, x, lo, hi) {
	        if (arguments.length < 3) lo = 0;
	        if (arguments.length < 4) hi = a.length;
	        while (lo < hi) {
	          var mid = lo + hi >>> 1;
	          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;
	        }
	        return lo;
	      },
	      right: function(a, x, lo, hi) {
	        if (arguments.length < 3) lo = 0;
	        if (arguments.length < 4) hi = a.length;
	        while (lo < hi) {
	          var mid = lo + hi >>> 1;
	          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;
	        }
	        return lo;
	      }
	    };
	  }
	  var d3_bisect = d3_bisector(d3_ascending);
	  d3.bisectLeft = d3_bisect.left;
	  d3.bisect = d3.bisectRight = d3_bisect.right;
	  d3.bisector = function(f) {
	    return d3_bisector(f.length === 1 ? function(d, x) {
	      return d3_ascending(f(d), x);
	    } : f);
	  };
	  d3.shuffle = function(array) {
	    var m = array.length, t, i;
	    while (m) {
	      i = Math.random() * m-- | 0;
	      t = array[m], array[m] = array[i], array[i] = t;
	    }
	    return array;
	  };
	  d3.permute = function(array, indexes) {
	    var i = indexes.length, permutes = new Array(i);
	    while (i--) permutes[i] = array[indexes[i]];
	    return permutes;
	  };
	  d3.pairs = function(array) {
	    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
	    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
	    return pairs;
	  };
	  d3.zip = function() {
	    if (!(n = arguments.length)) return [];
	    for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(m); ++i < m; ) {
	      for (var j = -1, n, zip = zips[i] = new Array(n); ++j < n; ) {
	        zip[j] = arguments[j][i];
	      }
	    }
	    return zips;
	  };
	  function d3_zipLength(d) {
	    return d.length;
	  }
	  d3.transpose = function(matrix) {
	    return d3.zip.apply(d3, matrix);
	  };
	  d3.keys = function(map) {
	    var keys = [];
	    for (var key in map) keys.push(key);
	    return keys;
	  };
	  d3.values = function(map) {
	    var values = [];
	    for (var key in map) values.push(map[key]);
	    return values;
	  };
	  d3.entries = function(map) {
	    var entries = [];
	    for (var key in map) entries.push({
	      key: key,
	      value: map[key]
	    });
	    return entries;
	  };
	  d3.merge = function(arrays) {
	    var n = arrays.length, m, i = -1, j = 0, merged, array;
	    while (++i < n) j += arrays[i].length;
	    merged = new Array(j);
	    while (--n >= 0) {
	      array = arrays[n];
	      m = array.length;
	      while (--m >= 0) {
	        merged[--j] = array[m];
	      }
	    }
	    return merged;
	  };
	  var abs = Math.abs;
	  d3.range = function(start, stop, step) {
	    if (arguments.length < 3) {
	      step = 1;
	      if (arguments.length < 2) {
	        stop = start;
	        start = 0;
	      }
	    }
	    if ((stop - start) / step === Infinity) throw new Error("infinite range");
	    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
	    start *= k, stop *= k, step *= k;
	    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
	    return range;
	  };
	  function d3_range_integerScale(x) {
	    var k = 1;
	    while (x * k % 1) k *= 10;
	    return k;
	  }
	  function d3_class(ctor, properties) {
	    for (var key in properties) {
	      Object.defineProperty(ctor.prototype, key, {
	        value: properties[key],
	        enumerable: false
	      });
	    }
	  }
	  d3.map = function(object) {
	    var map = new d3_Map();
	    if (object instanceof d3_Map) object.forEach(function(key, value) {
	      map.set(key, value);
	    }); else for (var key in object) map.set(key, object[key]);
	    return map;
	  };
	  function d3_Map() {
	    this._ = Object.create(null);
	  }
	  var d3_map_proto = "__proto__", d3_map_zero = "\x00";
	  d3_class(d3_Map, {
	    has: d3_map_has,
	    get: function(key) {
	      return this._[d3_map_escape(key)];
	    },
	    set: function(key, value) {
	      return this._[d3_map_escape(key)] = value;
	    },
	    remove: d3_map_remove,
	    keys: d3_map_keys,
	    values: function() {
	      var values = [];
	      for (var key in this._) values.push(this._[key]);
	      return values;
	    },
	    entries: function() {
	      var entries = [];
	      for (var key in this._) entries.push({
	        key: d3_map_unescape(key),
	        value: this._[key]
	      });
	      return entries;
	    },
	    size: d3_map_size,
	    empty: d3_map_empty,
	    forEach: function(f) {
	      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);
	    }
	  });
	  function d3_map_escape(key) {
	    return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
	  }
	  function d3_map_unescape(key) {
	    return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
	  }
	  function d3_map_has(key) {
	    return d3_map_escape(key) in this._;
	  }
	  function d3_map_remove(key) {
	    return (key = d3_map_escape(key)) in this._ && delete this._[key];
	  }
	  function d3_map_keys() {
	    var keys = [];
	    for (var key in this._) keys.push(d3_map_unescape(key));
	    return keys;
	  }
	  function d3_map_size() {
	    var size = 0;
	    for (var key in this._) ++size;
	    return size;
	  }
	  function d3_map_empty() {
	    for (var key in this._) return false;
	    return true;
	  }
	  d3.nest = function() {
	    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
	    function map(mapType, array, depth) {
	      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
	      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
	      while (++i < n) {
	        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
	          values.push(object);
	        } else {
	          valuesByKey.set(keyValue, [ object ]);
	        }
	      }
	      if (mapType) {
	        object = mapType();
	        setter = function(keyValue, values) {
	          object.set(keyValue, map(mapType, values, depth));
	        };
	      } else {
	        object = {};
	        setter = function(keyValue, values) {
	          object[keyValue] = map(mapType, values, depth);
	        };
	      }
	      valuesByKey.forEach(setter);
	      return object;
	    }
	    function entries(map, depth) {
	      if (depth >= keys.length) return map;
	      var array = [], sortKey = sortKeys[depth++];
	      map.forEach(function(key, keyMap) {
	        array.push({
	          key: key,
	          values: entries(keyMap, depth)
	        });
	      });
	      return sortKey ? array.sort(function(a, b) {
	        return sortKey(a.key, b.key);
	      }) : array;
	    }
	    nest.map = function(array, mapType) {
	      return map(mapType, array, 0);
	    };
	    nest.entries = function(array) {
	      return entries(map(d3.map, array, 0), 0);
	    };
	    nest.key = function(d) {
	      keys.push(d);
	      return nest;
	    };
	    nest.sortKeys = function(order) {
	      sortKeys[keys.length - 1] = order;
	      return nest;
	    };
	    nest.sortValues = function(order) {
	      sortValues = order;
	      return nest;
	    };
	    nest.rollup = function(f) {
	      rollup = f;
	      return nest;
	    };
	    return nest;
	  };
	  d3.set = function(array) {
	    var set = new d3_Set();
	    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
	    return set;
	  };
	  function d3_Set() {
	    this._ = Object.create(null);
	  }
	  d3_class(d3_Set, {
	    has: d3_map_has,
	    add: function(key) {
	      this._[d3_map_escape(key += "")] = true;
	      return key;
	    },
	    remove: d3_map_remove,
	    values: d3_map_keys,
	    size: d3_map_size,
	    empty: d3_map_empty,
	    forEach: function(f) {
	      for (var key in this._) f.call(this, d3_map_unescape(key));
	    }
	  });
	  d3.behavior = {};
	  d3.rebind = function(target, source) {
	    var i = 1, n = arguments.length, method;
	    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
	    return target;
	  };
	  function d3_rebind(target, source, method) {
	    return function() {
	      var value = method.apply(source, arguments);
	      return value === source ? target : value;
	    };
	  }
	  function d3_vendorSymbol(object, name) {
	    if (name in object) return name;
	    name = name.charAt(0).toUpperCase() + name.slice(1);
	    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
	      var prefixName = d3_vendorPrefixes[i] + name;
	      if (prefixName in object) return prefixName;
	    }
	  }
	  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
	  function d3_noop() {}
	  d3.dispatch = function() {
	    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
	    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
	    return dispatch;
	  };
	  function d3_dispatch() {}
	  d3_dispatch.prototype.on = function(type, listener) {
	    var i = type.indexOf("."), name = "";
	    if (i >= 0) {
	      name = type.slice(i + 1);
	      type = type.slice(0, i);
	    }
	    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
	    if (arguments.length === 2) {
	      if (listener == null) for (type in this) {
	        if (this.hasOwnProperty(type)) this[type].on(name, null);
	      }
	      return this;
	    }
	  };
	  function d3_dispatch_event(dispatch) {
	    var listeners = [], listenerByName = new d3_Map();
	    function event() {
	      var z = listeners, i = -1, n = z.length, l;
	      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
	      return dispatch;
	    }
	    event.on = function(name, listener) {
	      var l = listenerByName.get(name), i;
	      if (arguments.length < 2) return l && l.on;
	      if (l) {
	        l.on = null;
	        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
	        listenerByName.remove(name);
	      }
	      if (listener) listeners.push(listenerByName.set(name, {
	        on: listener
	      }));
	      return dispatch;
	    };
	    return event;
	  }
	  d3.event = null;
	  function d3_eventPreventDefault() {
	    d3.event.preventDefault();
	  }
	  function d3_eventSource() {
	    var e = d3.event, s;
	    while (s = e.sourceEvent) e = s;
	    return e;
	  }
	  function d3_eventDispatch(target) {
	    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
	    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
	    dispatch.of = function(thiz, argumentz) {
	      return function(e1) {
	        try {
	          var e0 = e1.sourceEvent = d3.event;
	          e1.target = target;
	          d3.event = e1;
	          dispatch[e1.type].apply(thiz, argumentz);
	        } finally {
	          d3.event = e0;
	        }
	      };
	    };
	    return dispatch;
	  }
	  d3.requote = function(s) {
	    return s.replace(d3_requote_re, "\\$&");
	  };
	  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
	  var d3_subclass = {}.__proto__ ? function(object, prototype) {
	    object.__proto__ = prototype;
	  } : function(object, prototype) {
	    for (var property in prototype) object[property] = prototype[property];
	  };
	  function d3_selection(groups) {
	    d3_subclass(groups, d3_selectionPrototype);
	    return groups;
	  }
	  var d3_select = function(s, n) {
	    return n.querySelector(s);
	  }, d3_selectAll = function(s, n) {
	    return n.querySelectorAll(s);
	  }, d3_selectMatcher = d3_documentElement.matches || d3_documentElement[d3_vendorSymbol(d3_documentElement, "matchesSelector")], d3_selectMatches = function(n, s) {
	    return d3_selectMatcher.call(n, s);
	  };
	  if (typeof Sizzle === "function") {
	    d3_select = function(s, n) {
	      return Sizzle(s, n)[0] || null;
	    };
	    d3_selectAll = Sizzle;
	    d3_selectMatches = Sizzle.matchesSelector;
	  }
	  d3.selection = function() {
	    return d3_selectionRoot;
	  };
	  var d3_selectionPrototype = d3.selection.prototype = [];
	  d3_selectionPrototype.select = function(selector) {
	    var subgroups = [], subgroup, subnode, group, node;
	    selector = d3_selection_selector(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = (group = this[j]).parentNode;
	      for (var i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
	          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_selector(selector) {
	    return typeof selector === "function" ? selector : function() {
	      return d3_select(selector, this);
	    };
	  }
	  d3_selectionPrototype.selectAll = function(selector) {
	    var subgroups = [], subgroup, node;
	    selector = d3_selection_selectorAll(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
	          subgroup.parentNode = node;
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_selectorAll(selector) {
	    return typeof selector === "function" ? selector : function() {
	      return d3_selectAll(selector, this);
	    };
	  }
	  var d3_nsPrefix = {
	    svg: "http://www.w3.org/2000/svg",
	    xhtml: "http://www.w3.org/1999/xhtml",
	    xlink: "http://www.w3.org/1999/xlink",
	    xml: "http://www.w3.org/XML/1998/namespace",
	    xmlns: "http://www.w3.org/2000/xmlns/"
	  };
	  d3.ns = {
	    prefix: d3_nsPrefix,
	    qualify: function(name) {
	      var i = name.indexOf(":"), prefix = name;
	      if (i >= 0) {
	        prefix = name.slice(0, i);
	        name = name.slice(i + 1);
	      }
	      return d3_nsPrefix.hasOwnProperty(prefix) ? {
	        space: d3_nsPrefix[prefix],
	        local: name
	      } : name;
	    }
	  };
	  d3_selectionPrototype.attr = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") {
	        var node = this.node();
	        name = d3.ns.qualify(name);
	        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
	      }
	      for (value in name) this.each(d3_selection_attr(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_attr(name, value));
	  };
	  function d3_selection_attr(name, value) {
	    name = d3.ns.qualify(name);
	    function attrNull() {
	      this.removeAttribute(name);
	    }
	    function attrNullNS() {
	      this.removeAttributeNS(name.space, name.local);
	    }
	    function attrConstant() {
	      this.setAttribute(name, value);
	    }
	    function attrConstantNS() {
	      this.setAttributeNS(name.space, name.local, value);
	    }
	    function attrFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
	    }
	    function attrFunctionNS() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
	    }
	    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
	  }
	  function d3_collapse(s) {
	    return s.trim().replace(/\s+/g, " ");
	  }
	  d3_selectionPrototype.classed = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") {
	        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
	        if (value = node.classList) {
	          while (++i < n) if (!value.contains(name[i])) return false;
	        } else {
	          value = node.getAttribute("class");
	          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
	        }
	        return true;
	      }
	      for (value in name) this.each(d3_selection_classed(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_classed(name, value));
	  };
	  function d3_selection_classedRe(name) {
	    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
	  }
	  function d3_selection_classes(name) {
	    return (name + "").trim().split(/^|\s+/);
	  }
	  function d3_selection_classed(name, value) {
	    name = d3_selection_classes(name).map(d3_selection_classedName);
	    var n = name.length;
	    function classedConstant() {
	      var i = -1;
	      while (++i < n) name[i](this, value);
	    }
	    function classedFunction() {
	      var i = -1, x = value.apply(this, arguments);
	      while (++i < n) name[i](this, x);
	    }
	    return typeof value === "function" ? classedFunction : classedConstant;
	  }
	  function d3_selection_classedName(name) {
	    var re = d3_selection_classedRe(name);
	    return function(node, value) {
	      if (c = node.classList) return value ? c.add(name) : c.remove(name);
	      var c = node.getAttribute("class") || "";
	      if (value) {
	        re.lastIndex = 0;
	        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
	      } else {
	        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
	      }
	    };
	  }
	  d3_selectionPrototype.style = function(name, value, priority) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof name !== "string") {
	        if (n < 2) value = "";
	        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
	        return this;
	      }
	      if (n < 2) return d3_window.getComputedStyle(this.node(), null).getPropertyValue(name);
	      priority = "";
	    }
	    return this.each(d3_selection_style(name, value, priority));
	  };
	  function d3_selection_style(name, value, priority) {
	    function styleNull() {
	      this.style.removeProperty(name);
	    }
	    function styleConstant() {
	      this.style.setProperty(name, value, priority);
	    }
	    function styleFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
	    }
	    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
	  }
	  d3_selectionPrototype.property = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") return this.node()[name];
	      for (value in name) this.each(d3_selection_property(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_property(name, value));
	  };
	  function d3_selection_property(name, value) {
	    function propertyNull() {
	      delete this[name];
	    }
	    function propertyConstant() {
	      this[name] = value;
	    }
	    function propertyFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) delete this[name]; else this[name] = x;
	    }
	    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
	  }
	  d3_selectionPrototype.text = function(value) {
	    return arguments.length ? this.each(typeof value === "function" ? function() {
	      var v = value.apply(this, arguments);
	      this.textContent = v == null ? "" : v;
	    } : value == null ? function() {
	      this.textContent = "";
	    } : function() {
	      this.textContent = value;
	    }) : this.node().textContent;
	  };
	  d3_selectionPrototype.html = function(value) {
	    return arguments.length ? this.each(typeof value === "function" ? function() {
	      var v = value.apply(this, arguments);
	      this.innerHTML = v == null ? "" : v;
	    } : value == null ? function() {
	      this.innerHTML = "";
	    } : function() {
	      this.innerHTML = value;
	    }) : this.node().innerHTML;
	  };
	  d3_selectionPrototype.append = function(name) {
	    name = d3_selection_creator(name);
	    return this.select(function() {
	      return this.appendChild(name.apply(this, arguments));
	    });
	  };
	  function d3_selection_creator(name) {
	    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? function() {
	      return this.ownerDocument.createElementNS(name.space, name.local);
	    } : function() {
	      return this.ownerDocument.createElementNS(this.namespaceURI, name);
	    };
	  }
	  d3_selectionPrototype.insert = function(name, before) {
	    name = d3_selection_creator(name);
	    before = d3_selection_selector(before);
	    return this.select(function() {
	      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
	    });
	  };
	  d3_selectionPrototype.remove = function() {
	    return this.each(function() {
	      var parent = this.parentNode;
	      if (parent) parent.removeChild(this);
	    });
	  };
	  d3_selectionPrototype.data = function(value, key) {
	    var i = -1, n = this.length, group, node;
	    if (!arguments.length) {
	      value = new Array(n = (group = this[0]).length);
	      while (++i < n) {
	        if (node = group[i]) {
	          value[i] = node.__data__;
	        }
	      }
	      return value;
	    }
	    function bind(group, groupData) {
	      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
	      if (key) {
	        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;
	        for (i = -1; ++i < n; ) {
	          if (nodeByKeyValue.has(keyValue = key.call(node = group[i], node.__data__, i))) {
	            exitNodes[i] = node;
	          } else {
	            nodeByKeyValue.set(keyValue, node);
	          }
	          keyValues[i] = keyValue;
	        }
	        for (i = -1; ++i < m; ) {
	          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {
	            enterNodes[i] = d3_selection_dataNode(nodeData);
	          } else if (node !== true) {
	            updateNodes[i] = node;
	            node.__data__ = nodeData;
	          }
	          nodeByKeyValue.set(keyValue, true);
	        }
	        for (i = -1; ++i < n; ) {
	          if (nodeByKeyValue.get(keyValues[i]) !== true) {
	            exitNodes[i] = group[i];
	          }
	        }
	      } else {
	        for (i = -1; ++i < n0; ) {
	          node = group[i];
	          nodeData = groupData[i];
	          if (node) {
	            node.__data__ = nodeData;
	            updateNodes[i] = node;
	          } else {
	            enterNodes[i] = d3_selection_dataNode(nodeData);
	          }
	        }
	        for (;i < m; ++i) {
	          enterNodes[i] = d3_selection_dataNode(groupData[i]);
	        }
	        for (;i < n; ++i) {
	          exitNodes[i] = group[i];
	        }
	      }
	      enterNodes.update = updateNodes;
	      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
	      enter.push(enterNodes);
	      update.push(updateNodes);
	      exit.push(exitNodes);
	    }
	    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
	    if (typeof value === "function") {
	      while (++i < n) {
	        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
	      }
	    } else {
	      while (++i < n) {
	        bind(group = this[i], value);
	      }
	    }
	    update.enter = function() {
	      return enter;
	    };
	    update.exit = function() {
	      return exit;
	    };
	    return update;
	  };
	  function d3_selection_dataNode(data) {
	    return {
	      __data__: data
	    };
	  }
	  d3_selectionPrototype.datum = function(value) {
	    return arguments.length ? this.property("__data__", value) : this.property("__data__");
	  };
	  d3_selectionPrototype.filter = function(filter) {
	    var subgroups = [], subgroup, group, node;
	    if (typeof filter !== "function") filter = d3_selection_filter(filter);
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = (group = this[j]).parentNode;
	      for (var i = 0, n = group.length; i < n; i++) {
	        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
	          subgroup.push(node);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_filter(selector) {
	    return function() {
	      return d3_selectMatches(this, selector);
	    };
	  }
	  d3_selectionPrototype.order = function() {
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
	        if (node = group[i]) {
	          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
	          next = node;
	        }
	      }
	    }
	    return this;
	  };
	  d3_selectionPrototype.sort = function(comparator) {
	    comparator = d3_selection_sortComparator.apply(this, arguments);
	    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
	    return this.order();
	  };
	  function d3_selection_sortComparator(comparator) {
	    if (!arguments.length) comparator = d3_ascending;
	    return function(a, b) {
	      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
	    };
	  }
	  d3_selectionPrototype.each = function(callback) {
	    return d3_selection_each(this, function(node, i, j) {
	      callback.call(node, node.__data__, i, j);
	    });
	  };
	  function d3_selection_each(groups, callback) {
	    for (var j = 0, m = groups.length; j < m; j++) {
	      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
	        if (node = group[i]) callback(node, i, j);
	      }
	    }
	    return groups;
	  }
	  d3_selectionPrototype.call = function(callback) {
	    var args = d3_array(arguments);
	    callback.apply(args[0] = this, args);
	    return this;
	  };
	  d3_selectionPrototype.empty = function() {
	    return !this.node();
	  };
	  d3_selectionPrototype.node = function() {
	    for (var j = 0, m = this.length; j < m; j++) {
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        var node = group[i];
	        if (node) return node;
	      }
	    }
	    return null;
	  };
	  d3_selectionPrototype.size = function() {
	    var n = 0;
	    d3_selection_each(this, function() {
	      ++n;
	    });
	    return n;
	  };
	  function d3_selection_enter(selection) {
	    d3_subclass(selection, d3_selection_enterPrototype);
	    return selection;
	  }
	  var d3_selection_enterPrototype = [];
	  d3.selection.enter = d3_selection_enter;
	  d3.selection.enter.prototype = d3_selection_enterPrototype;
	  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
	  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
	  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
	  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
	  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
	  d3_selection_enterPrototype.select = function(selector) {
	    var subgroups = [], subgroup, subnode, upgroup, group, node;
	    for (var j = -1, m = this.length; ++j < m; ) {
	      upgroup = (group = this[j]).update;
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = group.parentNode;
	      for (var i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
	          subnode.__data__ = node.__data__;
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  d3_selection_enterPrototype.insert = function(name, before) {
	    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
	    return d3_selectionPrototype.insert.call(this, name, before);
	  };
	  function d3_selection_enterInsertBefore(enter) {
	    var i0, j0;
	    return function(d, i, j) {
	      var group = enter[j].update, n = group.length, node;
	      if (j != j0) j0 = j, i0 = 0;
	      if (i >= i0) i0 = i + 1;
	      while (!(node = group[i0]) && ++i0 < n) ;
	      return node;
	    };
	  }
	  d3_selectionPrototype.transition = function() {
	    var id = d3_transitionInheritId || ++d3_transitionId, subgroups = [], subgroup, node, transition = d3_transitionInherit || {
	      time: Date.now(),
	      ease: d3_ease_cubicInOut,
	      delay: 0,
	      duration: 250
	    };
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) d3_transitionNode(node, i, id, transition);
	        subgroup.push(node);
	      }
	    }
	    return d3_transition(subgroups, id);
	  };
	  d3_selectionPrototype.interrupt = function() {
	    return this.each(d3_selection_interrupt);
	  };
	  function d3_selection_interrupt() {
	    var lock = this.__transition__;
	    if (lock) ++lock.active;
	  }
	  d3.select = function(node) {
	    var group = [ typeof node === "string" ? d3_select(node, d3_document) : node ];
	    group.parentNode = d3_documentElement;
	    return d3_selection([ group ]);
	  };
	  d3.selectAll = function(nodes) {
	    var group = d3_array(typeof nodes === "string" ? d3_selectAll(nodes, d3_document) : nodes);
	    group.parentNode = d3_documentElement;
	    return d3_selection([ group ]);
	  };
	  var d3_selectionRoot = d3.select(d3_documentElement);
	  d3_selectionPrototype.on = function(type, listener, capture) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof type !== "string") {
	        if (n < 2) listener = false;
	        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
	        return this;
	      }
	      if (n < 2) return (n = this.node()["__on" + type]) && n._;
	      capture = false;
	    }
	    return this.each(d3_selection_on(type, listener, capture));
	  };
	  function d3_selection_on(type, listener, capture) {
	    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
	    if (i > 0) type = type.slice(0, i);
	    var filter = d3_selection_onFilters.get(type);
	    if (filter) type = filter, wrap = d3_selection_onFilter;
	    function onRemove() {
	      var l = this[name];
	      if (l) {
	        this.removeEventListener(type, l, l.$);
	        delete this[name];
	      }
	    }
	    function onAdd() {
	      var l = wrap(listener, d3_array(arguments));
	      onRemove.call(this);
	      this.addEventListener(type, this[name] = l, l.$ = capture);
	      l._ = listener;
	    }
	    function removeAll() {
	      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
	      for (var name in this) {
	        if (match = name.match(re)) {
	          var l = this[name];
	          this.removeEventListener(match[1], l, l.$);
	          delete this[name];
	        }
	      }
	    }
	    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
	  }
	  var d3_selection_onFilters = d3.map({
	    mouseenter: "mouseover",
	    mouseleave: "mouseout"
	  });
	  d3_selection_onFilters.forEach(function(k) {
	    if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
	  });
	  function d3_selection_onListener(listener, argumentz) {
	    return function(e) {
	      var o = d3.event;
	      d3.event = e;
	      argumentz[0] = this.__data__;
	      try {
	        listener.apply(this, argumentz);
	      } finally {
	        d3.event = o;
	      }
	    };
	  }
	  function d3_selection_onFilter(listener, argumentz) {
	    var l = d3_selection_onListener(listener, argumentz);
	    return function(e) {
	      var target = this, related = e.relatedTarget;
	      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
	        l.call(target, e);
	      }
	    };
	  }
	  var d3_event_dragSelect = "onselectstart" in d3_document ? null : d3_vendorSymbol(d3_documentElement.style, "userSelect"), d3_event_dragId = 0;
	  function d3_event_dragSuppress() {
	    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
	    if (d3_event_dragSelect) {
	      var style = d3_documentElement.style, select = style[d3_event_dragSelect];
	      style[d3_event_dragSelect] = "none";
	    }
	    return function(suppressClick) {
	      w.on(name, null);
	      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
	      if (suppressClick) {
	        function off() {
	          w.on(click, null);
	        }
	        w.on(click, function() {
	          d3_eventPreventDefault();
	          off();
	        }, true);
	        setTimeout(off, 0);
	      }
	    };
	  }
	  d3.mouse = function(container) {
	    return d3_mousePoint(container, d3_eventSource());
	  };
	  var d3_mouse_bug44083 = /WebKit/.test(d3_window.navigator.userAgent) ? -1 : 0;
	  function d3_mousePoint(container, e) {
	    if (e.changedTouches) e = e.changedTouches[0];
	    var svg = container.ownerSVGElement || container;
	    if (svg.createSVGPoint) {
	      var point = svg.createSVGPoint();
	      if (d3_mouse_bug44083 < 0 && (d3_window.scrollX || d3_window.scrollY)) {
	        svg = d3.select("body").append("svg").style({
	          position: "absolute",
	          top: 0,
	          left: 0,
	          margin: 0,
	          padding: 0,
	          border: "none"
	        }, "important");
	        var ctm = svg[0][0].getScreenCTM();
	        d3_mouse_bug44083 = !(ctm.f || ctm.e);
	        svg.remove();
	      }
	      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, 
	      point.y = e.clientY;
	      point = point.matrixTransform(container.getScreenCTM().inverse());
	      return [ point.x, point.y ];
	    }
	    var rect = container.getBoundingClientRect();
	    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
	  }
	  d3.touch = function(container, touches, identifier) {
	    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
	    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
	      if ((touch = touches[i]).identifier === identifier) {
	        return d3_mousePoint(container, touch);
	      }
	    }
	  };
	  d3.behavior.drag = function() {
	    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_behavior_dragMouseSubject, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_behavior_dragTouchSubject, "touchmove", "touchend");
	    function drag() {
	      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
	    }
	    function dragstart(id, position, subject, move, end) {
	      return function() {
	        var that = this, target = d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d3.select(subject()).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(), position0 = position(parent, dragId);
	        if (origin) {
	          dragOffset = origin.apply(that, arguments);
	          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];
	        } else {
	          dragOffset = [ 0, 0 ];
	        }
	        dispatch({
	          type: "dragstart"
	        });
	        function moved() {
	          var position1 = position(parent, dragId), dx, dy;
	          if (!position1) return;
	          dx = position1[0] - position0[0];
	          dy = position1[1] - position0[1];
	          dragged |= dx | dy;
	          position0 = position1;
	          dispatch({
	            type: "drag",
	            x: position1[0] + dragOffset[0],
	            y: position1[1] + dragOffset[1],
	            dx: dx,
	            dy: dy
	          });
	        }
	        function ended() {
	          if (!position(parent, dragId)) return;
	          dragSubject.on(move + dragName, null).on(end + dragName, null);
	          dragRestore(dragged && d3.event.target === target);
	          dispatch({
	            type: "dragend"
	          });
	        }
	      };
	    }
	    drag.origin = function(x) {
	      if (!arguments.length) return origin;
	      origin = x;
	      return drag;
	    };
	    return d3.rebind(drag, event, "on");
	  };
	  function d3_behavior_dragTouchId() {
	    return d3.event.changedTouches[0].identifier;
	  }
	  function d3_behavior_dragTouchSubject() {
	    return d3.event.target;
	  }
	  function d3_behavior_dragMouseSubject() {
	    return d3_window;
	  }
	  d3.touches = function(container, touches) {
	    if (arguments.length < 2) touches = d3_eventSource().touches;
	    return touches ? d3_array(touches).map(function(touch) {
	      var point = d3_mousePoint(container, touch);
	      point.identifier = touch.identifier;
	      return point;
	    }) : [];
	  };
	  var π = Math.PI, τ = 2 * π, halfπ = π / 2, ε = 1e-6, ε2 = ε * ε, d3_radians = π / 180, d3_degrees = 180 / π;
	  function d3_sgn(x) {
	    return x > 0 ? 1 : x < 0 ? -1 : 0;
	  }
	  function d3_cross2d(a, b, c) {
	    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
	  }
	  function d3_acos(x) {
	    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
	  }
	  function d3_asin(x) {
	    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
	  }
	  function d3_sinh(x) {
	    return ((x = Math.exp(x)) - 1 / x) / 2;
	  }
	  function d3_cosh(x) {
	    return ((x = Math.exp(x)) + 1 / x) / 2;
	  }
	  function d3_tanh(x) {
	    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
	  }
	  function d3_haversin(x) {
	    return (x = Math.sin(x / 2)) * x;
	  }
	  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
	  d3.interpolateZoom = function(p0, p1) {
	    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2];
	    var dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1), dr = r1 - r0, S = (dr || Math.log(w1 / w0)) / ρ;
	    function interpolate(t) {
	      var s = t * S;
	      if (dr) {
	        var coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
	        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];
	      }
	      return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * s) ];
	    }
	    interpolate.duration = S * 1e3;
	    return interpolate;
	  };
	  d3.behavior.zoom = function() {
	    var view = {
	      x: 0,
	      y: 0,
	      k: 1
	    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
	    function zoom(g) {
	      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
	    }
	    zoom.event = function(g) {
	      g.each(function() {
	        var dispatch = event.of(this, arguments), view1 = view;
	        if (d3_transitionInheritId) {
	          d3.select(this).transition().each("start.zoom", function() {
	            view = this.__chart__ || {
	              x: 0,
	              y: 0,
	              k: 1
	            };
	            zoomstarted(dispatch);
	          }).tween("zoom:zoom", function() {
	            var dx = size[0], dy = size[1], cx = dx / 2, cy = dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
	            return function(t) {
	              var l = i(t), k = dx / l[2];
	              this.__chart__ = view = {
	                x: cx - l[0] * k,
	                y: cy - l[1] * k,
	                k: k
	              };
	              zoomed(dispatch);
	            };
	          }).each("end.zoom", function() {
	            zoomended(dispatch);
	          });
	        } else {
	          this.__chart__ = view;
	          zoomstarted(dispatch);
	          zoomed(dispatch);
	          zoomended(dispatch);
	        }
	      });
	    };
	    zoom.translate = function(_) {
	      if (!arguments.length) return [ view.x, view.y ];
	      view = {
	        x: +_[0],
	        y: +_[1],
	        k: view.k
	      };
	      rescale();
	      return zoom;
	    };
	    zoom.scale = function(_) {
	      if (!arguments.length) return view.k;
	      view = {
	        x: view.x,
	        y: view.y,
	        k: +_
	      };
	      rescale();
	      return zoom;
	    };
	    zoom.scaleExtent = function(_) {
	      if (!arguments.length) return scaleExtent;
	      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.center = function(_) {
	      if (!arguments.length) return center;
	      center = _ && [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.size = function(_) {
	      if (!arguments.length) return size;
	      size = _ && [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.x = function(z) {
	      if (!arguments.length) return x1;
	      x1 = z;
	      x0 = z.copy();
	      view = {
	        x: 0,
	        y: 0,
	        k: 1
	      };
	      return zoom;
	    };
	    zoom.y = function(z) {
	      if (!arguments.length) return y1;
	      y1 = z;
	      y0 = z.copy();
	      view = {
	        x: 0,
	        y: 0,
	        k: 1
	      };
	      return zoom;
	    };
	    function location(p) {
	      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
	    }
	    function point(l) {
	      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
	    }
	    function scaleTo(s) {
	      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
	    }
	    function translateTo(p, l) {
	      l = point(l);
	      view.x += p[0] - l[0];
	      view.y += p[1] - l[1];
	    }
	    function rescale() {
	      if (x1) x1.domain(x0.range().map(function(x) {
	        return (x - view.x) / view.k;
	      }).map(x0.invert));
	      if (y1) y1.domain(y0.range().map(function(y) {
	        return (y - view.y) / view.k;
	      }).map(y0.invert));
	    }
	    function zoomstarted(dispatch) {
	      dispatch({
	        type: "zoomstart"
	      });
	    }
	    function zoomed(dispatch) {
	      rescale();
	      dispatch({
	        type: "zoom",
	        scale: view.k,
	        translate: [ view.x, view.y ]
	      });
	    }
	    function zoomended(dispatch) {
	      dispatch({
	        type: "zoomend"
	      });
	    }
	    function mousedowned() {
	      var that = this, target = d3.event.target, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress();
	      d3_selection_interrupt.call(that);
	      zoomstarted(dispatch);
	      function moved() {
	        dragged = 1;
	        translateTo(d3.mouse(that), location0);
	        zoomed(dispatch);
	      }
	      function ended() {
	        subject.on(mousemove, null).on(mouseup, null);
	        dragRestore(dragged && d3.event.target === target);
	        zoomended(dispatch);
	      }
	    }
	    function touchstarted() {
	      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress();
	      d3_selection_interrupt.call(that);
	      started();
	      zoomstarted(dispatch);
	      subject.on(mousedown, null).on(touchstart, started);
	      function relocate() {
	        var touches = d3.touches(that);
	        scale0 = view.k;
	        touches.forEach(function(t) {
	          if (t.identifier in locations0) locations0[t.identifier] = location(t);
	        });
	        return touches;
	      }
	      function started() {
	        var target = d3.event.target;
	        d3.select(target).on(touchmove, moved).on(touchend, ended);
	        targets.push(target);
	        var changed = d3.event.changedTouches;
	        for (var i = 0, n = changed.length; i < n; ++i) {
	          locations0[changed[i].identifier] = null;
	        }
	        var touches = relocate(), now = Date.now();
	        if (touches.length === 1) {
	          if (now - touchtime < 500) {
	            var p = touches[0], l = locations0[p.identifier];
	            scaleTo(view.k * 2);
	            translateTo(p, l);
	            d3_eventPreventDefault();
	            zoomed(dispatch);
	          }
	          touchtime = now;
	        } else if (touches.length > 1) {
	          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
	          distance0 = dx * dx + dy * dy;
	        }
	      }
	      function moved() {
	        var touches = d3.touches(that), p0, l0, p1, l1;
	        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
	          p1 = touches[i];
	          if (l1 = locations0[p1.identifier]) {
	            if (l0) break;
	            p0 = p1, l0 = l1;
	          }
	        }
	        if (l1) {
	          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
	          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
	          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
	          scaleTo(scale1 * scale0);
	        }
	        touchtime = null;
	        translateTo(p0, l0);
	        zoomed(dispatch);
	      }
	      function ended() {
	        if (d3.event.touches.length) {
	          var changed = d3.event.changedTouches;
	          for (var i = 0, n = changed.length; i < n; ++i) {
	            delete locations0[changed[i].identifier];
	          }
	          for (var identifier in locations0) {
	            return void relocate();
	          }
	        }
	        d3.selectAll(targets).on(zoomName, null);
	        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
	        dragRestore();
	        zoomended(dispatch);
	      }
	    }
	    function mousewheeled() {
	      var dispatch = event.of(this, arguments);
	      if (mousewheelTimer) clearTimeout(mousewheelTimer); else translate0 = location(center0 = center || d3.mouse(this)), 
	      d3_selection_interrupt.call(this), zoomstarted(dispatch);
	      mousewheelTimer = setTimeout(function() {
	        mousewheelTimer = null;
	        zoomended(dispatch);
	      }, 50);
	      d3_eventPreventDefault();
	      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
	      translateTo(center0, translate0);
	      zoomed(dispatch);
	    }
	    function dblclicked() {
	      var dispatch = event.of(this, arguments), p = d3.mouse(this), l = location(p), k = Math.log(view.k) / Math.LN2;
	      zoomstarted(dispatch);
	      scaleTo(Math.pow(2, d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1));
	      translateTo(p, l);
	      zoomed(dispatch);
	      zoomended(dispatch);
	    }
	    return d3.rebind(zoom, event, "on");
	  };
	  var d3_behavior_zoomInfinity = [ 0, Infinity ];
	  var d3_behavior_zoomDelta, d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
	    return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
	  }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
	    return d3.event.wheelDelta;
	  }, "mousewheel") : (d3_behavior_zoomDelta = function() {
	    return -d3.event.detail;
	  }, "MozMousePixelScroll");
	  d3.color = d3_color;
	  function d3_color() {}
	  d3_color.prototype.toString = function() {
	    return this.rgb() + "";
	  };
	  d3.hsl = d3_hsl;
	  function d3_hsl(h, s, l) {
	    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
	  }
	  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
	  d3_hslPrototype.brighter = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_hsl(this.h, this.s, this.l / k);
	  };
	  d3_hslPrototype.darker = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_hsl(this.h, this.s, k * this.l);
	  };
	  d3_hslPrototype.rgb = function() {
	    return d3_hsl_rgb(this.h, this.s, this.l);
	  };
	  function d3_hsl_rgb(h, s, l) {
	    var m1, m2;
	    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
	    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
	    l = l < 0 ? 0 : l > 1 ? 1 : l;
	    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
	    m1 = 2 * l - m2;
	    function v(h) {
	      if (h > 360) h -= 360; else if (h < 0) h += 360;
	      if (h < 60) return m1 + (m2 - m1) * h / 60;
	      if (h < 180) return m2;
	      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
	      return m1;
	    }
	    function vv(h) {
	      return Math.round(v(h) * 255);
	    }
	    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
	  }
	  d3.hcl = d3_hcl;
	  function d3_hcl(h, c, l) {
	    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
	  }
	  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
	  d3_hclPrototype.brighter = function(k) {
	    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
	  };
	  d3_hclPrototype.darker = function(k) {
	    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
	  };
	  d3_hclPrototype.rgb = function() {
	    return d3_hcl_lab(this.h, this.c, this.l).rgb();
	  };
	  function d3_hcl_lab(h, c, l) {
	    if (isNaN(h)) h = 0;
	    if (isNaN(c)) c = 0;
	    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
	  }
	  d3.lab = d3_lab;
	  function d3_lab(l, a, b) {
	    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
	  }
	  var d3_lab_K = 18;
	  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
	  var d3_labPrototype = d3_lab.prototype = new d3_color();
	  d3_labPrototype.brighter = function(k) {
	    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
	  };
	  d3_labPrototype.darker = function(k) {
	    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
	  };
	  d3_labPrototype.rgb = function() {
	    return d3_lab_rgb(this.l, this.a, this.b);
	  };
	  function d3_lab_rgb(l, a, b) {
	    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
	    x = d3_lab_xyz(x) * d3_lab_X;
	    y = d3_lab_xyz(y) * d3_lab_Y;
	    z = d3_lab_xyz(z) * d3_lab_Z;
	    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
	  }
	  function d3_lab_hcl(l, a, b) {
	    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
	  }
	  function d3_lab_xyz(x) {
	    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
	  }
	  function d3_xyz_lab(x) {
	    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
	  }
	  function d3_xyz_rgb(r) {
	    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
	  }
	  d3.rgb = d3_rgb;
	  function d3_rgb(r, g, b) {
	    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
	  }
	  function d3_rgbNumber(value) {
	    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
	  }
	  function d3_rgbString(value) {
	    return d3_rgbNumber(value) + "";
	  }
	  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
	  d3_rgbPrototype.brighter = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    var r = this.r, g = this.g, b = this.b, i = 30;
	    if (!r && !g && !b) return new d3_rgb(i, i, i);
	    if (r && r < i) r = i;
	    if (g && g < i) g = i;
	    if (b && b < i) b = i;
	    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
	  };
	  d3_rgbPrototype.darker = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_rgb(k * this.r, k * this.g, k * this.b);
	  };
	  d3_rgbPrototype.hsl = function() {
	    return d3_rgb_hsl(this.r, this.g, this.b);
	  };
	  d3_rgbPrototype.toString = function() {
	    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
	  };
	  function d3_rgb_hex(v) {
	    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
	  }
	  function d3_rgb_parse(format, rgb, hsl) {
	    var r = 0, g = 0, b = 0, m1, m2, color;
	    m1 = /([a-z]+)\((.*)\)/i.exec(format);
	    if (m1) {
	      m2 = m1[2].split(",");
	      switch (m1[1]) {
	       case "hsl":
	        {
	          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
	        }

	       case "rgb":
	        {
	          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
	        }
	      }
	    }
	    if (color = d3_rgb_names.get(format)) return rgb(color.r, color.g, color.b);
	    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {
	      if (format.length === 4) {
	        r = (color & 3840) >> 4;
	        r = r >> 4 | r;
	        g = color & 240;
	        g = g >> 4 | g;
	        b = color & 15;
	        b = b << 4 | b;
	      } else if (format.length === 7) {
	        r = (color & 16711680) >> 16;
	        g = (color & 65280) >> 8;
	        b = color & 255;
	      }
	    }
	    return rgb(r, g, b);
	  }
	  function d3_rgb_hsl(r, g, b) {
	    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
	    if (d) {
	      s = l < .5 ? d / (max + min) : d / (2 - max - min);
	      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
	      h *= 60;
	    } else {
	      h = NaN;
	      s = l > 0 && l < 1 ? 0 : h;
	    }
	    return new d3_hsl(h, s, l);
	  }
	  function d3_rgb_lab(r, g, b) {
	    r = d3_rgb_xyz(r);
	    g = d3_rgb_xyz(g);
	    b = d3_rgb_xyz(b);
	    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
	    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
	  }
	  function d3_rgb_xyz(r) {
	    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
	  }
	  function d3_rgb_parseNumber(c) {
	    var f = parseFloat(c);
	    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
	  }
	  var d3_rgb_names = d3.map({
	    aliceblue: 15792383,
	    antiquewhite: 16444375,
	    aqua: 65535,
	    aquamarine: 8388564,
	    azure: 15794175,
	    beige: 16119260,
	    bisque: 16770244,
	    black: 0,
	    blanchedalmond: 16772045,
	    blue: 255,
	    blueviolet: 9055202,
	    brown: 10824234,
	    burlywood: 14596231,
	    cadetblue: 6266528,
	    chartreuse: 8388352,
	    chocolate: 13789470,
	    coral: 16744272,
	    cornflowerblue: 6591981,
	    cornsilk: 16775388,
	    crimson: 14423100,
	    cyan: 65535,
	    darkblue: 139,
	    darkcyan: 35723,
	    darkgoldenrod: 12092939,
	    darkgray: 11119017,
	    darkgreen: 25600,
	    darkgrey: 11119017,
	    darkkhaki: 12433259,
	    darkmagenta: 9109643,
	    darkolivegreen: 5597999,
	    darkorange: 16747520,
	    darkorchid: 10040012,
	    darkred: 9109504,
	    darksalmon: 15308410,
	    darkseagreen: 9419919,
	    darkslateblue: 4734347,
	    darkslategray: 3100495,
	    darkslategrey: 3100495,
	    darkturquoise: 52945,
	    darkviolet: 9699539,
	    deeppink: 16716947,
	    deepskyblue: 49151,
	    dimgray: 6908265,
	    dimgrey: 6908265,
	    dodgerblue: 2003199,
	    firebrick: 11674146,
	    floralwhite: 16775920,
	    forestgreen: 2263842,
	    fuchsia: 16711935,
	    gainsboro: 14474460,
	    ghostwhite: 16316671,
	    gold: 16766720,
	    goldenrod: 14329120,
	    gray: 8421504,
	    green: 32768,
	    greenyellow: 11403055,
	    grey: 8421504,
	    honeydew: 15794160,
	    hotpink: 16738740,
	    indianred: 13458524,
	    indigo: 4915330,
	    ivory: 16777200,
	    khaki: 15787660,
	    lavender: 15132410,
	    lavenderblush: 16773365,
	    lawngreen: 8190976,
	    lemonchiffon: 16775885,
	    lightblue: 11393254,
	    lightcoral: 15761536,
	    lightcyan: 14745599,
	    lightgoldenrodyellow: 16448210,
	    lightgray: 13882323,
	    lightgreen: 9498256,
	    lightgrey: 13882323,
	    lightpink: 16758465,
	    lightsalmon: 16752762,
	    lightseagreen: 2142890,
	    lightskyblue: 8900346,
	    lightslategray: 7833753,
	    lightslategrey: 7833753,
	    lightsteelblue: 11584734,
	    lightyellow: 16777184,
	    lime: 65280,
	    limegreen: 3329330,
	    linen: 16445670,
	    magenta: 16711935,
	    maroon: 8388608,
	    mediumaquamarine: 6737322,
	    mediumblue: 205,
	    mediumorchid: 12211667,
	    mediumpurple: 9662683,
	    mediumseagreen: 3978097,
	    mediumslateblue: 8087790,
	    mediumspringgreen: 64154,
	    mediumturquoise: 4772300,
	    mediumvioletred: 13047173,
	    midnightblue: 1644912,
	    mintcream: 16121850,
	    mistyrose: 16770273,
	    moccasin: 16770229,
	    navajowhite: 16768685,
	    navy: 128,
	    oldlace: 16643558,
	    olive: 8421376,
	    olivedrab: 7048739,
	    orange: 16753920,
	    orangered: 16729344,
	    orchid: 14315734,
	    palegoldenrod: 15657130,
	    palegreen: 10025880,
	    paleturquoise: 11529966,
	    palevioletred: 14381203,
	    papayawhip: 16773077,
	    peachpuff: 16767673,
	    peru: 13468991,
	    pink: 16761035,
	    plum: 14524637,
	    powderblue: 11591910,
	    purple: 8388736,
	    red: 16711680,
	    rosybrown: 12357519,
	    royalblue: 4286945,
	    saddlebrown: 9127187,
	    salmon: 16416882,
	    sandybrown: 16032864,
	    seagreen: 3050327,
	    seashell: 16774638,
	    sienna: 10506797,
	    silver: 12632256,
	    skyblue: 8900331,
	    slateblue: 6970061,
	    slategray: 7372944,
	    slategrey: 7372944,
	    snow: 16775930,
	    springgreen: 65407,
	    steelblue: 4620980,
	    tan: 13808780,
	    teal: 32896,
	    thistle: 14204888,
	    tomato: 16737095,
	    turquoise: 4251856,
	    violet: 15631086,
	    wheat: 16113331,
	    white: 16777215,
	    whitesmoke: 16119285,
	    yellow: 16776960,
	    yellowgreen: 10145074
	  });
	  d3_rgb_names.forEach(function(key, value) {
	    d3_rgb_names.set(key, d3_rgbNumber(value));
	  });
	  function d3_functor(v) {
	    return typeof v === "function" ? v : function() {
	      return v;
	    };
	  }
	  d3.functor = d3_functor;
	  function d3_identity(d) {
	    return d;
	  }
	  d3.xhr = d3_xhrType(d3_identity);
	  function d3_xhrType(response) {
	    return function(url, mimeType, callback) {
	      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, 
	      mimeType = null;
	      return d3_xhr(url, mimeType, response, callback);
	    };
	  }
	  function d3_xhr(url, mimeType, response, callback) {
	    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
	    if (d3_window.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
	    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
	      request.readyState > 3 && respond();
	    };
	    function respond() {
	      var status = request.status, result;
	      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
	        try {
	          result = response.call(xhr, request);
	        } catch (e) {
	          dispatch.error.call(xhr, e);
	          return;
	        }
	        dispatch.load.call(xhr, result);
	      } else {
	        dispatch.error.call(xhr, request);
	      }
	    }
	    request.onprogress = function(event) {
	      var o = d3.event;
	      d3.event = event;
	      try {
	        dispatch.progress.call(xhr, request);
	      } finally {
	        d3.event = o;
	      }
	    };
	    xhr.header = function(name, value) {
	      name = (name + "").toLowerCase();
	      if (arguments.length < 2) return headers[name];
	      if (value == null) delete headers[name]; else headers[name] = value + "";
	      return xhr;
	    };
	    xhr.mimeType = function(value) {
	      if (!arguments.length) return mimeType;
	      mimeType = value == null ? null : value + "";
	      return xhr;
	    };
	    xhr.responseType = function(value) {
	      if (!arguments.length) return responseType;
	      responseType = value;
	      return xhr;
	    };
	    xhr.response = function(value) {
	      response = value;
	      return xhr;
	    };
	    [ "get", "post" ].forEach(function(method) {
	      xhr[method] = function() {
	        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
	      };
	    });
	    xhr.send = function(method, data, callback) {
	      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
	      request.open(method, url, true);
	      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
	      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
	      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
	      if (responseType != null) request.responseType = responseType;
	      if (callback != null) xhr.on("error", callback).on("load", function(request) {
	        callback(null, request);
	      });
	      dispatch.beforesend.call(xhr, request);
	      request.send(data == null ? null : data);
	      return xhr;
	    };
	    xhr.abort = function() {
	      request.abort();
	      return xhr;
	    };
	    d3.rebind(xhr, dispatch, "on");
	    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
	  }
	  function d3_xhr_fixCallback(callback) {
	    return callback.length === 1 ? function(error, request) {
	      callback(error == null ? request : null);
	    } : callback;
	  }
	  function d3_xhrHasResponse(request) {
	    var type = request.responseType;
	    return type && type !== "text" ? request.response : request.responseText;
	  }
	  d3.dsv = function(delimiter, mimeType) {
	    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
	    function dsv(url, row, callback) {
	      if (arguments.length < 3) callback = row, row = null;
	      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
	      xhr.row = function(_) {
	        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
	      };
	      return xhr;
	    }
	    function response(request) {
	      return dsv.parse(request.responseText);
	    }
	    function typedResponse(f) {
	      return function(request) {
	        return dsv.parse(request.responseText, f);
	      };
	    }
	    dsv.parse = function(text, f) {
	      var o;
	      return dsv.parseRows(text, function(row, i) {
	        if (o) return o(row, i - 1);
	        var a = new Function("d", "return {" + row.map(function(name, i) {
	          return JSON.stringify(name) + ": d[" + i + "]";
	        }).join(",") + "}");
	        o = f ? function(row, i) {
	          return f(a(row), i);
	        } : a;
	      });
	    };
	    dsv.parseRows = function(text, f) {
	      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
	      function token() {
	        if (I >= N) return EOF;
	        if (eol) return eol = false, EOL;
	        var j = I;
	        if (text.charCodeAt(j) === 34) {
	          var i = j;
	          while (i++ < N) {
	            if (text.charCodeAt(i) === 34) {
	              if (text.charCodeAt(i + 1) !== 34) break;
	              ++i;
	            }
	          }
	          I = i + 2;
	          var c = text.charCodeAt(i + 1);
	          if (c === 13) {
	            eol = true;
	            if (text.charCodeAt(i + 2) === 10) ++I;
	          } else if (c === 10) {
	            eol = true;
	          }
	          return text.slice(j + 1, i).replace(/""/g, '"');
	        }
	        while (I < N) {
	          var c = text.charCodeAt(I++), k = 1;
	          if (c === 10) eol = true; else if (c === 13) {
	            eol = true;
	            if (text.charCodeAt(I) === 10) ++I, ++k;
	          } else if (c !== delimiterCode) continue;
	          return text.slice(j, I - k);
	        }
	        return text.slice(j);
	      }
	      while ((t = token()) !== EOF) {
	        var a = [];
	        while (t !== EOL && t !== EOF) {
	          a.push(t);
	          t = token();
	        }
	        if (f && (a = f(a, n++)) == null) continue;
	        rows.push(a);
	      }
	      return rows;
	    };
	    dsv.format = function(rows) {
	      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
	      var fieldSet = new d3_Set(), fields = [];
	      rows.forEach(function(row) {
	        for (var field in row) {
	          if (!fieldSet.has(field)) {
	            fields.push(fieldSet.add(field));
	          }
	        }
	      });
	      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
	        return fields.map(function(field) {
	          return formatValue(row[field]);
	        }).join(delimiter);
	      })).join("\n");
	    };
	    dsv.formatRows = function(rows) {
	      return rows.map(formatRow).join("\n");
	    };
	    function formatRow(row) {
	      return row.map(formatValue).join(delimiter);
	    }
	    function formatValue(text) {
	      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
	    }
	    return dsv;
	  };
	  d3.csv = d3.dsv(",", "text/csv");
	  d3.tsv = d3.dsv("	", "text/tab-separated-values");
	  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_active, d3_timer_frame = d3_window[d3_vendorSymbol(d3_window, "requestAnimationFrame")] || function(callback) {
	    setTimeout(callback, 17);
	  };
	  d3.timer = function(callback, delay, then) {
	    var n = arguments.length;
	    if (n < 2) delay = 0;
	    if (n < 3) then = Date.now();
	    var time = then + delay, timer = {
	      c: callback,
	      t: time,
	      f: false,
	      n: null
	    };
	    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
	    d3_timer_queueTail = timer;
	    if (!d3_timer_interval) {
	      d3_timer_timeout = clearTimeout(d3_timer_timeout);
	      d3_timer_interval = 1;
	      d3_timer_frame(d3_timer_step);
	    }
	  };
	  function d3_timer_step() {
	    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
	    if (delay > 24) {
	      if (isFinite(delay)) {
	        clearTimeout(d3_timer_timeout);
	        d3_timer_timeout = setTimeout(d3_timer_step, delay);
	      }
	      d3_timer_interval = 0;
	    } else {
	      d3_timer_interval = 1;
	      d3_timer_frame(d3_timer_step);
	    }
	  }
	  d3.timer.flush = function() {
	    d3_timer_mark();
	    d3_timer_sweep();
	  };
	  function d3_timer_mark() {
	    var now = Date.now();
	    d3_timer_active = d3_timer_queueHead;
	    while (d3_timer_active) {
	      if (now >= d3_timer_active.t) d3_timer_active.f = d3_timer_active.c(now - d3_timer_active.t);
	      d3_timer_active = d3_timer_active.n;
	    }
	    return now;
	  }
	  function d3_timer_sweep() {
	    var t0, t1 = d3_timer_queueHead, time = Infinity;
	    while (t1) {
	      if (t1.f) {
	        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
	      } else {
	        if (t1.t < time) time = t1.t;
	        t1 = (t0 = t1).n;
	      }
	    }
	    d3_timer_queueTail = t0;
	    return time;
	  }
	  function d3_format_precision(x, p) {
	    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
	  }
	  d3.round = function(x, n) {
	    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
	  };
	  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
	  d3.formatPrefix = function(value, precision) {
	    var i = 0;
	    if (value) {
	      if (value < 0) value *= -1;
	      if (precision) value = d3.round(value, d3_format_precision(value, precision));
	      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
	      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
	    }
	    return d3_formatPrefixes[8 + i / 3];
	  };
	  function d3_formatPrefix(d, i) {
	    var k = Math.pow(10, abs(8 - i) * 3);
	    return {
	      scale: i > 8 ? function(d) {
	        return d / k;
	      } : function(d) {
	        return d * k;
	      },
	      symbol: d
	    };
	  }
	  function d3_locale_numberFormat(locale) {
	    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {
	      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;
	      while (i > 0 && g > 0) {
	        if (length + g + 1 > width) g = Math.max(1, width - length);
	        t.push(value.substring(i -= g, i + g));
	        if ((length += g + 1) > width) break;
	        g = locale_grouping[j = (j + 1) % locale_grouping.length];
	      }
	      return t.reverse().join(locale_thousands);
	    } : d3_identity;
	    return function(specifier) {
	      var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "-", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false, exponent = true;
	      if (precision) precision = +precision.substring(1);
	      if (zfill || fill === "0" && align === "=") {
	        zfill = fill = "0";
	        align = "=";
	      }
	      switch (type) {
	       case "n":
	        comma = true;
	        type = "g";
	        break;

	       case "%":
	        scale = 100;
	        suffix = "%";
	        type = "f";
	        break;

	       case "p":
	        scale = 100;
	        suffix = "%";
	        type = "r";
	        break;

	       case "b":
	       case "o":
	       case "x":
	       case "X":
	        if (symbol === "#") prefix = "0" + type.toLowerCase();

	       case "c":
	        exponent = false;

	       case "d":
	        integer = true;
	        precision = 0;
	        break;

	       case "s":
	        scale = -1;
	        type = "r";
	        break;
	      }
	      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
	      if (type == "r" && !precision) type = "g";
	      if (precision != null) {
	        if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
	      }
	      type = d3_format_types.get(type) || d3_format_typeDefault;
	      var zcomma = zfill && comma;
	      return function(value) {
	        var fullSuffix = suffix;
	        if (integer && value % 1) return "";
	        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign === "-" ? "" : sign;
	        if (scale < 0) {
	          var unit = d3.formatPrefix(value, precision);
	          value = unit.scale(value);
	          fullSuffix = unit.symbol + suffix;
	        } else {
	          value *= scale;
	        }
	        value = type(value, precision);
	        var i = value.lastIndexOf("."), before, after;
	        if (i < 0) {
	          var j = exponent ? value.lastIndexOf("e") : -1;
	          if (j < 0) before = value, after = ""; else before = value.substring(0, j), after = value.substring(j);
	        } else {
	          before = value.substring(0, i);
	          after = locale_decimal + value.substring(i + 1);
	        }
	        if (!zfill && comma) before = formatGroup(before, Infinity);
	        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
	        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);
	        negative += prefix;
	        value = before + after;
	        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
	      };
	    };
	  }
	  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
	  var d3_format_types = d3.map({
	    b: function(x) {
	      return x.toString(2);
	    },
	    c: function(x) {
	      return String.fromCharCode(x);
	    },
	    o: function(x) {
	      return x.toString(8);
	    },
	    x: function(x) {
	      return x.toString(16);
	    },
	    X: function(x) {
	      return x.toString(16).toUpperCase();
	    },
	    g: function(x, p) {
	      return x.toPrecision(p);
	    },
	    e: function(x, p) {
	      return x.toExponential(p);
	    },
	    f: function(x, p) {
	      return x.toFixed(p);
	    },
	    r: function(x, p) {
	      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
	    }
	  });
	  function d3_format_typeDefault(x) {
	    return x + "";
	  }
	  var d3_time = d3.time = {}, d3_date = Date;
	  function d3_date_utc() {
	    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
	  }
	  d3_date_utc.prototype = {
	    getDate: function() {
	      return this._.getUTCDate();
	    },
	    getDay: function() {
	      return this._.getUTCDay();
	    },
	    getFullYear: function() {
	      return this._.getUTCFullYear();
	    },
	    getHours: function() {
	      return this._.getUTCHours();
	    },
	    getMilliseconds: function() {
	      return this._.getUTCMilliseconds();
	    },
	    getMinutes: function() {
	      return this._.getUTCMinutes();
	    },
	    getMonth: function() {
	      return this._.getUTCMonth();
	    },
	    getSeconds: function() {
	      return this._.getUTCSeconds();
	    },
	    getTime: function() {
	      return this._.getTime();
	    },
	    getTimezoneOffset: function() {
	      return 0;
	    },
	    valueOf: function() {
	      return this._.valueOf();
	    },
	    setDate: function() {
	      d3_time_prototype.setUTCDate.apply(this._, arguments);
	    },
	    setDay: function() {
	      d3_time_prototype.setUTCDay.apply(this._, arguments);
	    },
	    setFullYear: function() {
	      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
	    },
	    setHours: function() {
	      d3_time_prototype.setUTCHours.apply(this._, arguments);
	    },
	    setMilliseconds: function() {
	      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
	    },
	    setMinutes: function() {
	      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
	    },
	    setMonth: function() {
	      d3_time_prototype.setUTCMonth.apply(this._, arguments);
	    },
	    setSeconds: function() {
	      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
	    },
	    setTime: function() {
	      d3_time_prototype.setTime.apply(this._, arguments);
	    }
	  };
	  var d3_time_prototype = Date.prototype;
	  function d3_time_interval(local, step, number) {
	    function round(date) {
	      var d0 = local(date), d1 = offset(d0, 1);
	      return date - d0 < d1 - date ? d0 : d1;
	    }
	    function ceil(date) {
	      step(date = local(new d3_date(date - 1)), 1);
	      return date;
	    }
	    function offset(date, k) {
	      step(date = new d3_date(+date), k);
	      return date;
	    }
	    function range(t0, t1, dt) {
	      var time = ceil(t0), times = [];
	      if (dt > 1) {
	        while (time < t1) {
	          if (!(number(time) % dt)) times.push(new Date(+time));
	          step(time, 1);
	        }
	      } else {
	        while (time < t1) times.push(new Date(+time)), step(time, 1);
	      }
	      return times;
	    }
	    function range_utc(t0, t1, dt) {
	      try {
	        d3_date = d3_date_utc;
	        var utc = new d3_date_utc();
	        utc._ = t0;
	        return range(utc, t1, dt);
	      } finally {
	        d3_date = Date;
	      }
	    }
	    local.floor = local;
	    local.round = round;
	    local.ceil = ceil;
	    local.offset = offset;
	    local.range = range;
	    var utc = local.utc = d3_time_interval_utc(local);
	    utc.floor = utc;
	    utc.round = d3_time_interval_utc(round);
	    utc.ceil = d3_time_interval_utc(ceil);
	    utc.offset = d3_time_interval_utc(offset);
	    utc.range = range_utc;
	    return local;
	  }
	  function d3_time_interval_utc(method) {
	    return function(date, k) {
	      try {
	        d3_date = d3_date_utc;
	        var utc = new d3_date_utc();
	        utc._ = date;
	        return method(utc, k)._;
	      } finally {
	        d3_date = Date;
	      }
	    };
	  }
	  d3_time.year = d3_time_interval(function(date) {
	    date = d3_time.day(date);
	    date.setMonth(0, 1);
	    return date;
	  }, function(date, offset) {
	    date.setFullYear(date.getFullYear() + offset);
	  }, function(date) {
	    return date.getFullYear();
	  });
	  d3_time.years = d3_time.year.range;
	  d3_time.years.utc = d3_time.year.utc.range;
	  d3_time.day = d3_time_interval(function(date) {
	    var day = new d3_date(2e3, 0);
	    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
	    return day;
	  }, function(date, offset) {
	    date.setDate(date.getDate() + offset);
	  }, function(date) {
	    return date.getDate() - 1;
	  });
	  d3_time.days = d3_time.day.range;
	  d3_time.days.utc = d3_time.day.utc.range;
	  d3_time.dayOfYear = function(date) {
	    var year = d3_time.year(date);
	    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
	  };
	  [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ].forEach(function(day, i) {
	    i = 7 - i;
	    var interval = d3_time[day] = d3_time_interval(function(date) {
	      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
	      return date;
	    }, function(date, offset) {
	      date.setDate(date.getDate() + Math.floor(offset) * 7);
	    }, function(date) {
	      var day = d3_time.year(date).getDay();
	      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
	    });
	    d3_time[day + "s"] = interval.range;
	    d3_time[day + "s"].utc = interval.utc.range;
	    d3_time[day + "OfYear"] = function(date) {
	      var day = d3_time.year(date).getDay();
	      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
	    };
	  });
	  d3_time.week = d3_time.sunday;
	  d3_time.weeks = d3_time.sunday.range;
	  d3_time.weeks.utc = d3_time.sunday.utc.range;
	  d3_time.weekOfYear = d3_time.sundayOfYear;
	  function d3_locale_timeFormat(locale) {
	    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
	    function d3_time_format(template) {
	      var n = template.length;
	      function format(date) {
	        var string = [], i = -1, j = 0, c, p, f;
	        while (++i < n) {
	          if (template.charCodeAt(i) === 37) {
	            string.push(template.slice(j, i));
	            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
	            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
	            string.push(c);
	            j = i + 1;
	          }
	        }
	        string.push(template.slice(j, i));
	        return string.join("");
	      }
	      format.parse = function(string) {
	        var d = {
	          y: 1900,
	          m: 0,
	          d: 1,
	          H: 0,
	          M: 0,
	          S: 0,
	          L: 0,
	          Z: null
	        }, i = d3_time_parse(d, template, string, 0);
	        if (i != string.length) return null;
	        if ("p" in d) d.H = d.H % 12 + d.p * 12;
	        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
	        if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("w" in d && ("W" in d || "U" in d)) {
	          date.setFullYear(d.y, 0, 1);
	          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
	        } else date.setFullYear(d.y, d.m, d.d);
	        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
	        return localZ ? date._ : date;
	      };
	      format.toString = function() {
	        return template;
	      };
	      return format;
	    }
	    function d3_time_parse(date, template, string, j) {
	      var c, p, t, i = 0, n = template.length, m = string.length;
	      while (i < n) {
	        if (j >= m) return -1;
	        c = template.charCodeAt(i++);
	        if (c === 37) {
	          t = template.charAt(i++);
	          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
	          if (!p || (j = p(date, string, j)) < 0) return -1;
	        } else if (c != string.charCodeAt(j++)) {
	          return -1;
	        }
	      }
	      return j;
	    }
	    d3_time_format.utc = function(template) {
	      var local = d3_time_format(template);
	      function format(date) {
	        try {
	          d3_date = d3_date_utc;
	          var utc = new d3_date();
	          utc._ = date;
	          return local(utc);
	        } finally {
	          d3_date = Date;
	        }
	      }
	      format.parse = function(string) {
	        try {
	          d3_date = d3_date_utc;
	          var date = local.parse(string);
	          return date && date._;
	        } finally {
	          d3_date = Date;
	        }
	      };
	      format.toString = local.toString;
	      return format;
	    };
	    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
	    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
	    locale_periods.forEach(function(p, i) {
	      d3_time_periodLookup.set(p.toLowerCase(), i);
	    });
	    var d3_time_formats = {
	      a: function(d) {
	        return locale_shortDays[d.getDay()];
	      },
	      A: function(d) {
	        return locale_days[d.getDay()];
	      },
	      b: function(d) {
	        return locale_shortMonths[d.getMonth()];
	      },
	      B: function(d) {
	        return locale_months[d.getMonth()];
	      },
	      c: d3_time_format(locale_dateTime),
	      d: function(d, p) {
	        return d3_time_formatPad(d.getDate(), p, 2);
	      },
	      e: function(d, p) {
	        return d3_time_formatPad(d.getDate(), p, 2);
	      },
	      H: function(d, p) {
	        return d3_time_formatPad(d.getHours(), p, 2);
	      },
	      I: function(d, p) {
	        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
	      },
	      j: function(d, p) {
	        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
	      },
	      L: function(d, p) {
	        return d3_time_formatPad(d.getMilliseconds(), p, 3);
	      },
	      m: function(d, p) {
	        return d3_time_formatPad(d.getMonth() + 1, p, 2);
	      },
	      M: function(d, p) {
	        return d3_time_formatPad(d.getMinutes(), p, 2);
	      },
	      p: function(d) {
	        return locale_periods[+(d.getHours() >= 12)];
	      },
	      S: function(d, p) {
	        return d3_time_formatPad(d.getSeconds(), p, 2);
	      },
	      U: function(d, p) {
	        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
	      },
	      w: function(d) {
	        return d.getDay();
	      },
	      W: function(d, p) {
	        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
	      },
	      x: d3_time_format(locale_date),
	      X: d3_time_format(locale_time),
	      y: function(d, p) {
	        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
	      },
	      Y: function(d, p) {
	        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
	      },
	      Z: d3_time_zone,
	      "%": function() {
	        return "%";
	      }
	    };
	    var d3_time_parsers = {
	      a: d3_time_parseWeekdayAbbrev,
	      A: d3_time_parseWeekday,
	      b: d3_time_parseMonthAbbrev,
	      B: d3_time_parseMonth,
	      c: d3_time_parseLocaleFull,
	      d: d3_time_parseDay,
	      e: d3_time_parseDay,
	      H: d3_time_parseHour24,
	      I: d3_time_parseHour24,
	      j: d3_time_parseDayOfYear,
	      L: d3_time_parseMilliseconds,
	      m: d3_time_parseMonthNumber,
	      M: d3_time_parseMinutes,
	      p: d3_time_parseAmPm,
	      S: d3_time_parseSeconds,
	      U: d3_time_parseWeekNumberSunday,
	      w: d3_time_parseWeekdayNumber,
	      W: d3_time_parseWeekNumberMonday,
	      x: d3_time_parseLocaleDate,
	      X: d3_time_parseLocaleTime,
	      y: d3_time_parseYear,
	      Y: d3_time_parseFullYear,
	      Z: d3_time_parseZone,
	      "%": d3_time_parseLiteralPercent
	    };
	    function d3_time_parseWeekdayAbbrev(date, string, i) {
	      d3_time_dayAbbrevRe.lastIndex = 0;
	      var n = d3_time_dayAbbrevRe.exec(string.slice(i));
	      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseWeekday(date, string, i) {
	      d3_time_dayRe.lastIndex = 0;
	      var n = d3_time_dayRe.exec(string.slice(i));
	      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseMonthAbbrev(date, string, i) {
	      d3_time_monthAbbrevRe.lastIndex = 0;
	      var n = d3_time_monthAbbrevRe.exec(string.slice(i));
	      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseMonth(date, string, i) {
	      d3_time_monthRe.lastIndex = 0;
	      var n = d3_time_monthRe.exec(string.slice(i));
	      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseLocaleFull(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
	    }
	    function d3_time_parseLocaleDate(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
	    }
	    function d3_time_parseLocaleTime(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
	    }
	    function d3_time_parseAmPm(date, string, i) {
	      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
	      return n == null ? -1 : (date.p = n, i);
	    }
	    return d3_time_format;
	  }
	  var d3_time_formatPads = {
	    "-": "",
	    _: " ",
	    "0": "0"
	  }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
	  function d3_time_formatPad(value, fill, width) {
	    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
	    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
	  }
	  function d3_time_formatRe(names) {
	    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
	  }
	  function d3_time_formatLookup(names) {
	    var map = new d3_Map(), i = -1, n = names.length;
	    while (++i < n) map.set(names[i].toLowerCase(), i);
	    return map;
	  }
	  function d3_time_parseWeekdayNumber(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 1));
	    return n ? (date.w = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseWeekNumberSunday(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i));
	    return n ? (date.U = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseWeekNumberMonday(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i));
	    return n ? (date.W = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseFullYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 4));
	    return n ? (date.y = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
	  }
	  function d3_time_parseZone(date, string, i) {
	    return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, 
	    i + 5) : -1;
	  }
	  function d3_time_expandYear(d) {
	    return d + (d > 68 ? 1900 : 2e3);
	  }
	  function d3_time_parseMonthNumber(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
	  }
	  function d3_time_parseDay(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.d = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseDayOfYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
	    return n ? (date.j = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseHour24(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.H = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseMinutes(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.M = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseSeconds(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.S = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseMilliseconds(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
	    return n ? (date.L = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_zone(d) {
	    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = abs(z) / 60 | 0, zm = abs(z) % 60;
	    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
	  }
	  function d3_time_parseLiteralPercent(date, string, i) {
	    d3_time_percentRe.lastIndex = 0;
	    var n = d3_time_percentRe.exec(string.slice(i, i + 1));
	    return n ? i + n[0].length : -1;
	  }
	  function d3_time_formatMulti(formats) {
	    var n = formats.length, i = -1;
	    while (++i < n) formats[i][0] = this(formats[i][0]);
	    return function(date) {
	      var i = 0, f = formats[i];
	      while (!f[1](date)) f = formats[++i];
	      return f[0](date);
	    };
	  }
	  d3.locale = function(locale) {
	    return {
	      numberFormat: d3_locale_numberFormat(locale),
	      timeFormat: d3_locale_timeFormat(locale)
	    };
	  };
	  var d3_locale_enUS = d3.locale({
	    decimal: ".",
	    thousands: ",",
	    grouping: [ 3 ],
	    currency: [ "$", "" ],
	    dateTime: "%a %b %e %X %Y",
	    date: "%m/%d/%Y",
	    time: "%H:%M:%S",
	    periods: [ "AM", "PM" ],
	    days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
	    shortDays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
	    months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
	    shortMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
	  });
	  d3.format = d3_locale_enUS.numberFormat;
	  d3.geo = {};
	  function d3_adder() {}
	  d3_adder.prototype = {
	    s: 0,
	    t: 0,
	    add: function(y) {
	      d3_adderSum(y, this.t, d3_adderTemp);
	      d3_adderSum(d3_adderTemp.s, this.s, this);
	      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
	    },
	    reset: function() {
	      this.s = this.t = 0;
	    },
	    valueOf: function() {
	      return this.s;
	    }
	  };
	  var d3_adderTemp = new d3_adder();
	  function d3_adderSum(a, b, o) {
	    var x = o.s = a + b, bv = x - a, av = x - bv;
	    o.t = a - av + (b - bv);
	  }
	  d3.geo.stream = function(object, listener) {
	    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
	      d3_geo_streamObjectType[object.type](object, listener);
	    } else {
	      d3_geo_streamGeometry(object, listener);
	    }
	  };
	  function d3_geo_streamGeometry(geometry, listener) {
	    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
	      d3_geo_streamGeometryType[geometry.type](geometry, listener);
	    }
	  }
	  var d3_geo_streamObjectType = {
	    Feature: function(feature, listener) {
	      d3_geo_streamGeometry(feature.geometry, listener);
	    },
	    FeatureCollection: function(object, listener) {
	      var features = object.features, i = -1, n = features.length;
	      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
	    }
	  };
	  var d3_geo_streamGeometryType = {
	    Sphere: function(object, listener) {
	      listener.sphere();
	    },
	    Point: function(object, listener) {
	      object = object.coordinates;
	      listener.point(object[0], object[1], object[2]);
	    },
	    MultiPoint: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
	    },
	    LineString: function(object, listener) {
	      d3_geo_streamLine(object.coordinates, listener, 0);
	    },
	    MultiLineString: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
	    },
	    Polygon: function(object, listener) {
	      d3_geo_streamPolygon(object.coordinates, listener);
	    },
	    MultiPolygon: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
	    },
	    GeometryCollection: function(object, listener) {
	      var geometries = object.geometries, i = -1, n = geometries.length;
	      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
	    }
	  };
	  function d3_geo_streamLine(coordinates, listener, closed) {
	    var i = -1, n = coordinates.length - closed, coordinate;
	    listener.lineStart();
	    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
	    listener.lineEnd();
	  }
	  function d3_geo_streamPolygon(coordinates, listener) {
	    var i = -1, n = coordinates.length;
	    listener.polygonStart();
	    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
	    listener.polygonEnd();
	  }
	  d3.geo.area = function(object) {
	    d3_geo_areaSum = 0;
	    d3.geo.stream(object, d3_geo_area);
	    return d3_geo_areaSum;
	  };
	  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
	  var d3_geo_area = {
	    sphere: function() {
	      d3_geo_areaSum += 4 * π;
	    },
	    point: d3_noop,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: function() {
	      d3_geo_areaRingSum.reset();
	      d3_geo_area.lineStart = d3_geo_areaRingStart;
	    },
	    polygonEnd: function() {
	      var area = 2 * d3_geo_areaRingSum;
	      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
	      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
	    }
	  };
	  function d3_geo_areaRingStart() {
	    var λ00, φ00, λ0, cosφ0, sinφ0;
	    d3_geo_area.point = function(λ, φ) {
	      d3_geo_area.point = nextPoint;
	      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), 
	      sinφ0 = Math.sin(φ);
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      φ = φ * d3_radians / 2 + π / 4;
	      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
	      d3_geo_areaRingSum.add(Math.atan2(v, u));
	      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
	    }
	    d3_geo_area.lineEnd = function() {
	      nextPoint(λ00, φ00);
	    };
	  }
	  function d3_geo_cartesian(spherical) {
	    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
	    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
	  }
	  function d3_geo_cartesianDot(a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	  }
	  function d3_geo_cartesianCross(a, b) {
	    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
	  }
	  function d3_geo_cartesianAdd(a, b) {
	    a[0] += b[0];
	    a[1] += b[1];
	    a[2] += b[2];
	  }
	  function d3_geo_cartesianScale(vector, k) {
	    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
	  }
	  function d3_geo_cartesianNormalize(d) {
	    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
	    d[0] /= l;
	    d[1] /= l;
	    d[2] /= l;
	  }
	  function d3_geo_spherical(cartesian) {
	    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
	  }
	  function d3_geo_sphericalEqual(a, b) {
	    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
	  }
	  d3.geo.bounds = function() {
	    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
	    var bound = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        bound.point = ringPoint;
	        bound.lineStart = ringStart;
	        bound.lineEnd = ringEnd;
	        dλSum = 0;
	        d3_geo_area.polygonStart();
	      },
	      polygonEnd: function() {
	        d3_geo_area.polygonEnd();
	        bound.point = point;
	        bound.lineStart = lineStart;
	        bound.lineEnd = lineEnd;
	        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
	        range[0] = λ0, range[1] = λ1;
	      }
	    };
	    function point(λ, φ) {
	      ranges.push(range = [ λ0 = λ, λ1 = λ ]);
	      if (φ < φ0) φ0 = φ;
	      if (φ > φ1) φ1 = φ;
	    }
	    function linePoint(λ, φ) {
	      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
	      if (p0) {
	        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
	        d3_geo_cartesianNormalize(inflection);
	        inflection = d3_geo_spherical(inflection);
	        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
	        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
	          var φi = inflection[1] * d3_degrees;
	          if (φi > φ1) φ1 = φi;
	        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
	          var φi = -inflection[1] * d3_degrees;
	          if (φi < φ0) φ0 = φi;
	        } else {
	          if (φ < φ0) φ0 = φ;
	          if (φ > φ1) φ1 = φ;
	        }
	        if (antimeridian) {
	          if (λ < λ_) {
	            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
	          } else {
	            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
	          }
	        } else {
	          if (λ1 >= λ0) {
	            if (λ < λ0) λ0 = λ;
	            if (λ > λ1) λ1 = λ;
	          } else {
	            if (λ > λ_) {
	              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
	            } else {
	              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
	            }
	          }
	        }
	      } else {
	        point(λ, φ);
	      }
	      p0 = p, λ_ = λ;
	    }
	    function lineStart() {
	      bound.point = linePoint;
	    }
	    function lineEnd() {
	      range[0] = λ0, range[1] = λ1;
	      bound.point = point;
	      p0 = null;
	    }
	    function ringPoint(λ, φ) {
	      if (p0) {
	        var dλ = λ - λ_;
	        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
	      } else λ__ = λ, φ__ = φ;
	      d3_geo_area.point(λ, φ);
	      linePoint(λ, φ);
	    }
	    function ringStart() {
	      d3_geo_area.lineStart();
	    }
	    function ringEnd() {
	      ringPoint(λ__, φ__);
	      d3_geo_area.lineEnd();
	      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
	      range[0] = λ0, range[1] = λ1;
	      p0 = null;
	    }
	    function angle(λ0, λ1) {
	      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
	    }
	    function compareRanges(a, b) {
	      return a[0] - b[0];
	    }
	    function withinRange(x, range) {
	      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
	    }
	    return function(feature) {
	      φ1 = λ1 = -(λ0 = φ0 = Infinity);
	      ranges = [];
	      d3.geo.stream(feature, bound);
	      var n = ranges.length;
	      if (n) {
	        ranges.sort(compareRanges);
	        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
	          b = ranges[i];
	          if (withinRange(b[0], a) || withinRange(b[1], a)) {
	            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
	            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
	          } else {
	            merged.push(a = b);
	          }
	        }
	        var best = -Infinity, dλ;
	        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
	          b = merged[i];
	          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
	        }
	      }
	      ranges = range = null;
	      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
	    };
	  }();
	  d3.geo.centroid = function(object) {
	    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
	    d3.geo.stream(object, d3_geo_centroid);
	    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
	    if (m < ε2) {
	      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
	      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
	      m = x * x + y * y + z * z;
	      if (m < ε2) return [ NaN, NaN ];
	    }
	    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
	  };
	  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
	  var d3_geo_centroid = {
	    sphere: d3_noop,
	    point: d3_geo_centroidPoint,
	    lineStart: d3_geo_centroidLineStart,
	    lineEnd: d3_geo_centroidLineEnd,
	    polygonStart: function() {
	      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
	    }
	  };
	  function d3_geo_centroidPoint(λ, φ) {
	    λ *= d3_radians;
	    var cosφ = Math.cos(φ *= d3_radians);
	    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
	  }
	  function d3_geo_centroidPointXYZ(x, y, z) {
	    ++d3_geo_centroidW0;
	    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
	    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
	    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
	  }
	  function d3_geo_centroidLineStart() {
	    var x0, y0, z0;
	    d3_geo_centroid.point = function(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians);
	      x0 = cosφ * Math.cos(λ);
	      y0 = cosφ * Math.sin(λ);
	      z0 = Math.sin(φ);
	      d3_geo_centroid.point = nextPoint;
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
	      d3_geo_centroidW1 += w;
	      d3_geo_centroidX1 += w * (x0 + (x0 = x));
	      d3_geo_centroidY1 += w * (y0 + (y0 = y));
	      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    }
	  }
	  function d3_geo_centroidLineEnd() {
	    d3_geo_centroid.point = d3_geo_centroidPoint;
	  }
	  function d3_geo_centroidRingStart() {
	    var λ00, φ00, x0, y0, z0;
	    d3_geo_centroid.point = function(λ, φ) {
	      λ00 = λ, φ00 = φ;
	      d3_geo_centroid.point = nextPoint;
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians);
	      x0 = cosφ * Math.cos(λ);
	      y0 = cosφ * Math.sin(λ);
	      z0 = Math.sin(φ);
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    };
	    d3_geo_centroid.lineEnd = function() {
	      nextPoint(λ00, φ00);
	      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
	      d3_geo_centroid.point = d3_geo_centroidPoint;
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
	      d3_geo_centroidX2 += v * cx;
	      d3_geo_centroidY2 += v * cy;
	      d3_geo_centroidZ2 += v * cz;
	      d3_geo_centroidW1 += w;
	      d3_geo_centroidX1 += w * (x0 + (x0 = x));
	      d3_geo_centroidY1 += w * (y0 + (y0 = y));
	      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    }
	  }
	  function d3_true() {
	    return true;
	  }
	  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
	    var subject = [], clip = [];
	    segments.forEach(function(segment) {
	      if ((n = segment.length - 1) <= 0) return;
	      var n, p0 = segment[0], p1 = segment[n];
	      if (d3_geo_sphericalEqual(p0, p1)) {
	        listener.lineStart();
	        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
	        listener.lineEnd();
	        return;
	      }
	      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
	      a.o = b;
	      subject.push(a);
	      clip.push(b);
	      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
	      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
	      a.o = b;
	      subject.push(a);
	      clip.push(b);
	    });
	    clip.sort(compare);
	    d3_geo_clipPolygonLinkCircular(subject);
	    d3_geo_clipPolygonLinkCircular(clip);
	    if (!subject.length) return;
	    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
	      clip[i].e = entry = !entry;
	    }
	    var start = subject[0], points, point;
	    while (1) {
	      var current = start, isSubject = true;
	      while (current.v) if ((current = current.n) === start) return;
	      points = current.z;
	      listener.lineStart();
	      do {
	        current.v = current.o.v = true;
	        if (current.e) {
	          if (isSubject) {
	            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
	          } else {
	            interpolate(current.x, current.n.x, 1, listener);
	          }
	          current = current.n;
	        } else {
	          if (isSubject) {
	            points = current.p.z;
	            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
	          } else {
	            interpolate(current.x, current.p.x, -1, listener);
	          }
	          current = current.p;
	        }
	        current = current.o;
	        points = current.z;
	        isSubject = !isSubject;
	      } while (!current.v);
	      listener.lineEnd();
	    }
	  }
	  function d3_geo_clipPolygonLinkCircular(array) {
	    if (!(n = array.length)) return;
	    var n, i = 0, a = array[0], b;
	    while (++i < n) {
	      a.n = b = array[i];
	      b.p = a;
	      a = b;
	    }
	    a.n = b = array[0];
	    b.p = a;
	  }
	  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
	    this.x = point;
	    this.z = points;
	    this.o = other;
	    this.e = entry;
	    this.v = false;
	    this.n = this.p = null;
	  }
	  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
	    return function(rotate, listener) {
	      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
	      var clip = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          clip.point = pointRing;
	          clip.lineStart = ringStart;
	          clip.lineEnd = ringEnd;
	          segments = [];
	          polygon = [];
	        },
	        polygonEnd: function() {
	          clip.point = point;
	          clip.lineStart = lineStart;
	          clip.lineEnd = lineEnd;
	          segments = d3.merge(segments);
	          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
	          if (segments.length) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
	          } else if (clipStartInside) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            listener.lineStart();
	            interpolate(null, null, 1, listener);
	            listener.lineEnd();
	          }
	          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;
	          segments = polygon = null;
	        },
	        sphere: function() {
	          listener.polygonStart();
	          listener.lineStart();
	          interpolate(null, null, 1, listener);
	          listener.lineEnd();
	          listener.polygonEnd();
	        }
	      };
	      function point(λ, φ) {
	        var point = rotate(λ, φ);
	        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
	      }
	      function pointLine(λ, φ) {
	        var point = rotate(λ, φ);
	        line.point(point[0], point[1]);
	      }
	      function lineStart() {
	        clip.point = pointLine;
	        line.lineStart();
	      }
	      function lineEnd() {
	        clip.point = point;
	        line.lineEnd();
	      }
	      var segments;
	      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
	      function pointRing(λ, φ) {
	        ring.push([ λ, φ ]);
	        var point = rotate(λ, φ);
	        ringListener.point(point[0], point[1]);
	      }
	      function ringStart() {
	        ringListener.lineStart();
	        ring = [];
	      }
	      function ringEnd() {
	        pointRing(ring[0][0], ring[0][1]);
	        ringListener.lineEnd();
	        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
	        ring.pop();
	        polygon.push(ring);
	        ring = null;
	        if (!n) return;
	        if (clean & 1) {
	          segment = ringSegments[0];
	          var n = segment.length - 1, i = -1, point;
	          if (n > 0) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            listener.lineStart();
	            while (++i < n) listener.point((point = segment[i])[0], point[1]);
	            listener.lineEnd();
	          }
	          return;
	        }
	        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
	        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
	      }
	      return clip;
	    };
	  }
	  function d3_geo_clipSegmentLength1(segment) {
	    return segment.length > 1;
	  }
	  function d3_geo_clipBufferListener() {
	    var lines = [], line;
	    return {
	      lineStart: function() {
	        lines.push(line = []);
	      },
	      point: function(λ, φ) {
	        line.push([ λ, φ ]);
	      },
	      lineEnd: d3_noop,
	      buffer: function() {
	        var buffer = lines;
	        lines = [];
	        line = null;
	        return buffer;
	      },
	      rejoin: function() {
	        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
	      }
	    };
	  }
	  function d3_geo_clipSort(a, b) {
	    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
	  }
	  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
	  function d3_geo_clipAntimeridianLine(listener) {
	    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
	    return {
	      lineStart: function() {
	        listener.lineStart();
	        clean = 1;
	      },
	      point: function(λ1, φ1) {
	        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
	        if (abs(dλ - π) < ε) {
	          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
	          listener.point(sλ0, φ0);
	          listener.lineEnd();
	          listener.lineStart();
	          listener.point(sλ1, φ0);
	          listener.point(λ1, φ0);
	          clean = 0;
	        } else if (sλ0 !== sλ1 && dλ >= π) {
	          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
	          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
	          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
	          listener.point(sλ0, φ0);
	          listener.lineEnd();
	          listener.lineStart();
	          listener.point(sλ1, φ0);
	          clean = 0;
	        }
	        listener.point(λ0 = λ1, φ0 = φ1);
	        sλ0 = sλ1;
	      },
	      lineEnd: function() {
	        listener.lineEnd();
	        λ0 = φ0 = NaN;
	      },
	      clean: function() {
	        return 2 - clean;
	      }
	    };
	  }
	  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
	    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
	    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
	  }
	  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
	    var φ;
	    if (from == null) {
	      φ = direction * halfπ;
	      listener.point(-π, φ);
	      listener.point(0, φ);
	      listener.point(π, φ);
	      listener.point(π, 0);
	      listener.point(π, -φ);
	      listener.point(0, -φ);
	      listener.point(-π, -φ);
	      listener.point(-π, 0);
	      listener.point(-π, φ);
	    } else if (abs(from[0] - to[0]) > ε) {
	      var s = from[0] < to[0] ? π : -π;
	      φ = direction * s / 2;
	      listener.point(-s, φ);
	      listener.point(0, φ);
	      listener.point(s, φ);
	    } else {
	      listener.point(to[0], to[1]);
	    }
	  }
	  function d3_geo_pointInPolygon(point, polygon) {
	    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
	    d3_geo_areaRingSum.reset();
	    for (var i = 0, n = polygon.length; i < n; ++i) {
	      var ring = polygon[i], m = ring.length;
	      if (!m) continue;
	      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
	      while (true) {
	        if (j === m) j = 0;
	        point = ring[j];
	        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
	        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
	        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
	        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
	          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
	          d3_geo_cartesianNormalize(arc);
	          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
	          d3_geo_cartesianNormalize(intersection);
	          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
	          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
	            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
	          }
	        }
	        if (!j++) break;
	        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
	      }
	    }
	    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < 0) ^ winding & 1;
	  }
	  function d3_geo_clipCircle(radius) {
	    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
	    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);
	    function visible(λ, φ) {
	      return Math.cos(λ) * Math.cos(φ) > cr;
	    }
	    function clipLine(listener) {
	      var point0, c0, v0, v00, clean;
	      return {
	        lineStart: function() {
	          v00 = v0 = false;
	          clean = 1;
	        },
	        point: function(λ, φ) {
	          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
	          if (!point0 && (v00 = v0 = v)) listener.lineStart();
	          if (v !== v0) {
	            point2 = intersect(point0, point1);
	            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
	              point1[0] += ε;
	              point1[1] += ε;
	              v = visible(point1[0], point1[1]);
	            }
	          }
	          if (v !== v0) {
	            clean = 0;
	            if (v) {
	              listener.lineStart();
	              point2 = intersect(point1, point0);
	              listener.point(point2[0], point2[1]);
	            } else {
	              point2 = intersect(point0, point1);
	              listener.point(point2[0], point2[1]);
	              listener.lineEnd();
	            }
	            point0 = point2;
	          } else if (notHemisphere && point0 && smallRadius ^ v) {
	            var t;
	            if (!(c & c0) && (t = intersect(point1, point0, true))) {
	              clean = 0;
	              if (smallRadius) {
	                listener.lineStart();
	                listener.point(t[0][0], t[0][1]);
	                listener.point(t[1][0], t[1][1]);
	                listener.lineEnd();
	              } else {
	                listener.point(t[1][0], t[1][1]);
	                listener.lineEnd();
	                listener.lineStart();
	                listener.point(t[0][0], t[0][1]);
	              }
	            }
	          }
	          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
	            listener.point(point1[0], point1[1]);
	          }
	          point0 = point1, v0 = v, c0 = c;
	        },
	        lineEnd: function() {
	          if (v0) listener.lineEnd();
	          point0 = null;
	        },
	        clean: function() {
	          return clean | (v00 && v0) << 1;
	        }
	      };
	    }
	    function intersect(a, b, two) {
	      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
	      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
	      if (!determinant) return !two && a;
	      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
	      d3_geo_cartesianAdd(A, B);
	      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
	      if (t2 < 0) return;
	      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
	      d3_geo_cartesianAdd(q, A);
	      q = d3_geo_spherical(q);
	      if (!two) return q;
	      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
	      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
	      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
	      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
	      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
	        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
	        d3_geo_cartesianAdd(q1, A);
	        return [ q, d3_geo_spherical(q1) ];
	      }
	    }
	    function code(λ, φ) {
	      var r = smallRadius ? radius : π - radius, code = 0;
	      if (λ < -r) code |= 1; else if (λ > r) code |= 2;
	      if (φ < -r) code |= 4; else if (φ > r) code |= 8;
	      return code;
	    }
	  }
	  function d3_geom_clipLine(x0, y0, x1, y1) {
	    return function(line) {
	      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
	      r = x0 - ax;
	      if (!dx && r > 0) return;
	      r /= dx;
	      if (dx < 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      } else if (dx > 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      }
	      r = x1 - ax;
	      if (!dx && r < 0) return;
	      r /= dx;
	      if (dx < 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      } else if (dx > 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      }
	      r = y0 - ay;
	      if (!dy && r > 0) return;
	      r /= dy;
	      if (dy < 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      } else if (dy > 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      }
	      r = y1 - ay;
	      if (!dy && r < 0) return;
	      r /= dy;
	      if (dy < 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      } else if (dy > 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      }
	      if (t0 > 0) line.a = {
	        x: ax + t0 * dx,
	        y: ay + t0 * dy
	      };
	      if (t1 < 1) line.b = {
	        x: ax + t1 * dx,
	        y: ay + t1 * dy
	      };
	      return line;
	    };
	  }
	  var d3_geo_clipExtentMAX = 1e9;
	  d3.geo.clipExtent = function() {
	    var x0, y0, x1, y1, stream, clip, clipExtent = {
	      stream: function(output) {
	        if (stream) stream.valid = false;
	        stream = clip(output);
	        stream.valid = true;
	        return stream;
	      },
	      extent: function(_) {
	        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
	        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
	        if (stream) stream.valid = false, stream = null;
	        return clipExtent;
	      }
	    };
	    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
	  };
	  function d3_geo_clipExtent(x0, y0, x1, y1) {
	    return function(listener) {
	      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
	      var clip = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          listener = bufferListener;
	          segments = [];
	          polygon = [];
	          clean = true;
	        },
	        polygonEnd: function() {
	          listener = listener_;
	          segments = d3.merge(segments);
	          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
	          if (inside || visible) {
	            listener.polygonStart();
	            if (inside) {
	              listener.lineStart();
	              interpolate(null, null, 1, listener);
	              listener.lineEnd();
	            }
	            if (visible) {
	              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
	            }
	            listener.polygonEnd();
	          }
	          segments = polygon = ring = null;
	        }
	      };
	      function insidePolygon(p) {
	        var wn = 0, n = polygon.length, y = p[1];
	        for (var i = 0; i < n; ++i) {
	          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
	            b = v[j];
	            if (a[1] <= y) {
	              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
	            } else {
	              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
	            }
	            a = b;
	          }
	        }
	        return wn !== 0;
	      }
	      function interpolate(from, to, direction, listener) {
	        var a = 0, a1 = 0;
	        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
	          do {
	            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
	          } while ((a = (a + direction + 4) % 4) !== a1);
	        } else {
	          listener.point(to[0], to[1]);
	        }
	      }
	      function pointVisible(x, y) {
	        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
	      }
	      function point(x, y) {
	        if (pointVisible(x, y)) listener.point(x, y);
	      }
	      var x__, y__, v__, x_, y_, v_, first, clean;
	      function lineStart() {
	        clip.point = linePoint;
	        if (polygon) polygon.push(ring = []);
	        first = true;
	        v_ = false;
	        x_ = y_ = NaN;
	      }
	      function lineEnd() {
	        if (segments) {
	          linePoint(x__, y__);
	          if (v__ && v_) bufferListener.rejoin();
	          segments.push(bufferListener.buffer());
	        }
	        clip.point = point;
	        if (v_) listener.lineEnd();
	      }
	      function linePoint(x, y) {
	        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
	        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
	        var v = pointVisible(x, y);
	        if (polygon) ring.push([ x, y ]);
	        if (first) {
	          x__ = x, y__ = y, v__ = v;
	          first = false;
	          if (v) {
	            listener.lineStart();
	            listener.point(x, y);
	          }
	        } else {
	          if (v && v_) listener.point(x, y); else {
	            var l = {
	              a: {
	                x: x_,
	                y: y_
	              },
	              b: {
	                x: x,
	                y: y
	              }
	            };
	            if (clipLine(l)) {
	              if (!v_) {
	                listener.lineStart();
	                listener.point(l.a.x, l.a.y);
	              }
	              listener.point(l.b.x, l.b.y);
	              if (!v) listener.lineEnd();
	              clean = false;
	            } else if (v) {
	              listener.lineStart();
	              listener.point(x, y);
	              clean = false;
	            }
	          }
	        }
	        x_ = x, y_ = y, v_ = v;
	      }
	      return clip;
	    };
	    function corner(p, direction) {
	      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
	    }
	    function compare(a, b) {
	      return comparePoints(a.x, b.x);
	    }
	    function comparePoints(a, b) {
	      var ca = corner(a, 1), cb = corner(b, 1);
	      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
	    }
	  }
	  function d3_geo_compose(a, b) {
	    function compose(x, y) {
	      return x = a(x, y), b(x[0], x[1]);
	    }
	    if (a.invert && b.invert) compose.invert = function(x, y) {
	      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
	    };
	    return compose;
	  }
	  function d3_geo_conic(projectAt) {
	    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
	    p.parallels = function(_) {
	      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
	      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
	    };
	    return p;
	  }
	  function d3_geo_conicEqualArea(φ0, φ1) {
	    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
	    function forward(λ, φ) {
	      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
	      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = ρ0 - y;
	      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
	    };
	    return forward;
	  }
	  (d3.geo.conicEqualArea = function() {
	    return d3_geo_conic(d3_geo_conicEqualArea);
	  }).raw = d3_geo_conicEqualArea;
	  d3.geo.albers = function() {
	    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
	  };
	  d3.geo.albersUsa = function() {
	    var lower48 = d3.geo.albers();
	    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
	    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
	    var point, pointStream = {
	      point: function(x, y) {
	        point = [ x, y ];
	      }
	    }, lower48Point, alaskaPoint, hawaiiPoint;
	    function albersUsa(coordinates) {
	      var x = coordinates[0], y = coordinates[1];
	      point = null;
	      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
	      return point;
	    }
	    albersUsa.invert = function(coordinates) {
	      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
	      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
	    };
	    albersUsa.stream = function(stream) {
	      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
	      return {
	        point: function(x, y) {
	          lower48Stream.point(x, y);
	          alaskaStream.point(x, y);
	          hawaiiStream.point(x, y);
	        },
	        sphere: function() {
	          lower48Stream.sphere();
	          alaskaStream.sphere();
	          hawaiiStream.sphere();
	        },
	        lineStart: function() {
	          lower48Stream.lineStart();
	          alaskaStream.lineStart();
	          hawaiiStream.lineStart();
	        },
	        lineEnd: function() {
	          lower48Stream.lineEnd();
	          alaskaStream.lineEnd();
	          hawaiiStream.lineEnd();
	        },
	        polygonStart: function() {
	          lower48Stream.polygonStart();
	          alaskaStream.polygonStart();
	          hawaiiStream.polygonStart();
	        },
	        polygonEnd: function() {
	          lower48Stream.polygonEnd();
	          alaskaStream.polygonEnd();
	          hawaiiStream.polygonEnd();
	        }
	      };
	    };
	    albersUsa.precision = function(_) {
	      if (!arguments.length) return lower48.precision();
	      lower48.precision(_);
	      alaska.precision(_);
	      hawaii.precision(_);
	      return albersUsa;
	    };
	    albersUsa.scale = function(_) {
	      if (!arguments.length) return lower48.scale();
	      lower48.scale(_);
	      alaska.scale(_ * .35);
	      hawaii.scale(_);
	      return albersUsa.translate(lower48.translate());
	    };
	    albersUsa.translate = function(_) {
	      if (!arguments.length) return lower48.translate();
	      var k = lower48.scale(), x = +_[0], y = +_[1];
	      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
	      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
	      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
	      return albersUsa;
	    };
	    return albersUsa.scale(1070);
	  };
	  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
	    point: d3_noop,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: function() {
	      d3_geo_pathAreaPolygon = 0;
	      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
	      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
	    }
	  };
	  function d3_geo_pathAreaRingStart() {
	    var x00, y00, x0, y0;
	    d3_geo_pathArea.point = function(x, y) {
	      d3_geo_pathArea.point = nextPoint;
	      x00 = x0 = x, y00 = y0 = y;
	    };
	    function nextPoint(x, y) {
	      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
	      x0 = x, y0 = y;
	    }
	    d3_geo_pathArea.lineEnd = function() {
	      nextPoint(x00, y00);
	    };
	  }
	  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
	  var d3_geo_pathBounds = {
	    point: d3_geo_pathBoundsPoint,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: d3_noop,
	    polygonEnd: d3_noop
	  };
	  function d3_geo_pathBoundsPoint(x, y) {
	    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
	    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
	    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
	    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
	  }
	  function d3_geo_pathBuffer() {
	    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
	    var stream = {
	      point: point,
	      lineStart: function() {
	        stream.point = pointLineStart;
	      },
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        stream.lineEnd = lineEndPolygon;
	      },
	      polygonEnd: function() {
	        stream.lineEnd = lineEnd;
	        stream.point = point;
	      },
	      pointRadius: function(_) {
	        pointCircle = d3_geo_pathBufferCircle(_);
	        return stream;
	      },
	      result: function() {
	        if (buffer.length) {
	          var result = buffer.join("");
	          buffer = [];
	          return result;
	        }
	      }
	    };
	    function point(x, y) {
	      buffer.push("M", x, ",", y, pointCircle);
	    }
	    function pointLineStart(x, y) {
	      buffer.push("M", x, ",", y);
	      stream.point = pointLine;
	    }
	    function pointLine(x, y) {
	      buffer.push("L", x, ",", y);
	    }
	    function lineEnd() {
	      stream.point = point;
	    }
	    function lineEndPolygon() {
	      buffer.push("Z");
	    }
	    return stream;
	  }
	  function d3_geo_pathBufferCircle(radius) {
	    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
	  }
	  var d3_geo_pathCentroid = {
	    point: d3_geo_pathCentroidPoint,
	    lineStart: d3_geo_pathCentroidLineStart,
	    lineEnd: d3_geo_pathCentroidLineEnd,
	    polygonStart: function() {
	      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
	      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
	      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
	    }
	  };
	  function d3_geo_pathCentroidPoint(x, y) {
	    d3_geo_centroidX0 += x;
	    d3_geo_centroidY0 += y;
	    ++d3_geo_centroidZ0;
	  }
	  function d3_geo_pathCentroidLineStart() {
	    var x0, y0;
	    d3_geo_pathCentroid.point = function(x, y) {
	      d3_geo_pathCentroid.point = nextPoint;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    };
	    function nextPoint(x, y) {
	      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
	      d3_geo_centroidX1 += z * (x0 + x) / 2;
	      d3_geo_centroidY1 += z * (y0 + y) / 2;
	      d3_geo_centroidZ1 += z;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    }
	  }
	  function d3_geo_pathCentroidLineEnd() {
	    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
	  }
	  function d3_geo_pathCentroidRingStart() {
	    var x00, y00, x0, y0;
	    d3_geo_pathCentroid.point = function(x, y) {
	      d3_geo_pathCentroid.point = nextPoint;
	      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
	    };
	    function nextPoint(x, y) {
	      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
	      d3_geo_centroidX1 += z * (x0 + x) / 2;
	      d3_geo_centroidY1 += z * (y0 + y) / 2;
	      d3_geo_centroidZ1 += z;
	      z = y0 * x - x0 * y;
	      d3_geo_centroidX2 += z * (x0 + x);
	      d3_geo_centroidY2 += z * (y0 + y);
	      d3_geo_centroidZ2 += z * 3;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    }
	    d3_geo_pathCentroid.lineEnd = function() {
	      nextPoint(x00, y00);
	    };
	  }
	  function d3_geo_pathContext(context) {
	    var pointRadius = 4.5;
	    var stream = {
	      point: point,
	      lineStart: function() {
	        stream.point = pointLineStart;
	      },
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        stream.lineEnd = lineEndPolygon;
	      },
	      polygonEnd: function() {
	        stream.lineEnd = lineEnd;
	        stream.point = point;
	      },
	      pointRadius: function(_) {
	        pointRadius = _;
	        return stream;
	      },
	      result: d3_noop
	    };
	    function point(x, y) {
	      context.moveTo(x, y);
	      context.arc(x, y, pointRadius, 0, τ);
	    }
	    function pointLineStart(x, y) {
	      context.moveTo(x, y);
	      stream.point = pointLine;
	    }
	    function pointLine(x, y) {
	      context.lineTo(x, y);
	    }
	    function lineEnd() {
	      stream.point = point;
	    }
	    function lineEndPolygon() {
	      context.closePath();
	    }
	    return stream;
	  }
	  function d3_geo_resample(project) {
	    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
	    function resample(stream) {
	      return (maxDepth ? resampleRecursive : resampleNone)(stream);
	    }
	    function resampleNone(stream) {
	      return d3_geo_transformPoint(stream, function(x, y) {
	        x = project(x, y);
	        stream.point(x[0], x[1]);
	      });
	    }
	    function resampleRecursive(stream) {
	      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
	      var resample = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          stream.polygonStart();
	          resample.lineStart = ringStart;
	        },
	        polygonEnd: function() {
	          stream.polygonEnd();
	          resample.lineStart = lineStart;
	        }
	      };
	      function point(x, y) {
	        x = project(x, y);
	        stream.point(x[0], x[1]);
	      }
	      function lineStart() {
	        x0 = NaN;
	        resample.point = linePoint;
	        stream.lineStart();
	      }
	      function linePoint(λ, φ) {
	        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
	        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
	        stream.point(x0, y0);
	      }
	      function lineEnd() {
	        resample.point = point;
	        stream.lineEnd();
	      }
	      function ringStart() {
	        lineStart();
	        resample.point = ringPoint;
	        resample.lineEnd = ringEnd;
	      }
	      function ringPoint(λ, φ) {
	        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
	        resample.point = linePoint;
	      }
	      function ringEnd() {
	        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
	        resample.lineEnd = lineEnd;
	        lineEnd();
	      }
	      return resample;
	    }
	    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
	      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
	      if (d2 > 4 * δ2 && depth--) {
	        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
	        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
	          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
	          stream.point(x2, y2);
	          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
	        }
	      }
	    }
	    resample.precision = function(_) {
	      if (!arguments.length) return Math.sqrt(δ2);
	      maxDepth = (δ2 = _ * _) > 0 && 16;
	      return resample;
	    };
	    return resample;
	  }
	  d3.geo.path = function() {
	    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
	    function path(object) {
	      if (object) {
	        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
	        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
	        d3.geo.stream(object, cacheStream);
	      }
	      return contextStream.result();
	    }
	    path.area = function(object) {
	      d3_geo_pathAreaSum = 0;
	      d3.geo.stream(object, projectStream(d3_geo_pathArea));
	      return d3_geo_pathAreaSum;
	    };
	    path.centroid = function(object) {
	      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
	      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
	      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
	    };
	    path.bounds = function(object) {
	      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
	      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
	      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
	    };
	    path.projection = function(_) {
	      if (!arguments.length) return projection;
	      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
	      return reset();
	    };
	    path.context = function(_) {
	      if (!arguments.length) return context;
	      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
	      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
	      return reset();
	    };
	    path.pointRadius = function(_) {
	      if (!arguments.length) return pointRadius;
	      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
	      return path;
	    };
	    function reset() {
	      cacheStream = null;
	      return path;
	    }
	    return path.projection(d3.geo.albersUsa()).context(null);
	  };
	  function d3_geo_pathProjectStream(project) {
	    var resample = d3_geo_resample(function(x, y) {
	      return project([ x * d3_degrees, y * d3_degrees ]);
	    });
	    return function(stream) {
	      return d3_geo_projectionRadians(resample(stream));
	    };
	  }
	  d3.geo.transform = function(methods) {
	    return {
	      stream: function(stream) {
	        var transform = new d3_geo_transform(stream);
	        for (var k in methods) transform[k] = methods[k];
	        return transform;
	      }
	    };
	  };
	  function d3_geo_transform(stream) {
	    this.stream = stream;
	  }
	  d3_geo_transform.prototype = {
	    point: function(x, y) {
	      this.stream.point(x, y);
	    },
	    sphere: function() {
	      this.stream.sphere();
	    },
	    lineStart: function() {
	      this.stream.lineStart();
	    },
	    lineEnd: function() {
	      this.stream.lineEnd();
	    },
	    polygonStart: function() {
	      this.stream.polygonStart();
	    },
	    polygonEnd: function() {
	      this.stream.polygonEnd();
	    }
	  };
	  function d3_geo_transformPoint(stream, point) {
	    return {
	      point: point,
	      sphere: function() {
	        stream.sphere();
	      },
	      lineStart: function() {
	        stream.lineStart();
	      },
	      lineEnd: function() {
	        stream.lineEnd();
	      },
	      polygonStart: function() {
	        stream.polygonStart();
	      },
	      polygonEnd: function() {
	        stream.polygonEnd();
	      }
	    };
	  }
	  d3.geo.projection = d3_geo_projection;
	  d3.geo.projectionMutator = d3_geo_projectionMutator;
	  function d3_geo_projection(project) {
	    return d3_geo_projectionMutator(function() {
	      return project;
	    })();
	  }
	  function d3_geo_projectionMutator(projectAt) {
	    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
	      x = project(x, y);
	      return [ x[0] * k + δx, δy - x[1] * k ];
	    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
	    function projection(point) {
	      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
	      return [ point[0] * k + δx, δy - point[1] * k ];
	    }
	    function invert(point) {
	      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
	      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
	    }
	    projection.stream = function(output) {
	      if (stream) stream.valid = false;
	      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
	      stream.valid = true;
	      return stream;
	    };
	    projection.clipAngle = function(_) {
	      if (!arguments.length) return clipAngle;
	      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
	      return invalidate();
	    };
	    projection.clipExtent = function(_) {
	      if (!arguments.length) return clipExtent;
	      clipExtent = _;
	      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
	      return invalidate();
	    };
	    projection.scale = function(_) {
	      if (!arguments.length) return k;
	      k = +_;
	      return reset();
	    };
	    projection.translate = function(_) {
	      if (!arguments.length) return [ x, y ];
	      x = +_[0];
	      y = +_[1];
	      return reset();
	    };
	    projection.center = function(_) {
	      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
	      λ = _[0] % 360 * d3_radians;
	      φ = _[1] % 360 * d3_radians;
	      return reset();
	    };
	    projection.rotate = function(_) {
	      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
	      δλ = _[0] % 360 * d3_radians;
	      δφ = _[1] % 360 * d3_radians;
	      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
	      return reset();
	    };
	    d3.rebind(projection, projectResample, "precision");
	    function reset() {
	      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
	      var center = project(λ, φ);
	      δx = x - center[0] * k;
	      δy = y + center[1] * k;
	      return invalidate();
	    }
	    function invalidate() {
	      if (stream) stream.valid = false, stream = null;
	      return projection;
	    }
	    return function() {
	      project = projectAt.apply(this, arguments);
	      projection.invert = project.invert && invert;
	      return reset();
	    };
	  }
	  function d3_geo_projectionRadians(stream) {
	    return d3_geo_transformPoint(stream, function(x, y) {
	      stream.point(x * d3_radians, y * d3_radians);
	    });
	  }
	  function d3_geo_equirectangular(λ, φ) {
	    return [ λ, φ ];
	  }
	  (d3.geo.equirectangular = function() {
	    return d3_geo_projection(d3_geo_equirectangular);
	  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
	  d3.geo.rotation = function(rotate) {
	    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
	    function forward(coordinates) {
	      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
	      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
	    }
	    forward.invert = function(coordinates) {
	      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
	      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
	    };
	    return forward;
	  };
	  function d3_geo_identityRotation(λ, φ) {
	    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
	  }
	  d3_geo_identityRotation.invert = d3_geo_equirectangular;
	  function d3_geo_rotation(δλ, δφ, δγ) {
	    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
	  }
	  function d3_geo_forwardRotationλ(δλ) {
	    return function(λ, φ) {
	      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
	    };
	  }
	  function d3_geo_rotationλ(δλ) {
	    var rotation = d3_geo_forwardRotationλ(δλ);
	    rotation.invert = d3_geo_forwardRotationλ(-δλ);
	    return rotation;
	  }
	  function d3_geo_rotationφγ(δφ, δγ) {
	    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
	    function rotation(λ, φ) {
	      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
	      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
	    }
	    rotation.invert = function(λ, φ) {
	      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
	      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
	    };
	    return rotation;
	  }
	  d3.geo.circle = function() {
	    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
	    function circle() {
	      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
	      interpolate(null, null, 1, {
	        point: function(x, y) {
	          ring.push(x = rotate(x, y));
	          x[0] *= d3_degrees, x[1] *= d3_degrees;
	        }
	      });
	      return {
	        type: "Polygon",
	        coordinates: [ ring ]
	      };
	    }
	    circle.origin = function(x) {
	      if (!arguments.length) return origin;
	      origin = x;
	      return circle;
	    };
	    circle.angle = function(x) {
	      if (!arguments.length) return angle;
	      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
	      return circle;
	    };
	    circle.precision = function(_) {
	      if (!arguments.length) return precision;
	      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
	      return circle;
	    };
	    return circle.angle(90);
	  };
	  function d3_geo_circleInterpolate(radius, precision) {
	    var cr = Math.cos(radius), sr = Math.sin(radius);
	    return function(from, to, direction, listener) {
	      var step = direction * precision;
	      if (from != null) {
	        from = d3_geo_circleAngle(cr, from);
	        to = d3_geo_circleAngle(cr, to);
	        if (direction > 0 ? from < to : from > to) from += direction * τ;
	      } else {
	        from = radius + direction * τ;
	        to = radius - .5 * step;
	      }
	      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
	        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
	      }
	    };
	  }
	  function d3_geo_circleAngle(cr, point) {
	    var a = d3_geo_cartesian(point);
	    a[0] -= cr;
	    d3_geo_cartesianNormalize(a);
	    var angle = d3_acos(-a[1]);
	    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
	  }
	  d3.geo.distance = function(a, b) {
	    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
	    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
	  };
	  d3.geo.graticule = function() {
	    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
	    function graticule() {
	      return {
	        type: "MultiLineString",
	        coordinates: lines()
	      };
	    }
	    function lines() {
	      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
	        return abs(x % DX) > ε;
	      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
	        return abs(y % DY) > ε;
	      }).map(y));
	    }
	    graticule.lines = function() {
	      return lines().map(function(coordinates) {
	        return {
	          type: "LineString",
	          coordinates: coordinates
	        };
	      });
	    };
	    graticule.outline = function() {
	      return {
	        type: "Polygon",
	        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
	      };
	    };
	    graticule.extent = function(_) {
	      if (!arguments.length) return graticule.minorExtent();
	      return graticule.majorExtent(_).minorExtent(_);
	    };
	    graticule.majorExtent = function(_) {
	      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
	      X0 = +_[0][0], X1 = +_[1][0];
	      Y0 = +_[0][1], Y1 = +_[1][1];
	      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
	      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
	      return graticule.precision(precision);
	    };
	    graticule.minorExtent = function(_) {
	      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
	      x0 = +_[0][0], x1 = +_[1][0];
	      y0 = +_[0][1], y1 = +_[1][1];
	      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
	      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
	      return graticule.precision(precision);
	    };
	    graticule.step = function(_) {
	      if (!arguments.length) return graticule.minorStep();
	      return graticule.majorStep(_).minorStep(_);
	    };
	    graticule.majorStep = function(_) {
	      if (!arguments.length) return [ DX, DY ];
	      DX = +_[0], DY = +_[1];
	      return graticule;
	    };
	    graticule.minorStep = function(_) {
	      if (!arguments.length) return [ dx, dy ];
	      dx = +_[0], dy = +_[1];
	      return graticule;
	    };
	    graticule.precision = function(_) {
	      if (!arguments.length) return precision;
	      precision = +_;
	      x = d3_geo_graticuleX(y0, y1, 90);
	      y = d3_geo_graticuleY(x0, x1, precision);
	      X = d3_geo_graticuleX(Y0, Y1, 90);
	      Y = d3_geo_graticuleY(X0, X1, precision);
	      return graticule;
	    };
	    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
	  };
	  function d3_geo_graticuleX(y0, y1, dy) {
	    var y = d3.range(y0, y1 - ε, dy).concat(y1);
	    return function(x) {
	      return y.map(function(y) {
	        return [ x, y ];
	      });
	    };
	  }
	  function d3_geo_graticuleY(x0, x1, dx) {
	    var x = d3.range(x0, x1 - ε, dx).concat(x1);
	    return function(y) {
	      return x.map(function(x) {
	        return [ x, y ];
	      });
	    };
	  }
	  function d3_source(d) {
	    return d.source;
	  }
	  function d3_target(d) {
	    return d.target;
	  }
	  d3.geo.greatArc = function() {
	    var source = d3_source, source_, target = d3_target, target_;
	    function greatArc() {
	      return {
	        type: "LineString",
	        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
	      };
	    }
	    greatArc.distance = function() {
	      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
	    };
	    greatArc.source = function(_) {
	      if (!arguments.length) return source;
	      source = _, source_ = typeof _ === "function" ? null : _;
	      return greatArc;
	    };
	    greatArc.target = function(_) {
	      if (!arguments.length) return target;
	      target = _, target_ = typeof _ === "function" ? null : _;
	      return greatArc;
	    };
	    greatArc.precision = function() {
	      return arguments.length ? greatArc : 0;
	    };
	    return greatArc;
	  };
	  d3.geo.interpolate = function(source, target) {
	    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
	  };
	  function d3_geo_interpolate(x0, y0, x1, y1) {
	    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
	    var interpolate = d ? function(t) {
	      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
	      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
	    } : function() {
	      return [ x0 * d3_degrees, y0 * d3_degrees ];
	    };
	    interpolate.distance = d;
	    return interpolate;
	  }
	  d3.geo.length = function(object) {
	    d3_geo_lengthSum = 0;
	    d3.geo.stream(object, d3_geo_length);
	    return d3_geo_lengthSum;
	  };
	  var d3_geo_lengthSum;
	  var d3_geo_length = {
	    sphere: d3_noop,
	    point: d3_noop,
	    lineStart: d3_geo_lengthLineStart,
	    lineEnd: d3_noop,
	    polygonStart: d3_noop,
	    polygonEnd: d3_noop
	  };
	  function d3_geo_lengthLineStart() {
	    var λ0, sinφ0, cosφ0;
	    d3_geo_length.point = function(λ, φ) {
	      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
	      d3_geo_length.point = nextPoint;
	    };
	    d3_geo_length.lineEnd = function() {
	      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
	    };
	    function nextPoint(λ, φ) {
	      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
	      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
	      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
	    }
	  }
	  function d3_geo_azimuthal(scale, angle) {
	    function azimuthal(λ, φ) {
	      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
	      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
	    }
	    azimuthal.invert = function(x, y) {
	      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
	      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
	    };
	    return azimuthal;
	  }
	  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
	    return Math.sqrt(2 / (1 + cosλcosφ));
	  }, function(ρ) {
	    return 2 * Math.asin(ρ / 2);
	  });
	  (d3.geo.azimuthalEqualArea = function() {
	    return d3_geo_projection(d3_geo_azimuthalEqualArea);
	  }).raw = d3_geo_azimuthalEqualArea;
	  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
	    var c = Math.acos(cosλcosφ);
	    return c && c / Math.sin(c);
	  }, d3_identity);
	  (d3.geo.azimuthalEquidistant = function() {
	    return d3_geo_projection(d3_geo_azimuthalEquidistant);
	  }).raw = d3_geo_azimuthalEquidistant;
	  function d3_geo_conicConformal(φ0, φ1) {
	    var cosφ0 = Math.cos(φ0), t = function(φ) {
	      return Math.tan(π / 4 + φ / 2);
	    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
	    if (!n) return d3_geo_mercator;
	    function forward(λ, φ) {
	      if (F > 0) {
	        if (φ < -halfπ + ε) φ = -halfπ + ε;
	      } else {
	        if (φ > halfπ - ε) φ = halfπ - ε;
	      }
	      var ρ = F / Math.pow(t(φ), n);
	      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
	      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];
	    };
	    return forward;
	  }
	  (d3.geo.conicConformal = function() {
	    return d3_geo_conic(d3_geo_conicConformal);
	  }).raw = d3_geo_conicConformal;
	  function d3_geo_conicEquidistant(φ0, φ1) {
	    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
	    if (abs(n) < ε) return d3_geo_equirectangular;
	    function forward(λ, φ) {
	      var ρ = G - φ;
	      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = G - y;
	      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
	    };
	    return forward;
	  }
	  (d3.geo.conicEquidistant = function() {
	    return d3_geo_conic(d3_geo_conicEquidistant);
	  }).raw = d3_geo_conicEquidistant;
	  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
	    return 1 / cosλcosφ;
	  }, Math.atan);
	  (d3.geo.gnomonic = function() {
	    return d3_geo_projection(d3_geo_gnomonic);
	  }).raw = d3_geo_gnomonic;
	  function d3_geo_mercator(λ, φ) {
	    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
	  }
	  d3_geo_mercator.invert = function(x, y) {
	    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
	  };
	  function d3_geo_mercatorProjection(project) {
	    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
	    m.scale = function() {
	      var v = scale.apply(m, arguments);
	      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
	    };
	    m.translate = function() {
	      var v = translate.apply(m, arguments);
	      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
	    };
	    m.clipExtent = function(_) {
	      var v = clipExtent.apply(m, arguments);
	      if (v === m) {
	        if (clipAuto = _ == null) {
	          var k = π * scale(), t = translate();
	          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
	        }
	      } else if (clipAuto) {
	        v = null;
	      }
	      return v;
	    };
	    return m.clipExtent(null);
	  }
	  (d3.geo.mercator = function() {
	    return d3_geo_mercatorProjection(d3_geo_mercator);
	  }).raw = d3_geo_mercator;
	  var d3_geo_orthographic = d3_geo_azimuthal(function() {
	    return 1;
	  }, Math.asin);
	  (d3.geo.orthographic = function() {
	    return d3_geo_projection(d3_geo_orthographic);
	  }).raw = d3_geo_orthographic;
	  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
	    return 1 / (1 + cosλcosφ);
	  }, function(ρ) {
	    return 2 * Math.atan(ρ);
	  });
	  (d3.geo.stereographic = function() {
	    return d3_geo_projection(d3_geo_stereographic);
	  }).raw = d3_geo_stereographic;
	  function d3_geo_transverseMercator(λ, φ) {
	    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];
	  }
	  d3_geo_transverseMercator.invert = function(x, y) {
	    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];
	  };
	  (d3.geo.transverseMercator = function() {
	    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
	    projection.center = function(_) {
	      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);
	    };
	    projection.rotate = function(_) {
	      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), 
	      [ _[0], _[1], _[2] - 90 ]);
	    };
	    return rotate([ 0, 0, 90 ]);
	  }).raw = d3_geo_transverseMercator;
	  d3.geom = {};
	  function d3_geom_pointX(d) {
	    return d[0];
	  }
	  function d3_geom_pointY(d) {
	    return d[1];
	  }
	  d3.geom.hull = function(vertices) {
	    var x = d3_geom_pointX, y = d3_geom_pointY;
	    if (arguments.length) return hull(vertices);
	    function hull(data) {
	      if (data.length < 3) return [];
	      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
	      for (i = 0; i < n; i++) {
	        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);
	      }
	      points.sort(d3_geom_hullOrder);
	      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);
	      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
	      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
	      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);
	      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);
	      return polygon;
	    }
	    hull.x = function(_) {
	      return arguments.length ? (x = _, hull) : x;
	    };
	    hull.y = function(_) {
	      return arguments.length ? (y = _, hull) : y;
	    };
	    return hull;
	  };
	  function d3_geom_hullUpper(points) {
	    var n = points.length, hull = [ 0, 1 ], hs = 2;
	    for (var i = 2; i < n; i++) {
	      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;
	      hull[hs++] = i;
	    }
	    return hull.slice(0, hs);
	  }
	  function d3_geom_hullOrder(a, b) {
	    return a[0] - b[0] || a[1] - b[1];
	  }
	  d3.geom.polygon = function(coordinates) {
	    d3_subclass(coordinates, d3_geom_polygonPrototype);
	    return coordinates;
	  };
	  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
	  d3_geom_polygonPrototype.area = function() {
	    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
	    while (++i < n) {
	      a = b;
	      b = this[i];
	      area += a[1] * b[0] - a[0] * b[1];
	    }
	    return area * .5;
	  };
	  d3_geom_polygonPrototype.centroid = function(k) {
	    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
	    if (!arguments.length) k = -1 / (6 * this.area());
	    while (++i < n) {
	      a = b;
	      b = this[i];
	      c = a[0] * b[1] - b[0] * a[1];
	      x += (a[0] + b[0]) * c;
	      y += (a[1] + b[1]) * c;
	    }
	    return [ x * k, y * k ];
	  };
	  d3_geom_polygonPrototype.clip = function(subject) {
	    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
	    while (++i < n) {
	      input = subject.slice();
	      subject.length = 0;
	      b = this[i];
	      c = input[(m = input.length - closed) - 1];
	      j = -1;
	      while (++j < m) {
	        d = input[j];
	        if (d3_geom_polygonInside(d, a, b)) {
	          if (!d3_geom_polygonInside(c, a, b)) {
	            subject.push(d3_geom_polygonIntersect(c, d, a, b));
	          }
	          subject.push(d);
	        } else if (d3_geom_polygonInside(c, a, b)) {
	          subject.push(d3_geom_polygonIntersect(c, d, a, b));
	        }
	        c = d;
	      }
	      if (closed) subject.push(subject[0]);
	      a = b;
	    }
	    return subject;
	  };
	  function d3_geom_polygonInside(p, a, b) {
	    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
	  }
	  function d3_geom_polygonIntersect(c, d, a, b) {
	    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
	    return [ x1 + ua * x21, y1 + ua * y21 ];
	  }
	  function d3_geom_polygonClosed(coordinates) {
	    var a = coordinates[0], b = coordinates[coordinates.length - 1];
	    return !(a[0] - b[0] || a[1] - b[1]);
	  }
	  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
	  function d3_geom_voronoiBeach() {
	    d3_geom_voronoiRedBlackNode(this);
	    this.edge = this.site = this.circle = null;
	  }
	  function d3_geom_voronoiCreateBeach(site) {
	    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
	    beach.site = site;
	    return beach;
	  }
	  function d3_geom_voronoiDetachBeach(beach) {
	    d3_geom_voronoiDetachCircle(beach);
	    d3_geom_voronoiBeaches.remove(beach);
	    d3_geom_voronoiBeachPool.push(beach);
	    d3_geom_voronoiRedBlackNode(beach);
	  }
	  function d3_geom_voronoiRemoveBeach(beach) {
	    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
	      x: x,
	      y: y
	    }, previous = beach.P, next = beach.N, disappearing = [ beach ];
	    d3_geom_voronoiDetachBeach(beach);
	    var lArc = previous;
	    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
	      previous = lArc.P;
	      disappearing.unshift(lArc);
	      d3_geom_voronoiDetachBeach(lArc);
	      lArc = previous;
	    }
	    disappearing.unshift(lArc);
	    d3_geom_voronoiDetachCircle(lArc);
	    var rArc = next;
	    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
	      next = rArc.N;
	      disappearing.push(rArc);
	      d3_geom_voronoiDetachBeach(rArc);
	      rArc = next;
	    }
	    disappearing.push(rArc);
	    d3_geom_voronoiDetachCircle(rArc);
	    var nArcs = disappearing.length, iArc;
	    for (iArc = 1; iArc < nArcs; ++iArc) {
	      rArc = disappearing[iArc];
	      lArc = disappearing[iArc - 1];
	      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
	    }
	    lArc = disappearing[0];
	    rArc = disappearing[nArcs - 1];
	    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
	    d3_geom_voronoiAttachCircle(lArc);
	    d3_geom_voronoiAttachCircle(rArc);
	  }
	  function d3_geom_voronoiAddBeach(site) {
	    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
	    while (node) {
	      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
	      if (dxl > ε) node = node.L; else {
	        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
	        if (dxr > ε) {
	          if (!node.R) {
	            lArc = node;
	            break;
	          }
	          node = node.R;
	        } else {
	          if (dxl > -ε) {
	            lArc = node.P;
	            rArc = node;
	          } else if (dxr > -ε) {
	            lArc = node;
	            rArc = node.N;
	          } else {
	            lArc = rArc = node;
	          }
	          break;
	        }
	      }
	    }
	    var newArc = d3_geom_voronoiCreateBeach(site);
	    d3_geom_voronoiBeaches.insert(lArc, newArc);
	    if (!lArc && !rArc) return;
	    if (lArc === rArc) {
	      d3_geom_voronoiDetachCircle(lArc);
	      rArc = d3_geom_voronoiCreateBeach(lArc.site);
	      d3_geom_voronoiBeaches.insert(newArc, rArc);
	      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
	      d3_geom_voronoiAttachCircle(lArc);
	      d3_geom_voronoiAttachCircle(rArc);
	      return;
	    }
	    if (!rArc) {
	      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
	      return;
	    }
	    d3_geom_voronoiDetachCircle(lArc);
	    d3_geom_voronoiDetachCircle(rArc);
	    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
	      x: (cy * hb - by * hc) / d + ax,
	      y: (bx * hc - cx * hb) / d + ay
	    };
	    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
	    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
	    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
	    d3_geom_voronoiAttachCircle(lArc);
	    d3_geom_voronoiAttachCircle(rArc);
	  }
	  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
	    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
	    if (!pby2) return rfocx;
	    var lArc = arc.P;
	    if (!lArc) return -Infinity;
	    site = lArc.site;
	    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
	    if (!plby2) return lfocx;
	    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
	    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
	    return (rfocx + lfocx) / 2;
	  }
	  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
	    var rArc = arc.N;
	    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
	    var site = arc.site;
	    return site.y === directrix ? site.x : Infinity;
	  }
	  function d3_geom_voronoiCell(site) {
	    this.site = site;
	    this.edges = [];
	  }
	  d3_geom_voronoiCell.prototype.prepare = function() {
	    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
	    while (iHalfEdge--) {
	      edge = halfEdges[iHalfEdge].edge;
	      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
	    }
	    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
	    return halfEdges.length;
	  };
	  function d3_geom_voronoiCloseCells(extent) {
	    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
	    while (iCell--) {
	      cell = cells[iCell];
	      if (!cell || !cell.prepare()) continue;
	      halfEdges = cell.edges;
	      nHalfEdges = halfEdges.length;
	      iHalfEdge = 0;
	      while (iHalfEdge < nHalfEdges) {
	        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
	        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
	        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
	          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
	            x: x0,
	            y: abs(x2 - x0) < ε ? y2 : y1
	          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
	            x: abs(y2 - y1) < ε ? x2 : x1,
	            y: y1
	          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
	            x: x1,
	            y: abs(x2 - x1) < ε ? y2 : y0
	          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
	            x: abs(y2 - y0) < ε ? x2 : x0,
	            y: y0
	          } : null), cell.site, null));
	          ++nHalfEdges;
	        }
	      }
	    }
	  }
	  function d3_geom_voronoiHalfEdgeOrder(a, b) {
	    return b.angle - a.angle;
	  }
	  function d3_geom_voronoiCircle() {
	    d3_geom_voronoiRedBlackNode(this);
	    this.x = this.y = this.arc = this.site = this.cy = null;
	  }
	  function d3_geom_voronoiAttachCircle(arc) {
	    var lArc = arc.P, rArc = arc.N;
	    if (!lArc || !rArc) return;
	    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
	    if (lSite === rSite) return;
	    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
	    var d = 2 * (ax * cy - ay * cx);
	    if (d >= -ε2) return;
	    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
	    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
	    circle.arc = arc;
	    circle.site = cSite;
	    circle.x = x + bx;
	    circle.y = cy + Math.sqrt(x * x + y * y);
	    circle.cy = cy;
	    arc.circle = circle;
	    var before = null, node = d3_geom_voronoiCircles._;
	    while (node) {
	      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
	        if (node.L) node = node.L; else {
	          before = node.P;
	          break;
	        }
	      } else {
	        if (node.R) node = node.R; else {
	          before = node;
	          break;
	        }
	      }
	    }
	    d3_geom_voronoiCircles.insert(before, circle);
	    if (!before) d3_geom_voronoiFirstCircle = circle;
	  }
	  function d3_geom_voronoiDetachCircle(arc) {
	    var circle = arc.circle;
	    if (circle) {
	      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
	      d3_geom_voronoiCircles.remove(circle);
	      d3_geom_voronoiCirclePool.push(circle);
	      d3_geom_voronoiRedBlackNode(circle);
	      arc.circle = null;
	    }
	  }
	  function d3_geom_voronoiClipEdges(extent) {
	    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
	    while (i--) {
	      e = edges[i];
	      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
	        e.a = e.b = null;
	        edges.splice(i, 1);
	      }
	    }
	  }
	  function d3_geom_voronoiConnectEdge(edge, extent) {
	    var vb = edge.b;
	    if (vb) return true;
	    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
	    if (ry === ly) {
	      if (fx < x0 || fx >= x1) return;
	      if (lx > rx) {
	        if (!va) va = {
	          x: fx,
	          y: y0
	        }; else if (va.y >= y1) return;
	        vb = {
	          x: fx,
	          y: y1
	        };
	      } else {
	        if (!va) va = {
	          x: fx,
	          y: y1
	        }; else if (va.y < y0) return;
	        vb = {
	          x: fx,
	          y: y0
	        };
	      }
	    } else {
	      fm = (lx - rx) / (ry - ly);
	      fb = fy - fm * fx;
	      if (fm < -1 || fm > 1) {
	        if (lx > rx) {
	          if (!va) va = {
	            x: (y0 - fb) / fm,
	            y: y0
	          }; else if (va.y >= y1) return;
	          vb = {
	            x: (y1 - fb) / fm,
	            y: y1
	          };
	        } else {
	          if (!va) va = {
	            x: (y1 - fb) / fm,
	            y: y1
	          }; else if (va.y < y0) return;
	          vb = {
	            x: (y0 - fb) / fm,
	            y: y0
	          };
	        }
	      } else {
	        if (ly < ry) {
	          if (!va) va = {
	            x: x0,
	            y: fm * x0 + fb
	          }; else if (va.x >= x1) return;
	          vb = {
	            x: x1,
	            y: fm * x1 + fb
	          };
	        } else {
	          if (!va) va = {
	            x: x1,
	            y: fm * x1 + fb
	          }; else if (va.x < x0) return;
	          vb = {
	            x: x0,
	            y: fm * x0 + fb
	          };
	        }
	      }
	    }
	    edge.a = va;
	    edge.b = vb;
	    return true;
	  }
	  function d3_geom_voronoiEdge(lSite, rSite) {
	    this.l = lSite;
	    this.r = rSite;
	    this.a = this.b = null;
	  }
	  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
	    var edge = new d3_geom_voronoiEdge(lSite, rSite);
	    d3_geom_voronoiEdges.push(edge);
	    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
	    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
	    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
	    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
	    return edge;
	  }
	  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
	    var edge = new d3_geom_voronoiEdge(lSite, null);
	    edge.a = va;
	    edge.b = vb;
	    d3_geom_voronoiEdges.push(edge);
	    return edge;
	  }
	  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
	    if (!edge.a && !edge.b) {
	      edge.a = vertex;
	      edge.l = lSite;
	      edge.r = rSite;
	    } else if (edge.l === rSite) {
	      edge.b = vertex;
	    } else {
	      edge.a = vertex;
	    }
	  }
	  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
	    var va = edge.a, vb = edge.b;
	    this.edge = edge;
	    this.site = lSite;
	    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
	  }
	  d3_geom_voronoiHalfEdge.prototype = {
	    start: function() {
	      return this.edge.l === this.site ? this.edge.a : this.edge.b;
	    },
	    end: function() {
	      return this.edge.l === this.site ? this.edge.b : this.edge.a;
	    }
	  };
	  function d3_geom_voronoiRedBlackTree() {
	    this._ = null;
	  }
	  function d3_geom_voronoiRedBlackNode(node) {
	    node.U = node.C = node.L = node.R = node.P = node.N = null;
	  }
	  d3_geom_voronoiRedBlackTree.prototype = {
	    insert: function(after, node) {
	      var parent, grandpa, uncle;
	      if (after) {
	        node.P = after;
	        node.N = after.N;
	        if (after.N) after.N.P = node;
	        after.N = node;
	        if (after.R) {
	          after = after.R;
	          while (after.L) after = after.L;
	          after.L = node;
	        } else {
	          after.R = node;
	        }
	        parent = after;
	      } else if (this._) {
	        after = d3_geom_voronoiRedBlackFirst(this._);
	        node.P = null;
	        node.N = after;
	        after.P = after.L = node;
	        parent = after;
	      } else {
	        node.P = node.N = null;
	        this._ = node;
	        parent = null;
	      }
	      node.L = node.R = null;
	      node.U = parent;
	      node.C = true;
	      after = node;
	      while (parent && parent.C) {
	        grandpa = parent.U;
	        if (parent === grandpa.L) {
	          uncle = grandpa.R;
	          if (uncle && uncle.C) {
	            parent.C = uncle.C = false;
	            grandpa.C = true;
	            after = grandpa;
	          } else {
	            if (after === parent.R) {
	              d3_geom_voronoiRedBlackRotateLeft(this, parent);
	              after = parent;
	              parent = after.U;
	            }
	            parent.C = false;
	            grandpa.C = true;
	            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
	          }
	        } else {
	          uncle = grandpa.L;
	          if (uncle && uncle.C) {
	            parent.C = uncle.C = false;
	            grandpa.C = true;
	            after = grandpa;
	          } else {
	            if (after === parent.L) {
	              d3_geom_voronoiRedBlackRotateRight(this, parent);
	              after = parent;
	              parent = after.U;
	            }
	            parent.C = false;
	            grandpa.C = true;
	            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
	          }
	        }
	        parent = after.U;
	      }
	      this._.C = false;
	    },
	    remove: function(node) {
	      if (node.N) node.N.P = node.P;
	      if (node.P) node.P.N = node.N;
	      node.N = node.P = null;
	      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
	      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
	      if (parent) {
	        if (parent.L === node) parent.L = next; else parent.R = next;
	      } else {
	        this._ = next;
	      }
	      if (left && right) {
	        red = next.C;
	        next.C = node.C;
	        next.L = left;
	        left.U = next;
	        if (next !== right) {
	          parent = next.U;
	          next.U = node.U;
	          node = next.R;
	          parent.L = node;
	          next.R = right;
	          right.U = next;
	        } else {
	          next.U = parent;
	          parent = next;
	          node = next.R;
	        }
	      } else {
	        red = node.C;
	        node = next;
	      }
	      if (node) node.U = parent;
	      if (red) return;
	      if (node && node.C) {
	        node.C = false;
	        return;
	      }
	      do {
	        if (node === this._) break;
	        if (node === parent.L) {
	          sibling = parent.R;
	          if (sibling.C) {
	            sibling.C = false;
	            parent.C = true;
	            d3_geom_voronoiRedBlackRotateLeft(this, parent);
	            sibling = parent.R;
	          }
	          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
	            if (!sibling.R || !sibling.R.C) {
	              sibling.L.C = false;
	              sibling.C = true;
	              d3_geom_voronoiRedBlackRotateRight(this, sibling);
	              sibling = parent.R;
	            }
	            sibling.C = parent.C;
	            parent.C = sibling.R.C = false;
	            d3_geom_voronoiRedBlackRotateLeft(this, parent);
	            node = this._;
	            break;
	          }
	        } else {
	          sibling = parent.L;
	          if (sibling.C) {
	            sibling.C = false;
	            parent.C = true;
	            d3_geom_voronoiRedBlackRotateRight(this, parent);
	            sibling = parent.L;
	          }
	          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
	            if (!sibling.L || !sibling.L.C) {
	              sibling.R.C = false;
	              sibling.C = true;
	              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
	              sibling = parent.L;
	            }
	            sibling.C = parent.C;
	            parent.C = sibling.L.C = false;
	            d3_geom_voronoiRedBlackRotateRight(this, parent);
	            node = this._;
	            break;
	          }
	        }
	        sibling.C = true;
	        node = parent;
	        parent = parent.U;
	      } while (!node.C);
	      if (node) node.C = false;
	    }
	  };
	  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
	    var p = node, q = node.R, parent = p.U;
	    if (parent) {
	      if (parent.L === p) parent.L = q; else parent.R = q;
	    } else {
	      tree._ = q;
	    }
	    q.U = parent;
	    p.U = q;
	    p.R = q.L;
	    if (p.R) p.R.U = p;
	    q.L = p;
	  }
	  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
	    var p = node, q = node.L, parent = p.U;
	    if (parent) {
	      if (parent.L === p) parent.L = q; else parent.R = q;
	    } else {
	      tree._ = q;
	    }
	    q.U = parent;
	    p.U = q;
	    p.L = q.R;
	    if (p.L) p.L.U = p;
	    q.R = p;
	  }
	  function d3_geom_voronoiRedBlackFirst(node) {
	    while (node.L) node = node.L;
	    return node;
	  }
	  function d3_geom_voronoi(sites, bbox) {
	    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
	    d3_geom_voronoiEdges = [];
	    d3_geom_voronoiCells = new Array(sites.length);
	    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
	    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
	    while (true) {
	      circle = d3_geom_voronoiFirstCircle;
	      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
	        if (site.x !== x0 || site.y !== y0) {
	          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
	          d3_geom_voronoiAddBeach(site);
	          x0 = site.x, y0 = site.y;
	        }
	        site = sites.pop();
	      } else if (circle) {
	        d3_geom_voronoiRemoveBeach(circle.arc);
	      } else {
	        break;
	      }
	    }
	    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
	    var diagram = {
	      cells: d3_geom_voronoiCells,
	      edges: d3_geom_voronoiEdges
	    };
	    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
	    return diagram;
	  }
	  function d3_geom_voronoiVertexOrder(a, b) {
	    return b.y - a.y || b.x - a.x;
	  }
	  d3.geom.voronoi = function(points) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
	    if (points) return voronoi(points);
	    function voronoi(data) {
	      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
	      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
	        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
	          var s = e.start();
	          return [ s.x, s.y ];
	        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
	        polygon.point = data[i];
	      });
	      return polygons;
	    }
	    function sites(data) {
	      return data.map(function(d, i) {
	        return {
	          x: Math.round(fx(d, i) / ε) * ε,
	          y: Math.round(fy(d, i) / ε) * ε,
	          i: i
	        };
	      });
	    }
	    voronoi.links = function(data) {
	      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
	        return edge.l && edge.r;
	      }).map(function(edge) {
	        return {
	          source: data[edge.l.i],
	          target: data[edge.r.i]
	        };
	      });
	    };
	    voronoi.triangles = function(data) {
	      var triangles = [];
	      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
	        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
	        while (++j < m) {
	          e0 = e1;
	          s0 = s1;
	          e1 = edges[j].edge;
	          s1 = e1.l === site ? e1.r : e1.l;
	          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
	            triangles.push([ data[i], data[s0.i], data[s1.i] ]);
	          }
	        }
	      });
	      return triangles;
	    };
	    voronoi.x = function(_) {
	      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
	    };
	    voronoi.y = function(_) {
	      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
	    };
	    voronoi.clipExtent = function(_) {
	      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
	      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
	      return voronoi;
	    };
	    voronoi.size = function(_) {
	      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
	      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
	    };
	    return voronoi;
	  };
	  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
	  function d3_geom_voronoiTriangleArea(a, b, c) {
	    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
	  }
	  d3.geom.delaunay = function(vertices) {
	    return d3.geom.voronoi().triangles(vertices);
	  };
	  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
	    if (compat = arguments.length) {
	      x = d3_geom_quadtreeCompatX;
	      y = d3_geom_quadtreeCompatY;
	      if (compat === 3) {
	        y2 = y1;
	        x2 = x1;
	        y1 = x1 = 0;
	      }
	      return quadtree(points);
	    }
	    function quadtree(data) {
	      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
	      if (x1 != null) {
	        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
	      } else {
	        x2_ = y2_ = -(x1_ = y1_ = Infinity);
	        xs = [], ys = [];
	        n = data.length;
	        if (compat) for (i = 0; i < n; ++i) {
	          d = data[i];
	          if (d.x < x1_) x1_ = d.x;
	          if (d.y < y1_) y1_ = d.y;
	          if (d.x > x2_) x2_ = d.x;
	          if (d.y > y2_) y2_ = d.y;
	          xs.push(d.x);
	          ys.push(d.y);
	        } else for (i = 0; i < n; ++i) {
	          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
	          if (x_ < x1_) x1_ = x_;
	          if (y_ < y1_) y1_ = y_;
	          if (x_ > x2_) x2_ = x_;
	          if (y_ > y2_) y2_ = y_;
	          xs.push(x_);
	          ys.push(y_);
	        }
	      }
	      var dx = x2_ - x1_, dy = y2_ - y1_;
	      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
	      function insert(n, d, x, y, x1, y1, x2, y2) {
	        if (isNaN(x) || isNaN(y)) return;
	        if (n.leaf) {
	          var nx = n.x, ny = n.y;
	          if (nx != null) {
	            if (abs(nx - x) + abs(ny - y) < .01) {
	              insertChild(n, d, x, y, x1, y1, x2, y2);
	            } else {
	              var nPoint = n.point;
	              n.x = n.y = n.point = null;
	              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
	              insertChild(n, d, x, y, x1, y1, x2, y2);
	            }
	          } else {
	            n.x = x, n.y = y, n.point = d;
	          }
	        } else {
	          insertChild(n, d, x, y, x1, y1, x2, y2);
	        }
	      }
	      function insertChild(n, d, x, y, x1, y1, x2, y2) {
	        var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, right = x >= sx, bottom = y >= sy, i = (bottom << 1) + right;
	        n.leaf = false;
	        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
	        if (right) x1 = sx; else x2 = sx;
	        if (bottom) y1 = sy; else y2 = sy;
	        insert(n, d, x, y, x1, y1, x2, y2);
	      }
	      var root = d3_geom_quadtreeNode();
	      root.add = function(d) {
	        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
	      };
	      root.visit = function(f) {
	        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
	      };
	      i = -1;
	      if (x1 == null) {
	        while (++i < n) {
	          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
	        }
	        --i;
	      } else data.forEach(root.add);
	      xs = ys = data = d = null;
	      return root;
	    }
	    quadtree.x = function(_) {
	      return arguments.length ? (x = _, quadtree) : x;
	    };
	    quadtree.y = function(_) {
	      return arguments.length ? (y = _, quadtree) : y;
	    };
	    quadtree.extent = function(_) {
	      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
	      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], 
	      y2 = +_[1][1];
	      return quadtree;
	    };
	    quadtree.size = function(_) {
	      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
	      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
	      return quadtree;
	    };
	    return quadtree;
	  };
	  function d3_geom_quadtreeCompatX(d) {
	    return d.x;
	  }
	  function d3_geom_quadtreeCompatY(d) {
	    return d.y;
	  }
	  function d3_geom_quadtreeNode() {
	    return {
	      leaf: true,
	      nodes: [],
	      point: null,
	      x: null,
	      y: null
	    };
	  }
	  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
	    if (!f(node, x1, y1, x2, y2)) {
	      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
	      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
	      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
	      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
	      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
	    }
	  }
	  d3.interpolateRgb = d3_interpolateRgb;
	  function d3_interpolateRgb(a, b) {
	    a = d3.rgb(a);
	    b = d3.rgb(b);
	    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
	    return function(t) {
	      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
	    };
	  }
	  d3.interpolateObject = d3_interpolateObject;
	  function d3_interpolateObject(a, b) {
	    var i = {}, c = {}, k;
	    for (k in a) {
	      if (k in b) {
	        i[k] = d3_interpolate(a[k], b[k]);
	      } else {
	        c[k] = a[k];
	      }
	    }
	    for (k in b) {
	      if (!(k in a)) {
	        c[k] = b[k];
	      }
	    }
	    return function(t) {
	      for (k in i) c[k] = i[k](t);
	      return c;
	    };
	  }
	  d3.interpolateNumber = d3_interpolateNumber;
	  function d3_interpolateNumber(a, b) {
	    a = +a, b = +b;
	    return function(t) {
	      return a * (1 - t) + b * t;
	    };
	  }
	  d3.interpolateString = d3_interpolateString;
	  function d3_interpolateString(a, b) {
	    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
	    a = a + "", b = b + "";
	    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
	      if ((bs = bm.index) > bi) {
	        bs = b.slice(bi, bs);
	        if (s[i]) s[i] += bs; else s[++i] = bs;
	      }
	      if ((am = am[0]) === (bm = bm[0])) {
	        if (s[i]) s[i] += bm; else s[++i] = bm;
	      } else {
	        s[++i] = null;
	        q.push({
	          i: i,
	          x: d3_interpolateNumber(am, bm)
	        });
	      }
	      bi = d3_interpolate_numberB.lastIndex;
	    }
	    if (bi < b.length) {
	      bs = b.slice(bi);
	      if (s[i]) s[i] += bs; else s[++i] = bs;
	    }
	    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {
	      return b(t) + "";
	    }) : function() {
	      return b;
	    } : (b = q.length, function(t) {
	      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    });
	  }
	  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
	  d3.interpolate = d3_interpolate;
	  function d3_interpolate(a, b) {
	    var i = d3.interpolators.length, f;
	    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
	    return f;
	  }
	  d3.interpolators = [ function(a, b) {
	    var t = typeof b;
	    return (t === "string" ? d3_rgb_names.has(b) || /^(#|rgb\(|hsl\()/.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
	  } ];
	  d3.interpolateArray = d3_interpolateArray;
	  function d3_interpolateArray(a, b) {
	    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
	    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
	    for (;i < na; ++i) c[i] = a[i];
	    for (;i < nb; ++i) c[i] = b[i];
	    return function(t) {
	      for (i = 0; i < n0; ++i) c[i] = x[i](t);
	      return c;
	    };
	  }
	  var d3_ease_default = function() {
	    return d3_identity;
	  };
	  var d3_ease = d3.map({
	    linear: d3_ease_default,
	    poly: d3_ease_poly,
	    quad: function() {
	      return d3_ease_quad;
	    },
	    cubic: function() {
	      return d3_ease_cubic;
	    },
	    sin: function() {
	      return d3_ease_sin;
	    },
	    exp: function() {
	      return d3_ease_exp;
	    },
	    circle: function() {
	      return d3_ease_circle;
	    },
	    elastic: d3_ease_elastic,
	    back: d3_ease_back,
	    bounce: function() {
	      return d3_ease_bounce;
	    }
	  });
	  var d3_ease_mode = d3.map({
	    "in": d3_identity,
	    out: d3_ease_reverse,
	    "in-out": d3_ease_reflect,
	    "out-in": function(f) {
	      return d3_ease_reflect(d3_ease_reverse(f));
	    }
	  });
	  d3.ease = function(name) {
	    var i = name.indexOf("-"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : "in";
	    t = d3_ease.get(t) || d3_ease_default;
	    m = d3_ease_mode.get(m) || d3_identity;
	    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
	  };
	  function d3_ease_clamp(f) {
	    return function(t) {
	      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
	    };
	  }
	  function d3_ease_reverse(f) {
	    return function(t) {
	      return 1 - f(1 - t);
	    };
	  }
	  function d3_ease_reflect(f) {
	    return function(t) {
	      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
	    };
	  }
	  function d3_ease_quad(t) {
	    return t * t;
	  }
	  function d3_ease_cubic(t) {
	    return t * t * t;
	  }
	  function d3_ease_cubicInOut(t) {
	    if (t <= 0) return 0;
	    if (t >= 1) return 1;
	    var t2 = t * t, t3 = t2 * t;
	    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
	  }
	  function d3_ease_poly(e) {
	    return function(t) {
	      return Math.pow(t, e);
	    };
	  }
	  function d3_ease_sin(t) {
	    return 1 - Math.cos(t * halfπ);
	  }
	  function d3_ease_exp(t) {
	    return Math.pow(2, 10 * (t - 1));
	  }
	  function d3_ease_circle(t) {
	    return 1 - Math.sqrt(1 - t * t);
	  }
	  function d3_ease_elastic(a, p) {
	    var s;
	    if (arguments.length < 2) p = .45;
	    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;
	    return function(t) {
	      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
	    };
	  }
	  function d3_ease_back(s) {
	    if (!s) s = 1.70158;
	    return function(t) {
	      return t * t * ((s + 1) * t - s);
	    };
	  }
	  function d3_ease_bounce(t) {
	    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
	  }
	  d3.interpolateHcl = d3_interpolateHcl;
	  function d3_interpolateHcl(a, b) {
	    a = d3.hcl(a);
	    b = d3.hcl(b);
	    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
	    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
	    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
	    return function(t) {
	      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
	    };
	  }
	  d3.interpolateHsl = d3_interpolateHsl;
	  function d3_interpolateHsl(a, b) {
	    a = d3.hsl(a);
	    b = d3.hsl(b);
	    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
	    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
	    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
	    return function(t) {
	      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
	    };
	  }
	  d3.interpolateLab = d3_interpolateLab;
	  function d3_interpolateLab(a, b) {
	    a = d3.lab(a);
	    b = d3.lab(b);
	    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
	    return function(t) {
	      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
	    };
	  }
	  d3.interpolateRound = d3_interpolateRound;
	  function d3_interpolateRound(a, b) {
	    b -= a;
	    return function(t) {
	      return Math.round(a + b * t);
	    };
	  }
	  d3.transform = function(string) {
	    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
	    return (d3.transform = function(string) {
	      if (string != null) {
	        g.setAttribute("transform", string);
	        var t = g.transform.baseVal.consolidate();
	      }
	      return new d3_transform(t ? t.matrix : d3_transformIdentity);
	    })(string);
	  };
	  function d3_transform(m) {
	    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
	    if (r0[0] * r1[1] < r1[0] * r0[1]) {
	      r0[0] *= -1;
	      r0[1] *= -1;
	      kx *= -1;
	      kz *= -1;
	    }
	    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
	    this.translate = [ m.e, m.f ];
	    this.scale = [ kx, ky ];
	    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
	  }
	  d3_transform.prototype.toString = function() {
	    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
	  };
	  function d3_transformDot(a, b) {
	    return a[0] * b[0] + a[1] * b[1];
	  }
	  function d3_transformNormalize(a) {
	    var k = Math.sqrt(d3_transformDot(a, a));
	    if (k) {
	      a[0] /= k;
	      a[1] /= k;
	    }
	    return k;
	  }
	  function d3_transformCombine(a, b, k) {
	    a[0] += k * b[0];
	    a[1] += k * b[1];
	    return a;
	  }
	  var d3_transformIdentity = {
	    a: 1,
	    b: 0,
	    c: 0,
	    d: 1,
	    e: 0,
	    f: 0
	  };
	  d3.interpolateTransform = d3_interpolateTransform;
	  function d3_interpolateTransform(a, b) {
	    var s = [], q = [], n, A = d3.transform(a), B = d3.transform(b), ta = A.translate, tb = B.translate, ra = A.rotate, rb = B.rotate, wa = A.skew, wb = B.skew, ka = A.scale, kb = B.scale;
	    if (ta[0] != tb[0] || ta[1] != tb[1]) {
	      s.push("translate(", null, ",", null, ")");
	      q.push({
	        i: 1,
	        x: d3_interpolateNumber(ta[0], tb[0])
	      }, {
	        i: 3,
	        x: d3_interpolateNumber(ta[1], tb[1])
	      });
	    } else if (tb[0] || tb[1]) {
	      s.push("translate(" + tb + ")");
	    } else {
	      s.push("");
	    }
	    if (ra != rb) {
	      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
	      q.push({
	        i: s.push(s.pop() + "rotate(", null, ")") - 2,
	        x: d3_interpolateNumber(ra, rb)
	      });
	    } else if (rb) {
	      s.push(s.pop() + "rotate(" + rb + ")");
	    }
	    if (wa != wb) {
	      q.push({
	        i: s.push(s.pop() + "skewX(", null, ")") - 2,
	        x: d3_interpolateNumber(wa, wb)
	      });
	    } else if (wb) {
	      s.push(s.pop() + "skewX(" + wb + ")");
	    }
	    if (ka[0] != kb[0] || ka[1] != kb[1]) {
	      n = s.push(s.pop() + "scale(", null, ",", null, ")");
	      q.push({
	        i: n - 4,
	        x: d3_interpolateNumber(ka[0], kb[0])
	      }, {
	        i: n - 2,
	        x: d3_interpolateNumber(ka[1], kb[1])
	      });
	    } else if (kb[0] != 1 || kb[1] != 1) {
	      s.push(s.pop() + "scale(" + kb + ")");
	    }
	    n = q.length;
	    return function(t) {
	      var i = -1, o;
	      while (++i < n) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    };
	  }
	  function d3_uninterpolateNumber(a, b) {
	    b = (b -= a = +a) || 1 / b;
	    return function(x) {
	      return (x - a) / b;
	    };
	  }
	  function d3_uninterpolateClamp(a, b) {
	    b = (b -= a = +a) || 1 / b;
	    return function(x) {
	      return Math.max(0, Math.min(1, (x - a) / b));
	    };
	  }
	  d3.layout = {};
	  d3.layout.bundle = function() {
	    return function(links) {
	      var paths = [], i = -1, n = links.length;
	      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
	      return paths;
	    };
	  };
	  function d3_layout_bundlePath(link) {
	    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
	    while (start !== lca) {
	      start = start.parent;
	      points.push(start);
	    }
	    var k = points.length;
	    while (end !== lca) {
	      points.splice(k, 0, end);
	      end = end.parent;
	    }
	    return points;
	  }
	  function d3_layout_bundleAncestors(node) {
	    var ancestors = [], parent = node.parent;
	    while (parent != null) {
	      ancestors.push(node);
	      node = parent;
	      parent = parent.parent;
	    }
	    ancestors.push(node);
	    return ancestors;
	  }
	  function d3_layout_bundleLeastCommonAncestor(a, b) {
	    if (a === b) return a;
	    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
	    while (aNode === bNode) {
	      sharedNode = aNode;
	      aNode = aNodes.pop();
	      bNode = bNodes.pop();
	    }
	    return sharedNode;
	  }
	  d3.layout.chord = function() {
	    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
	    function relayout() {
	      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
	      chords = [];
	      groups = [];
	      k = 0, i = -1;
	      while (++i < n) {
	        x = 0, j = -1;
	        while (++j < n) {
	          x += matrix[i][j];
	        }
	        groupSums.push(x);
	        subgroupIndex.push(d3.range(n));
	        k += x;
	      }
	      if (sortGroups) {
	        groupIndex.sort(function(a, b) {
	          return sortGroups(groupSums[a], groupSums[b]);
	        });
	      }
	      if (sortSubgroups) {
	        subgroupIndex.forEach(function(d, i) {
	          d.sort(function(a, b) {
	            return sortSubgroups(matrix[i][a], matrix[i][b]);
	          });
	        });
	      }
	      k = (τ - padding * n) / k;
	      x = 0, i = -1;
	      while (++i < n) {
	        x0 = x, j = -1;
	        while (++j < n) {
	          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
	          subgroups[di + "-" + dj] = {
	            index: di,
	            subindex: dj,
	            startAngle: a0,
	            endAngle: a1,
	            value: v
	          };
	        }
	        groups[di] = {
	          index: di,
	          startAngle: x0,
	          endAngle: x,
	          value: (x - x0) / k
	        };
	        x += padding;
	      }
	      i = -1;
	      while (++i < n) {
	        j = i - 1;
	        while (++j < n) {
	          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
	          if (source.value || target.value) {
	            chords.push(source.value < target.value ? {
	              source: target,
	              target: source
	            } : {
	              source: source,
	              target: target
	            });
	          }
	        }
	      }
	      if (sortChords) resort();
	    }
	    function resort() {
	      chords.sort(function(a, b) {
	        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
	      });
	    }
	    chord.matrix = function(x) {
	      if (!arguments.length) return matrix;
	      n = (matrix = x) && matrix.length;
	      chords = groups = null;
	      return chord;
	    };
	    chord.padding = function(x) {
	      if (!arguments.length) return padding;
	      padding = x;
	      chords = groups = null;
	      return chord;
	    };
	    chord.sortGroups = function(x) {
	      if (!arguments.length) return sortGroups;
	      sortGroups = x;
	      chords = groups = null;
	      return chord;
	    };
	    chord.sortSubgroups = function(x) {
	      if (!arguments.length) return sortSubgroups;
	      sortSubgroups = x;
	      chords = null;
	      return chord;
	    };
	    chord.sortChords = function(x) {
	      if (!arguments.length) return sortChords;
	      sortChords = x;
	      if (chords) resort();
	      return chord;
	    };
	    chord.chords = function() {
	      if (!chords) relayout();
	      return chords;
	    };
	    chord.groups = function() {
	      if (!groups) relayout();
	      return groups;
	    };
	    return chord;
	  };
	  d3.layout.force = function() {
	    var force = {}, event = d3.dispatch("start", "tick", "end"), size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;
	    function repulse(node) {
	      return function(quad, x1, _, x2) {
	        if (quad.point !== node) {
	          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
	          if (dw * dw / theta2 < dn) {
	            if (dn < chargeDistance2) {
	              var k = quad.charge / dn;
	              node.px -= dx * k;
	              node.py -= dy * k;
	            }
	            return true;
	          }
	          if (quad.point && dn && dn < chargeDistance2) {
	            var k = quad.pointCharge / dn;
	            node.px -= dx * k;
	            node.py -= dy * k;
	          }
	        }
	        return !quad.charge;
	      };
	    }
	    force.tick = function() {
	      if ((alpha *= .99) < .005) {
	        event.end({
	          type: "end",
	          alpha: alpha = 0
	        });
	        return true;
	      }
	      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
	      for (i = 0; i < m; ++i) {
	        o = links[i];
	        s = o.source;
	        t = o.target;
	        x = t.x - s.x;
	        y = t.y - s.y;
	        if (l = x * x + y * y) {
	          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
	          x *= l;
	          y *= l;
	          t.x -= x * (k = s.weight / (t.weight + s.weight));
	          t.y -= y * k;
	          s.x += x * (k = 1 - k);
	          s.y += y * k;
	        }
	      }
	      if (k = alpha * gravity) {
	        x = size[0] / 2;
	        y = size[1] / 2;
	        i = -1;
	        if (k) while (++i < n) {
	          o = nodes[i];
	          o.x += (x - o.x) * k;
	          o.y += (y - o.y) * k;
	        }
	      }
	      if (charge) {
	        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
	        i = -1;
	        while (++i < n) {
	          if (!(o = nodes[i]).fixed) {
	            q.visit(repulse(o));
	          }
	        }
	      }
	      i = -1;
	      while (++i < n) {
	        o = nodes[i];
	        if (o.fixed) {
	          o.x = o.px;
	          o.y = o.py;
	        } else {
	          o.x -= (o.px - (o.px = o.x)) * friction;
	          o.y -= (o.py - (o.py = o.y)) * friction;
	        }
	      }
	      event.tick({
	        type: "tick",
	        alpha: alpha
	      });
	    };
	    force.nodes = function(x) {
	      if (!arguments.length) return nodes;
	      nodes = x;
	      return force;
	    };
	    force.links = function(x) {
	      if (!arguments.length) return links;
	      links = x;
	      return force;
	    };
	    force.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return force;
	    };
	    force.linkDistance = function(x) {
	      if (!arguments.length) return linkDistance;
	      linkDistance = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.distance = force.linkDistance;
	    force.linkStrength = function(x) {
	      if (!arguments.length) return linkStrength;
	      linkStrength = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.friction = function(x) {
	      if (!arguments.length) return friction;
	      friction = +x;
	      return force;
	    };
	    force.charge = function(x) {
	      if (!arguments.length) return charge;
	      charge = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.chargeDistance = function(x) {
	      if (!arguments.length) return Math.sqrt(chargeDistance2);
	      chargeDistance2 = x * x;
	      return force;
	    };
	    force.gravity = function(x) {
	      if (!arguments.length) return gravity;
	      gravity = +x;
	      return force;
	    };
	    force.theta = function(x) {
	      if (!arguments.length) return Math.sqrt(theta2);
	      theta2 = x * x;
	      return force;
	    };
	    force.alpha = function(x) {
	      if (!arguments.length) return alpha;
	      x = +x;
	      if (alpha) {
	        if (x > 0) alpha = x; else alpha = 0;
	      } else if (x > 0) {
	        event.start({
	          type: "start",
	          alpha: alpha = x
	        });
	        d3.timer(force.tick);
	      }
	      return force;
	    };
	    force.start = function() {
	      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
	      for (i = 0; i < n; ++i) {
	        (o = nodes[i]).index = i;
	        o.weight = 0;
	      }
	      for (i = 0; i < m; ++i) {
	        o = links[i];
	        if (typeof o.source == "number") o.source = nodes[o.source];
	        if (typeof o.target == "number") o.target = nodes[o.target];
	        ++o.source.weight;
	        ++o.target.weight;
	      }
	      for (i = 0; i < n; ++i) {
	        o = nodes[i];
	        if (isNaN(o.x)) o.x = position("x", w);
	        if (isNaN(o.y)) o.y = position("y", h);
	        if (isNaN(o.px)) o.px = o.x;
	        if (isNaN(o.py)) o.py = o.y;
	      }
	      distances = [];
	      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
	      strengths = [];
	      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
	      charges = [];
	      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
	      function position(dimension, size) {
	        if (!neighbors) {
	          neighbors = new Array(n);
	          for (j = 0; j < n; ++j) {
	            neighbors[j] = [];
	          }
	          for (j = 0; j < m; ++j) {
	            var o = links[j];
	            neighbors[o.source.index].push(o.target);
	            neighbors[o.target.index].push(o.source);
	          }
	        }
	        var candidates = neighbors[i], j = -1, m = candidates.length, x;
	        while (++j < m) if (!isNaN(x = candidates[j][dimension])) return x;
	        return Math.random() * size;
	      }
	      return force.resume();
	    };
	    force.resume = function() {
	      return force.alpha(.1);
	    };
	    force.stop = function() {
	      return force.alpha(0);
	    };
	    force.drag = function() {
	      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
	      if (!arguments.length) return drag;
	      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
	    };
	    function dragmove(d) {
	      d.px = d3.event.x, d.py = d3.event.y;
	      force.resume();
	    }
	    return d3.rebind(force, event, "on");
	  };
	  function d3_layout_forceDragstart(d) {
	    d.fixed |= 2;
	  }
	  function d3_layout_forceDragend(d) {
	    d.fixed &= ~6;
	  }
	  function d3_layout_forceMouseover(d) {
	    d.fixed |= 4;
	    d.px = d.x, d.py = d.y;
	  }
	  function d3_layout_forceMouseout(d) {
	    d.fixed &= ~4;
	  }
	  function d3_layout_forceAccumulate(quad, alpha, charges) {
	    var cx = 0, cy = 0;
	    quad.charge = 0;
	    if (!quad.leaf) {
	      var nodes = quad.nodes, n = nodes.length, i = -1, c;
	      while (++i < n) {
	        c = nodes[i];
	        if (c == null) continue;
	        d3_layout_forceAccumulate(c, alpha, charges);
	        quad.charge += c.charge;
	        cx += c.charge * c.cx;
	        cy += c.charge * c.cy;
	      }
	    }
	    if (quad.point) {
	      if (!quad.leaf) {
	        quad.point.x += Math.random() - .5;
	        quad.point.y += Math.random() - .5;
	      }
	      var k = alpha * charges[quad.point.index];
	      quad.charge += quad.pointCharge = k;
	      cx += k * quad.point.x;
	      cy += k * quad.point.y;
	    }
	    quad.cx = cx / quad.charge;
	    quad.cy = cy / quad.charge;
	  }
	  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
	  d3.layout.hierarchy = function() {
	    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
	    function hierarchy(root) {
	      var stack = [ root ], nodes = [], node;
	      root.depth = 0;
	      while ((node = stack.pop()) != null) {
	        nodes.push(node);
	        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
	          var n, childs, child;
	          while (--n >= 0) {
	            stack.push(child = childs[n]);
	            child.parent = node;
	            child.depth = node.depth + 1;
	          }
	          if (value) node.value = 0;
	          node.children = childs;
	        } else {
	          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
	          delete node.children;
	        }
	      }
	      d3_layout_hierarchyVisitAfter(root, function(node) {
	        var childs, parent;
	        if (sort && (childs = node.children)) childs.sort(sort);
	        if (value && (parent = node.parent)) parent.value += node.value;
	      });
	      return nodes;
	    }
	    hierarchy.sort = function(x) {
	      if (!arguments.length) return sort;
	      sort = x;
	      return hierarchy;
	    };
	    hierarchy.children = function(x) {
	      if (!arguments.length) return children;
	      children = x;
	      return hierarchy;
	    };
	    hierarchy.value = function(x) {
	      if (!arguments.length) return value;
	      value = x;
	      return hierarchy;
	    };
	    hierarchy.revalue = function(root) {
	      if (value) {
	        d3_layout_hierarchyVisitBefore(root, function(node) {
	          if (node.children) node.value = 0;
	        });
	        d3_layout_hierarchyVisitAfter(root, function(node) {
	          var parent;
	          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
	          if (parent = node.parent) parent.value += node.value;
	        });
	      }
	      return root;
	    };
	    return hierarchy;
	  };
	  function d3_layout_hierarchyRebind(object, hierarchy) {
	    d3.rebind(object, hierarchy, "sort", "children", "value");
	    object.nodes = object;
	    object.links = d3_layout_hierarchyLinks;
	    return object;
	  }
	  function d3_layout_hierarchyVisitBefore(node, callback) {
	    var nodes = [ node ];
	    while ((node = nodes.pop()) != null) {
	      callback(node);
	      if ((children = node.children) && (n = children.length)) {
	        var n, children;
	        while (--n >= 0) nodes.push(children[n]);
	      }
	    }
	  }
	  function d3_layout_hierarchyVisitAfter(node, callback) {
	    var nodes = [ node ], nodes2 = [];
	    while ((node = nodes.pop()) != null) {
	      nodes2.push(node);
	      if ((children = node.children) && (n = children.length)) {
	        var i = -1, n, children;
	        while (++i < n) nodes.push(children[i]);
	      }
	    }
	    while ((node = nodes2.pop()) != null) {
	      callback(node);
	    }
	  }
	  function d3_layout_hierarchyChildren(d) {
	    return d.children;
	  }
	  function d3_layout_hierarchyValue(d) {
	    return d.value;
	  }
	  function d3_layout_hierarchySort(a, b) {
	    return b.value - a.value;
	  }
	  function d3_layout_hierarchyLinks(nodes) {
	    return d3.merge(nodes.map(function(parent) {
	      return (parent.children || []).map(function(child) {
	        return {
	          source: parent,
	          target: child
	        };
	      });
	    }));
	  }
	  d3.layout.partition = function() {
	    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
	    function position(node, x, dx, dy) {
	      var children = node.children;
	      node.x = x;
	      node.y = node.depth * dy;
	      node.dx = dx;
	      node.dy = dy;
	      if (children && (n = children.length)) {
	        var i = -1, n, c, d;
	        dx = node.value ? dx / node.value : 0;
	        while (++i < n) {
	          position(c = children[i], x, d = c.value * dx, dy);
	          x += d;
	        }
	      }
	    }
	    function depth(node) {
	      var children = node.children, d = 0;
	      if (children && (n = children.length)) {
	        var i = -1, n;
	        while (++i < n) d = Math.max(d, depth(children[i]));
	      }
	      return 1 + d;
	    }
	    function partition(d, i) {
	      var nodes = hierarchy.call(this, d, i);
	      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
	      return nodes;
	    }
	    partition.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return partition;
	    };
	    return d3_layout_hierarchyRebind(partition, hierarchy);
	  };
	  d3.layout.pie = function() {
	    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ;
	    function pie(data) {
	      var values = data.map(function(d, i) {
	        return +value.call(pie, d, i);
	      });
	      var a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle);
	      var k = ((typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a) / d3.sum(values);
	      var index = d3.range(data.length);
	      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
	        return values[j] - values[i];
	      } : function(i, j) {
	        return sort(data[i], data[j]);
	      });
	      var arcs = [];
	      index.forEach(function(i) {
	        var d;
	        arcs[i] = {
	          data: data[i],
	          value: d = values[i],
	          startAngle: a,
	          endAngle: a += d * k
	        };
	      });
	      return arcs;
	    }
	    pie.value = function(x) {
	      if (!arguments.length) return value;
	      value = x;
	      return pie;
	    };
	    pie.sort = function(x) {
	      if (!arguments.length) return sort;
	      sort = x;
	      return pie;
	    };
	    pie.startAngle = function(x) {
	      if (!arguments.length) return startAngle;
	      startAngle = x;
	      return pie;
	    };
	    pie.endAngle = function(x) {
	      if (!arguments.length) return endAngle;
	      endAngle = x;
	      return pie;
	    };
	    return pie;
	  };
	  var d3_layout_pieSortByValue = {};
	  d3.layout.stack = function() {
	    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
	    function stack(data, index) {
	      if (!(n = data.length)) return data;
	      var series = data.map(function(d, i) {
	        return values.call(stack, d, i);
	      });
	      var points = series.map(function(d) {
	        return d.map(function(v, i) {
	          return [ x.call(stack, v, i), y.call(stack, v, i) ];
	        });
	      });
	      var orders = order.call(stack, points, index);
	      series = d3.permute(series, orders);
	      points = d3.permute(points, orders);
	      var offsets = offset.call(stack, points, index);
	      var m = series[0].length, n, i, j, o;
	      for (j = 0; j < m; ++j) {
	        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
	        for (i = 1; i < n; ++i) {
	          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
	        }
	      }
	      return data;
	    }
	    stack.values = function(x) {
	      if (!arguments.length) return values;
	      values = x;
	      return stack;
	    };
	    stack.order = function(x) {
	      if (!arguments.length) return order;
	      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
	      return stack;
	    };
	    stack.offset = function(x) {
	      if (!arguments.length) return offset;
	      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
	      return stack;
	    };
	    stack.x = function(z) {
	      if (!arguments.length) return x;
	      x = z;
	      return stack;
	    };
	    stack.y = function(z) {
	      if (!arguments.length) return y;
	      y = z;
	      return stack;
	    };
	    stack.out = function(z) {
	      if (!arguments.length) return out;
	      out = z;
	      return stack;
	    };
	    return stack;
	  };
	  function d3_layout_stackX(d) {
	    return d.x;
	  }
	  function d3_layout_stackY(d) {
	    return d.y;
	  }
	  function d3_layout_stackOut(d, y0, y) {
	    d.y0 = y0;
	    d.y = y;
	  }
	  var d3_layout_stackOrders = d3.map({
	    "inside-out": function(data) {
	      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
	        return max[a] - max[b];
	      }), top = 0, bottom = 0, tops = [], bottoms = [];
	      for (i = 0; i < n; ++i) {
	        j = index[i];
	        if (top < bottom) {
	          top += sums[j];
	          tops.push(j);
	        } else {
	          bottom += sums[j];
	          bottoms.push(j);
	        }
	      }
	      return bottoms.reverse().concat(tops);
	    },
	    reverse: function(data) {
	      return d3.range(data.length).reverse();
	    },
	    "default": d3_layout_stackOrderDefault
	  });
	  var d3_layout_stackOffsets = d3.map({
	    silhouette: function(data) {
	      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
	      for (j = 0; j < m; ++j) {
	        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
	        if (o > max) max = o;
	        sums.push(o);
	      }
	      for (j = 0; j < m; ++j) {
	        y0[j] = (max - sums[j]) / 2;
	      }
	      return y0;
	    },
	    wiggle: function(data) {
	      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
	      y0[0] = o = o0 = 0;
	      for (j = 1; j < m; ++j) {
	        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
	        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
	          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
	            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
	          }
	          s2 += s3 * data[i][j][1];
	        }
	        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
	        if (o < o0) o0 = o;
	      }
	      for (j = 0; j < m; ++j) y0[j] -= o0;
	      return y0;
	    },
	    expand: function(data) {
	      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
	      for (j = 0; j < m; ++j) {
	        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
	        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
	      }
	      for (j = 0; j < m; ++j) y0[j] = 0;
	      return y0;
	    },
	    zero: d3_layout_stackOffsetZero
	  });
	  function d3_layout_stackOrderDefault(data) {
	    return d3.range(data.length);
	  }
	  function d3_layout_stackOffsetZero(data) {
	    var j = -1, m = data[0].length, y0 = [];
	    while (++j < m) y0[j] = 0;
	    return y0;
	  }
	  function d3_layout_stackMaxIndex(array) {
	    var i = 1, j = 0, v = array[0][1], k, n = array.length;
	    for (;i < n; ++i) {
	      if ((k = array[i][1]) > v) {
	        j = i;
	        v = k;
	      }
	    }
	    return j;
	  }
	  function d3_layout_stackReduceSum(d) {
	    return d.reduce(d3_layout_stackSum, 0);
	  }
	  function d3_layout_stackSum(p, d) {
	    return p + d[1];
	  }
	  d3.layout.histogram = function() {
	    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
	    function histogram(data, i) {
	      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
	      while (++i < m) {
	        bin = bins[i] = [];
	        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
	        bin.y = 0;
	      }
	      if (m > 0) {
	        i = -1;
	        while (++i < n) {
	          x = values[i];
	          if (x >= range[0] && x <= range[1]) {
	            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
	            bin.y += k;
	            bin.push(data[i]);
	          }
	        }
	      }
	      return bins;
	    }
	    histogram.value = function(x) {
	      if (!arguments.length) return valuer;
	      valuer = x;
	      return histogram;
	    };
	    histogram.range = function(x) {
	      if (!arguments.length) return ranger;
	      ranger = d3_functor(x);
	      return histogram;
	    };
	    histogram.bins = function(x) {
	      if (!arguments.length) return binner;
	      binner = typeof x === "number" ? function(range) {
	        return d3_layout_histogramBinFixed(range, x);
	      } : d3_functor(x);
	      return histogram;
	    };
	    histogram.frequency = function(x) {
	      if (!arguments.length) return frequency;
	      frequency = !!x;
	      return histogram;
	    };
	    return histogram;
	  };
	  function d3_layout_histogramBinSturges(range, values) {
	    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
	  }
	  function d3_layout_histogramBinFixed(range, n) {
	    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
	    while (++x <= n) f[x] = m * x + b;
	    return f;
	  }
	  function d3_layout_histogramRange(values) {
	    return [ d3.min(values), d3.max(values) ];
	  }
	  d3.layout.pack = function() {
	    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
	    function pack(d, i) {
	      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
	        return radius;
	      };
	      root.x = root.y = 0;
	      d3_layout_hierarchyVisitAfter(root, function(d) {
	        d.r = +r(d.value);
	      });
	      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
	      if (padding) {
	        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
	        d3_layout_hierarchyVisitAfter(root, function(d) {
	          d.r += dr;
	        });
	        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
	        d3_layout_hierarchyVisitAfter(root, function(d) {
	          d.r -= dr;
	        });
	      }
	      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
	      return nodes;
	    }
	    pack.size = function(_) {
	      if (!arguments.length) return size;
	      size = _;
	      return pack;
	    };
	    pack.radius = function(_) {
	      if (!arguments.length) return radius;
	      radius = _ == null || typeof _ === "function" ? _ : +_;
	      return pack;
	    };
	    pack.padding = function(_) {
	      if (!arguments.length) return padding;
	      padding = +_;
	      return pack;
	    };
	    return d3_layout_hierarchyRebind(pack, hierarchy);
	  };
	  function d3_layout_packSort(a, b) {
	    return a.value - b.value;
	  }
	  function d3_layout_packInsert(a, b) {
	    var c = a._pack_next;
	    a._pack_next = b;
	    b._pack_prev = a;
	    b._pack_next = c;
	    c._pack_prev = b;
	  }
	  function d3_layout_packSplice(a, b) {
	    a._pack_next = b;
	    b._pack_prev = a;
	  }
	  function d3_layout_packIntersects(a, b) {
	    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
	    return .999 * dr * dr > dx * dx + dy * dy;
	  }
	  function d3_layout_packSiblings(node) {
	    if (!(nodes = node.children) || !(n = nodes.length)) return;
	    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
	    function bound(node) {
	      xMin = Math.min(node.x - node.r, xMin);
	      xMax = Math.max(node.x + node.r, xMax);
	      yMin = Math.min(node.y - node.r, yMin);
	      yMax = Math.max(node.y + node.r, yMax);
	    }
	    nodes.forEach(d3_layout_packLink);
	    a = nodes[0];
	    a.x = -a.r;
	    a.y = 0;
	    bound(a);
	    if (n > 1) {
	      b = nodes[1];
	      b.x = b.r;
	      b.y = 0;
	      bound(b);
	      if (n > 2) {
	        c = nodes[2];
	        d3_layout_packPlace(a, b, c);
	        bound(c);
	        d3_layout_packInsert(a, c);
	        a._pack_prev = c;
	        d3_layout_packInsert(c, b);
	        b = a._pack_next;
	        for (i = 3; i < n; i++) {
	          d3_layout_packPlace(a, b, c = nodes[i]);
	          var isect = 0, s1 = 1, s2 = 1;
	          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
	            if (d3_layout_packIntersects(j, c)) {
	              isect = 1;
	              break;
	            }
	          }
	          if (isect == 1) {
	            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
	              if (d3_layout_packIntersects(k, c)) {
	                break;
	              }
	            }
	          }
	          if (isect) {
	            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
	            i--;
	          } else {
	            d3_layout_packInsert(a, c);
	            b = c;
	            bound(c);
	          }
	        }
	      }
	    }
	    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
	    for (i = 0; i < n; i++) {
	      c = nodes[i];
	      c.x -= cx;
	      c.y -= cy;
	      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
	    }
	    node.r = cr;
	    nodes.forEach(d3_layout_packUnlink);
	  }
	  function d3_layout_packLink(node) {
	    node._pack_next = node._pack_prev = node;
	  }
	  function d3_layout_packUnlink(node) {
	    delete node._pack_next;
	    delete node._pack_prev;
	  }
	  function d3_layout_packTransform(node, x, y, k) {
	    var children = node.children;
	    node.x = x += k * node.x;
	    node.y = y += k * node.y;
	    node.r *= k;
	    if (children) {
	      var i = -1, n = children.length;
	      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
	    }
	  }
	  function d3_layout_packPlace(a, b, c) {
	    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
	    if (db && (dx || dy)) {
	      var da = b.r + c.r, dc = dx * dx + dy * dy;
	      da *= da;
	      db *= db;
	      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
	      c.x = a.x + x * dx + y * dy;
	      c.y = a.y + x * dy - y * dx;
	    } else {
	      c.x = a.x + db;
	      c.y = a.y;
	    }
	  }
	  d3.layout.tree = function() {
	    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;
	    function tree(d, i) {
	      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
	      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
	      d3_layout_hierarchyVisitBefore(root1, secondWalk);
	      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {
	        var left = root0, right = root0, bottom = root0;
	        d3_layout_hierarchyVisitBefore(root0, function(node) {
	          if (node.x < left.x) left = node;
	          if (node.x > right.x) right = node;
	          if (node.depth > bottom.depth) bottom = node;
	        });
	        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
	        d3_layout_hierarchyVisitBefore(root0, function(node) {
	          node.x = (node.x + tx) * kx;
	          node.y = node.depth * ky;
	        });
	      }
	      return nodes;
	    }
	    function wrapTree(root0) {
	      var root1 = {
	        A: null,
	        children: [ root0 ]
	      }, queue = [ root1 ], node1;
	      while ((node1 = queue.pop()) != null) {
	        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
	          queue.push((children[i] = child = {
	            _: children[i],
	            parent: node1,
	            children: (child = children[i].children) && child.slice() || [],
	            A: null,
	            a: null,
	            z: 0,
	            m: 0,
	            c: 0,
	            s: 0,
	            t: null,
	            i: i
	          }).a = child);
	        }
	      }
	      return root1.children[0];
	    }
	    function firstWalk(v) {
	      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
	      if (children.length) {
	        d3_layout_treeShift(v);
	        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
	        if (w) {
	          v.z = w.z + separation(v._, w._);
	          v.m = v.z - midpoint;
	        } else {
	          v.z = midpoint;
	        }
	      } else if (w) {
	        v.z = w.z + separation(v._, w._);
	      }
	      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
	    }
	    function secondWalk(v) {
	      v._.x = v.z + v.parent.m;
	      v.m += v.parent.m;
	    }
	    function apportion(v, w, ancestor) {
	      if (w) {
	        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
	        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
	          vom = d3_layout_treeLeft(vom);
	          vop = d3_layout_treeRight(vop);
	          vop.a = v;
	          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
	          if (shift > 0) {
	            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
	            sip += shift;
	            sop += shift;
	          }
	          sim += vim.m;
	          sip += vip.m;
	          som += vom.m;
	          sop += vop.m;
	        }
	        if (vim && !d3_layout_treeRight(vop)) {
	          vop.t = vim;
	          vop.m += sim - sop;
	        }
	        if (vip && !d3_layout_treeLeft(vom)) {
	          vom.t = vip;
	          vom.m += sip - som;
	          ancestor = v;
	        }
	      }
	      return ancestor;
	    }
	    function sizeNode(node) {
	      node.x *= size[0];
	      node.y = node.depth * size[1];
	    }
	    tree.separation = function(x) {
	      if (!arguments.length) return separation;
	      separation = x;
	      return tree;
	    };
	    tree.size = function(x) {
	      if (!arguments.length) return nodeSize ? null : size;
	      nodeSize = (size = x) == null ? sizeNode : null;
	      return tree;
	    };
	    tree.nodeSize = function(x) {
	      if (!arguments.length) return nodeSize ? size : null;
	      nodeSize = (size = x) == null ? null : sizeNode;
	      return tree;
	    };
	    return d3_layout_hierarchyRebind(tree, hierarchy);
	  };
	  function d3_layout_treeSeparation(a, b) {
	    return a.parent == b.parent ? 1 : 2;
	  }
	  function d3_layout_treeLeft(v) {
	    var children = v.children;
	    return children.length ? children[0] : v.t;
	  }
	  function d3_layout_treeRight(v) {
	    var children = v.children, n;
	    return (n = children.length) ? children[n - 1] : v.t;
	  }
	  function d3_layout_treeMove(wm, wp, shift) {
	    var change = shift / (wp.i - wm.i);
	    wp.c -= change;
	    wp.s += shift;
	    wm.c += change;
	    wp.z += shift;
	    wp.m += shift;
	  }
	  function d3_layout_treeShift(v) {
	    var shift = 0, change = 0, children = v.children, i = children.length, w;
	    while (--i >= 0) {
	      w = children[i];
	      w.z += shift;
	      w.m += shift;
	      shift += w.s + (change += w.c);
	    }
	  }
	  function d3_layout_treeAncestor(vim, v, ancestor) {
	    return vim.a.parent === v.parent ? vim.a : ancestor;
	  }
	  d3.layout.cluster = function() {
	    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
	    function cluster(d, i) {
	      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
	      d3_layout_hierarchyVisitAfter(root, function(node) {
	        var children = node.children;
	        if (children && children.length) {
	          node.x = d3_layout_clusterX(children);
	          node.y = d3_layout_clusterY(children);
	        } else {
	          node.x = previousNode ? x += separation(node, previousNode) : 0;
	          node.y = 0;
	          previousNode = node;
	        }
	      });
	      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
	      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {
	        node.x = (node.x - root.x) * size[0];
	        node.y = (root.y - node.y) * size[1];
	      } : function(node) {
	        node.x = (node.x - x0) / (x1 - x0) * size[0];
	        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
	      });
	      return nodes;
	    }
	    cluster.separation = function(x) {
	      if (!arguments.length) return separation;
	      separation = x;
	      return cluster;
	    };
	    cluster.size = function(x) {
	      if (!arguments.length) return nodeSize ? null : size;
	      nodeSize = (size = x) == null;
	      return cluster;
	    };
	    cluster.nodeSize = function(x) {
	      if (!arguments.length) return nodeSize ? size : null;
	      nodeSize = (size = x) != null;
	      return cluster;
	    };
	    return d3_layout_hierarchyRebind(cluster, hierarchy);
	  };
	  function d3_layout_clusterY(children) {
	    return 1 + d3.max(children, function(child) {
	      return child.y;
	    });
	  }
	  function d3_layout_clusterX(children) {
	    return children.reduce(function(x, child) {
	      return x + child.x;
	    }, 0) / children.length;
	  }
	  function d3_layout_clusterLeft(node) {
	    var children = node.children;
	    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
	  }
	  function d3_layout_clusterRight(node) {
	    var children = node.children, n;
	    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
	  }
	  d3.layout.treemap = function() {
	    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
	    function scale(children, k) {
	      var i = -1, n = children.length, child, area;
	      while (++i < n) {
	        area = (child = children[i]).value * (k < 0 ? 0 : k);
	        child.area = isNaN(area) || area <= 0 ? 0 : area;
	      }
	    }
	    function squarify(node) {
	      var children = node.children;
	      if (children && children.length) {
	        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
	        scale(remaining, rect.dx * rect.dy / node.value);
	        row.area = 0;
	        while ((n = remaining.length) > 0) {
	          row.push(child = remaining[n - 1]);
	          row.area += child.area;
	          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
	            remaining.pop();
	            best = score;
	          } else {
	            row.area -= row.pop().area;
	            position(row, u, rect, false);
	            u = Math.min(rect.dx, rect.dy);
	            row.length = row.area = 0;
	            best = Infinity;
	          }
	        }
	        if (row.length) {
	          position(row, u, rect, true);
	          row.length = row.area = 0;
	        }
	        children.forEach(squarify);
	      }
	    }
	    function stickify(node) {
	      var children = node.children;
	      if (children && children.length) {
	        var rect = pad(node), remaining = children.slice(), child, row = [];
	        scale(remaining, rect.dx * rect.dy / node.value);
	        row.area = 0;
	        while (child = remaining.pop()) {
	          row.push(child);
	          row.area += child.area;
	          if (child.z != null) {
	            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
	            row.length = row.area = 0;
	          }
	        }
	        children.forEach(stickify);
	      }
	    }
	    function worst(row, u) {
	      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
	      while (++i < n) {
	        if (!(r = row[i].area)) continue;
	        if (r < rmin) rmin = r;
	        if (r > rmax) rmax = r;
	      }
	      s *= s;
	      u *= u;
	      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
	    }
	    function position(row, u, rect, flush) {
	      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
	      if (u == rect.dx) {
	        if (flush || v > rect.dy) v = rect.dy;
	        while (++i < n) {
	          o = row[i];
	          o.x = x;
	          o.y = y;
	          o.dy = v;
	          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
	        }
	        o.z = true;
	        o.dx += rect.x + rect.dx - x;
	        rect.y += v;
	        rect.dy -= v;
	      } else {
	        if (flush || v > rect.dx) v = rect.dx;
	        while (++i < n) {
	          o = row[i];
	          o.x = x;
	          o.y = y;
	          o.dx = v;
	          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
	        }
	        o.z = false;
	        o.dy += rect.y + rect.dy - y;
	        rect.x += v;
	        rect.dx -= v;
	      }
	    }
	    function treemap(d) {
	      var nodes = stickies || hierarchy(d), root = nodes[0];
	      root.x = 0;
	      root.y = 0;
	      root.dx = size[0];
	      root.dy = size[1];
	      if (stickies) hierarchy.revalue(root);
	      scale([ root ], root.dx * root.dy / root.value);
	      (stickies ? stickify : squarify)(root);
	      if (sticky) stickies = nodes;
	      return nodes;
	    }
	    treemap.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return treemap;
	    };
	    treemap.padding = function(x) {
	      if (!arguments.length) return padding;
	      function padFunction(node) {
	        var p = x.call(treemap, node, node.depth);
	        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
	      }
	      function padConstant(node) {
	        return d3_layout_treemapPad(node, x);
	      }
	      var type;
	      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ], 
	      padConstant) : padConstant;
	      return treemap;
	    };
	    treemap.round = function(x) {
	      if (!arguments.length) return round != Number;
	      round = x ? Math.round : Number;
	      return treemap;
	    };
	    treemap.sticky = function(x) {
	      if (!arguments.length) return sticky;
	      sticky = x;
	      stickies = null;
	      return treemap;
	    };
	    treemap.ratio = function(x) {
	      if (!arguments.length) return ratio;
	      ratio = x;
	      return treemap;
	    };
	    treemap.mode = function(x) {
	      if (!arguments.length) return mode;
	      mode = x + "";
	      return treemap;
	    };
	    return d3_layout_hierarchyRebind(treemap, hierarchy);
	  };
	  function d3_layout_treemapPadNull(node) {
	    return {
	      x: node.x,
	      y: node.y,
	      dx: node.dx,
	      dy: node.dy
	    };
	  }
	  function d3_layout_treemapPad(node, padding) {
	    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
	    if (dx < 0) {
	      x += dx / 2;
	      dx = 0;
	    }
	    if (dy < 0) {
	      y += dy / 2;
	      dy = 0;
	    }
	    return {
	      x: x,
	      y: y,
	      dx: dx,
	      dy: dy
	    };
	  }
	  d3.random = {
	    normal: function(µ, σ) {
	      var n = arguments.length;
	      if (n < 2) σ = 1;
	      if (n < 1) µ = 0;
	      return function() {
	        var x, y, r;
	        do {
	          x = Math.random() * 2 - 1;
	          y = Math.random() * 2 - 1;
	          r = x * x + y * y;
	        } while (!r || r > 1);
	        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
	      };
	    },
	    logNormal: function() {
	      var random = d3.random.normal.apply(d3, arguments);
	      return function() {
	        return Math.exp(random());
	      };
	    },
	    bates: function(m) {
	      var random = d3.random.irwinHall(m);
	      return function() {
	        return random() / m;
	      };
	    },
	    irwinHall: function(m) {
	      return function() {
	        for (var s = 0, j = 0; j < m; j++) s += Math.random();
	        return s;
	      };
	    }
	  };
	  d3.scale = {};
	  function d3_scaleExtent(domain) {
	    var start = domain[0], stop = domain[domain.length - 1];
	    return start < stop ? [ start, stop ] : [ stop, start ];
	  }
	  function d3_scaleRange(scale) {
	    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
	  }
	  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
	    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
	    return function(x) {
	      return i(u(x));
	    };
	  }
	  function d3_scale_nice(domain, nice) {
	    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
	    if (x1 < x0) {
	      dx = i0, i0 = i1, i1 = dx;
	      dx = x0, x0 = x1, x1 = dx;
	    }
	    domain[i0] = nice.floor(x0);
	    domain[i1] = nice.ceil(x1);
	    return domain;
	  }
	  function d3_scale_niceStep(step) {
	    return step ? {
	      floor: function(x) {
	        return Math.floor(x / step) * step;
	      },
	      ceil: function(x) {
	        return Math.ceil(x / step) * step;
	      }
	    } : d3_scale_niceIdentity;
	  }
	  var d3_scale_niceIdentity = {
	    floor: d3_identity,
	    ceil: d3_identity
	  };
	  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
	    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
	    if (domain[k] < domain[0]) {
	      domain = domain.slice().reverse();
	      range = range.slice().reverse();
	    }
	    while (++j <= k) {
	      u.push(uninterpolate(domain[j - 1], domain[j]));
	      i.push(interpolate(range[j - 1], range[j]));
	    }
	    return function(x) {
	      var j = d3.bisect(domain, x, 1, k) - 1;
	      return i[j](u[j](x));
	    };
	  }
	  d3.scale.linear = function() {
	    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
	  };
	  function d3_scale_linear(domain, range, interpolate, clamp) {
	    var output, input;
	    function rescale() {
	      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
	      output = linear(domain, range, uninterpolate, interpolate);
	      input = linear(range, domain, uninterpolate, d3_interpolate);
	      return scale;
	    }
	    function scale(x) {
	      return output(x);
	    }
	    scale.invert = function(y) {
	      return input(y);
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(Number);
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.rangeRound = function(x) {
	      return scale.range(x).interpolate(d3_interpolateRound);
	    };
	    scale.clamp = function(x) {
	      if (!arguments.length) return clamp;
	      clamp = x;
	      return rescale();
	    };
	    scale.interpolate = function(x) {
	      if (!arguments.length) return interpolate;
	      interpolate = x;
	      return rescale();
	    };
	    scale.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    scale.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    scale.nice = function(m) {
	      d3_scale_linearNice(domain, m);
	      return rescale();
	    };
	    scale.copy = function() {
	      return d3_scale_linear(domain, range, interpolate, clamp);
	    };
	    return rescale();
	  }
	  function d3_scale_linearRebind(scale, linear) {
	    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
	  }
	  function d3_scale_linearNice(domain, m) {
	    return d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
	  }
	  function d3_scale_linearTickRange(domain, m) {
	    if (m == null) m = 10;
	    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
	    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
	    extent[0] = Math.ceil(extent[0] / step) * step;
	    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
	    extent[2] = step;
	    return extent;
	  }
	  function d3_scale_linearTicks(domain, m) {
	    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
	  }
	  function d3_scale_linearTickFormat(domain, m, format) {
	    var range = d3_scale_linearTickRange(domain, m);
	    if (format) {
	      var match = d3_format_re.exec(format);
	      match.shift();
	      if (match[8] === "s") {
	        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
	        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
	        match[8] = "f";
	        format = d3.format(match.join(""));
	        return function(d) {
	          return format(prefix.scale(d)) + prefix.symbol;
	        };
	      }
	      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
	      format = match.join("");
	    } else {
	      format = ",." + d3_scale_linearPrecision(range[2]) + "f";
	    }
	    return d3.format(format);
	  }
	  var d3_scale_linearFormatSignificant = {
	    s: 1,
	    g: 1,
	    p: 1,
	    r: 1,
	    e: 1
	  };
	  function d3_scale_linearPrecision(value) {
	    return -Math.floor(Math.log(value) / Math.LN10 + .01);
	  }
	  function d3_scale_linearFormatPrecision(type, range) {
	    var p = d3_scale_linearPrecision(range[2]);
	    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
	  }
	  d3.scale.log = function() {
	    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
	  };
	  function d3_scale_log(linear, base, positive, domain) {
	    function log(x) {
	      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
	    }
	    function pow(x) {
	      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
	    }
	    function scale(x) {
	      return linear(log(x));
	    }
	    scale.invert = function(x) {
	      return pow(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      positive = x[0] >= 0;
	      linear.domain((domain = x.map(Number)).map(log));
	      return scale;
	    };
	    scale.base = function(_) {
	      if (!arguments.length) return base;
	      base = +_;
	      linear.domain(domain.map(log));
	      return scale;
	    };
	    scale.nice = function() {
	      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
	      linear.domain(niced);
	      domain = niced.map(pow);
	      return scale;
	    };
	    scale.ticks = function() {
	      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
	      if (isFinite(j - i)) {
	        if (positive) {
	          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
	          ticks.push(pow(i));
	        } else {
	          ticks.push(pow(i));
	          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
	        }
	        for (i = 0; ticks[i] < u; i++) {}
	        for (j = ticks.length; ticks[j - 1] > v; j--) {}
	        ticks = ticks.slice(i, j);
	      }
	      return ticks;
	    };
	    scale.tickFormat = function(n, format) {
	      if (!arguments.length) return d3_scale_logFormat;
	      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
	      var k = Math.max(.1, n / scale.ticks().length), f = positive ? (e = 1e-12, Math.ceil) : (e = -1e-12, 
	      Math.floor), e;
	      return function(d) {
	        return d / pow(f(log(d) + e)) <= k ? format(d) : "";
	      };
	    };
	    scale.copy = function() {
	      return d3_scale_log(linear.copy(), base, positive, domain);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
	    floor: function(x) {
	      return -Math.ceil(-x);
	    },
	    ceil: function(x) {
	      return -Math.floor(-x);
	    }
	  };
	  d3.scale.pow = function() {
	    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
	  };
	  function d3_scale_pow(linear, exponent, domain) {
	    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
	    function scale(x) {
	      return linear(powp(x));
	    }
	    scale.invert = function(x) {
	      return powb(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      linear.domain((domain = x.map(Number)).map(powp));
	      return scale;
	    };
	    scale.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    scale.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    scale.nice = function(m) {
	      return scale.domain(d3_scale_linearNice(domain, m));
	    };
	    scale.exponent = function(x) {
	      if (!arguments.length) return exponent;
	      powp = d3_scale_powPow(exponent = x);
	      powb = d3_scale_powPow(1 / exponent);
	      linear.domain(domain.map(powp));
	      return scale;
	    };
	    scale.copy = function() {
	      return d3_scale_pow(linear.copy(), exponent, domain);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  function d3_scale_powPow(e) {
	    return function(x) {
	      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
	    };
	  }
	  d3.scale.sqrt = function() {
	    return d3.scale.pow().exponent(.5);
	  };
	  d3.scale.ordinal = function() {
	    return d3_scale_ordinal([], {
	      t: "range",
	      a: [ [] ]
	    });
	  };
	  function d3_scale_ordinal(domain, ranger) {
	    var index, range, rangeBand;
	    function scale(x) {
	      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
	    }
	    function steps(start, step) {
	      return d3.range(domain.length).map(function(i) {
	        return start + step * i;
	      });
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = [];
	      index = new d3_Map();
	      var i = -1, n = x.length, xi;
	      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
	      return scale[ranger.t].apply(scale, ranger.a);
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      rangeBand = 0;
	      ranger = {
	        t: "range",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangePoints = function(x, padding) {
	      if (arguments.length < 2) padding = 0;
	      var start = x[0], stop = x[1], step = (stop - start) / (Math.max(1, domain.length - 1) + padding);
	      range = steps(domain.length < 2 ? (start + stop) / 2 : start + step * padding / 2, step);
	      rangeBand = 0;
	      ranger = {
	        t: "rangePoints",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeBands = function(x, padding, outerPadding) {
	      if (arguments.length < 2) padding = 0;
	      if (arguments.length < 3) outerPadding = padding;
	      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
	      range = steps(start + step * outerPadding, step);
	      if (reverse) range.reverse();
	      rangeBand = step * (1 - padding);
	      ranger = {
	        t: "rangeBands",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeRoundBands = function(x, padding, outerPadding) {
	      if (arguments.length < 2) padding = 0;
	      if (arguments.length < 3) outerPadding = padding;
	      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding)), error = stop - start - (domain.length - padding) * step;
	      range = steps(start + Math.round(error / 2), step);
	      if (reverse) range.reverse();
	      rangeBand = Math.round(step * (1 - padding));
	      ranger = {
	        t: "rangeRoundBands",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeBand = function() {
	      return rangeBand;
	    };
	    scale.rangeExtent = function() {
	      return d3_scaleExtent(ranger.a[0]);
	    };
	    scale.copy = function() {
	      return d3_scale_ordinal(domain, ranger);
	    };
	    return scale.domain(domain);
	  }
	  d3.scale.category10 = function() {
	    return d3.scale.ordinal().range(d3_category10);
	  };
	  d3.scale.category20 = function() {
	    return d3.scale.ordinal().range(d3_category20);
	  };
	  d3.scale.category20b = function() {
	    return d3.scale.ordinal().range(d3_category20b);
	  };
	  d3.scale.category20c = function() {
	    return d3.scale.ordinal().range(d3_category20c);
	  };
	  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
	  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
	  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
	  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
	  d3.scale.quantile = function() {
	    return d3_scale_quantile([], []);
	  };
	  function d3_scale_quantile(domain, range) {
	    var thresholds;
	    function rescale() {
	      var k = 0, q = range.length;
	      thresholds = [];
	      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
	      return scale;
	    }
	    function scale(x) {
	      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.quantiles = function() {
	      return thresholds;
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
	    };
	    scale.copy = function() {
	      return d3_scale_quantile(domain, range);
	    };
	    return rescale();
	  }
	  d3.scale.quantize = function() {
	    return d3_scale_quantize(0, 1, [ 0, 1 ]);
	  };
	  function d3_scale_quantize(x0, x1, range) {
	    var kx, i;
	    function scale(x) {
	      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
	    }
	    function rescale() {
	      kx = range.length / (x1 - x0);
	      i = range.length - 1;
	      return scale;
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return [ x0, x1 ];
	      x0 = +x[0];
	      x1 = +x[x.length - 1];
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      y = y < 0 ? NaN : y / kx + x0;
	      return [ y, y + 1 / kx ];
	    };
	    scale.copy = function() {
	      return d3_scale_quantize(x0, x1, range);
	    };
	    return rescale();
	  }
	  d3.scale.threshold = function() {
	    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
	  };
	  function d3_scale_threshold(domain, range) {
	    function scale(x) {
	      if (x <= x) return range[d3.bisect(domain, x)];
	    }
	    scale.domain = function(_) {
	      if (!arguments.length) return domain;
	      domain = _;
	      return scale;
	    };
	    scale.range = function(_) {
	      if (!arguments.length) return range;
	      range = _;
	      return scale;
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      return [ domain[y - 1], domain[y] ];
	    };
	    scale.copy = function() {
	      return d3_scale_threshold(domain, range);
	    };
	    return scale;
	  }
	  d3.scale.identity = function() {
	    return d3_scale_identity([ 0, 1 ]);
	  };
	  function d3_scale_identity(domain) {
	    function identity(x) {
	      return +x;
	    }
	    identity.invert = identity;
	    identity.domain = identity.range = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(identity);
	      return identity;
	    };
	    identity.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    identity.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    identity.copy = function() {
	      return d3_scale_identity(domain);
	    };
	    return identity;
	  }
	  d3.svg = {};
	  d3.svg.arc = function() {
	    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
	    function arc() {
	      var r0 = innerRadius.apply(this, arguments), r1 = outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) + d3_svg_arcOffset, a1 = endAngle.apply(this, arguments) + d3_svg_arcOffset, da = (a1 < a0 && (da = a0, 
	      a0 = a1, a1 = da), a1 - a0), df = da < π ? "0" : "1", c0 = Math.cos(a0), s0 = Math.sin(a0), c1 = Math.cos(a1), s1 = Math.sin(a1);
	      return da >= d3_svg_arcMax ? r0 ? "M0," + r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + -r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + r1 + "M0," + r0 + "A" + r0 + "," + r0 + " 0 1,0 0," + -r0 + "A" + r0 + "," + r0 + " 0 1,0 0," + r0 + "Z" : "M0," + r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + -r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + r1 + "Z" : r0 ? "M" + r1 * c0 + "," + r1 * s0 + "A" + r1 + "," + r1 + " 0 " + df + ",1 " + r1 * c1 + "," + r1 * s1 + "L" + r0 * c1 + "," + r0 * s1 + "A" + r0 + "," + r0 + " 0 " + df + ",0 " + r0 * c0 + "," + r0 * s0 + "Z" : "M" + r1 * c0 + "," + r1 * s0 + "A" + r1 + "," + r1 + " 0 " + df + ",1 " + r1 * c1 + "," + r1 * s1 + "L0,0" + "Z";
	    }
	    arc.innerRadius = function(v) {
	      if (!arguments.length) return innerRadius;
	      innerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.outerRadius = function(v) {
	      if (!arguments.length) return outerRadius;
	      outerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.startAngle = function(v) {
	      if (!arguments.length) return startAngle;
	      startAngle = d3_functor(v);
	      return arc;
	    };
	    arc.endAngle = function(v) {
	      if (!arguments.length) return endAngle;
	      endAngle = d3_functor(v);
	      return arc;
	    };
	    arc.centroid = function() {
	      var r = (innerRadius.apply(this, arguments) + outerRadius.apply(this, arguments)) / 2, a = (startAngle.apply(this, arguments) + endAngle.apply(this, arguments)) / 2 + d3_svg_arcOffset;
	      return [ Math.cos(a) * r, Math.sin(a) * r ];
	    };
	    return arc;
	  };
	  var d3_svg_arcOffset = -halfπ, d3_svg_arcMax = τ - ε;
	  function d3_svg_arcInnerRadius(d) {
	    return d.innerRadius;
	  }
	  function d3_svg_arcOuterRadius(d) {
	    return d.outerRadius;
	  }
	  function d3_svg_arcStartAngle(d) {
	    return d.startAngle;
	  }
	  function d3_svg_arcEndAngle(d) {
	    return d.endAngle;
	  }
	  function d3_svg_line(projection) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
	    function line(data) {
	      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
	      function segment() {
	        segments.push("M", interpolate(projection(points), tension));
	      }
	      while (++i < n) {
	        if (defined.call(this, d = data[i], i)) {
	          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
	        } else if (points.length) {
	          segment();
	          points = [];
	        }
	      }
	      if (points.length) segment();
	      return segments.length ? segments.join("") : null;
	    }
	    line.x = function(_) {
	      if (!arguments.length) return x;
	      x = _;
	      return line;
	    };
	    line.y = function(_) {
	      if (!arguments.length) return y;
	      y = _;
	      return line;
	    };
	    line.defined = function(_) {
	      if (!arguments.length) return defined;
	      defined = _;
	      return line;
	    };
	    line.interpolate = function(_) {
	      if (!arguments.length) return interpolateKey;
	      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
	      return line;
	    };
	    line.tension = function(_) {
	      if (!arguments.length) return tension;
	      tension = _;
	      return line;
	    };
	    return line;
	  }
	  d3.svg.line = function() {
	    return d3_svg_line(d3_identity);
	  };
	  var d3_svg_lineInterpolators = d3.map({
	    linear: d3_svg_lineLinear,
	    "linear-closed": d3_svg_lineLinearClosed,
	    step: d3_svg_lineStep,
	    "step-before": d3_svg_lineStepBefore,
	    "step-after": d3_svg_lineStepAfter,
	    basis: d3_svg_lineBasis,
	    "basis-open": d3_svg_lineBasisOpen,
	    "basis-closed": d3_svg_lineBasisClosed,
	    bundle: d3_svg_lineBundle,
	    cardinal: d3_svg_lineCardinal,
	    "cardinal-open": d3_svg_lineCardinalOpen,
	    "cardinal-closed": d3_svg_lineCardinalClosed,
	    monotone: d3_svg_lineMonotone
	  });
	  d3_svg_lineInterpolators.forEach(function(key, value) {
	    value.key = key;
	    value.closed = /-closed$/.test(key);
	  });
	  function d3_svg_lineLinear(points) {
	    return points.join("L");
	  }
	  function d3_svg_lineLinearClosed(points) {
	    return d3_svg_lineLinear(points) + "Z";
	  }
	  function d3_svg_lineStep(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
	    if (n > 1) path.push("H", p[0]);
	    return path.join("");
	  }
	  function d3_svg_lineStepBefore(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
	    return path.join("");
	  }
	  function d3_svg_lineStepAfter(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
	    return path.join("");
	  }
	  function d3_svg_lineCardinalOpen(points, tension) {
	    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, points.length - 1), d3_svg_lineCardinalTangents(points, tension));
	  }
	  function d3_svg_lineCardinalClosed(points, tension) {
	    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), 
	    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
	  }
	  function d3_svg_lineCardinal(points, tension) {
	    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
	  }
	  function d3_svg_lineHermite(points, tangents) {
	    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
	      return d3_svg_lineLinear(points);
	    }
	    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
	    if (quad) {
	      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
	      p0 = points[1];
	      pi = 2;
	    }
	    if (tangents.length > 1) {
	      t = tangents[1];
	      p = points[pi];
	      pi++;
	      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
	      for (var i = 2; i < tangents.length; i++, pi++) {
	        p = points[pi];
	        t = tangents[i];
	        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
	      }
	    }
	    if (quad) {
	      var lp = points[pi];
	      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
	    }
	    return path;
	  }
	  function d3_svg_lineCardinalTangents(points, tension) {
	    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
	    while (++i < n) {
	      p0 = p1;
	      p1 = p2;
	      p2 = points[i];
	      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
	    }
	    return tangents;
	  }
	  function d3_svg_lineBasis(points) {
	    if (points.length < 3) return d3_svg_lineLinear(points);
	    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
	    points.push(points[n - 1]);
	    while (++i <= n) {
	      pi = points[i];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    points.pop();
	    path.push("L", pi);
	    return path.join("");
	  }
	  function d3_svg_lineBasisOpen(points) {
	    if (points.length < 4) return d3_svg_lineLinear(points);
	    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
	    while (++i < 3) {
	      pi = points[i];
	      px.push(pi[0]);
	      py.push(pi[1]);
	    }
	    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
	    --i;
	    while (++i < n) {
	      pi = points[i];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    return path.join("");
	  }
	  function d3_svg_lineBasisClosed(points) {
	    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
	    while (++i < 4) {
	      pi = points[i % n];
	      px.push(pi[0]);
	      py.push(pi[1]);
	    }
	    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
	    --i;
	    while (++i < m) {
	      pi = points[i % n];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    return path.join("");
	  }
	  function d3_svg_lineBundle(points, tension) {
	    var n = points.length - 1;
	    if (n) {
	      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
	      while (++i <= n) {
	        p = points[i];
	        t = i / n;
	        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
	        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
	      }
	    }
	    return d3_svg_lineBasis(points);
	  }
	  function d3_svg_lineDot4(a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
	  }
	  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
	  function d3_svg_lineBasisBezier(path, x, y) {
	    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
	  }
	  function d3_svg_lineSlope(p0, p1) {
	    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
	  }
	  function d3_svg_lineFiniteDifferences(points) {
	    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
	    while (++i < j) {
	      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
	    }
	    m[i] = d;
	    return m;
	  }
	  function d3_svg_lineMonotoneTangents(points) {
	    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
	    while (++i < j) {
	      d = d3_svg_lineSlope(points[i], points[i + 1]);
	      if (abs(d) < ε) {
	        m[i] = m[i + 1] = 0;
	      } else {
	        a = m[i] / d;
	        b = m[i + 1] / d;
	        s = a * a + b * b;
	        if (s > 9) {
	          s = d * 3 / Math.sqrt(s);
	          m[i] = s * a;
	          m[i + 1] = s * b;
	        }
	      }
	    }
	    i = -1;
	    while (++i <= j) {
	      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
	      tangents.push([ s || 0, m[i] * s || 0 ]);
	    }
	    return tangents;
	  }
	  function d3_svg_lineMonotone(points) {
	    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
	  }
	  d3.svg.line.radial = function() {
	    var line = d3_svg_line(d3_svg_lineRadial);
	    line.radius = line.x, delete line.x;
	    line.angle = line.y, delete line.y;
	    return line;
	  };
	  function d3_svg_lineRadial(points) {
	    var point, i = -1, n = points.length, r, a;
	    while (++i < n) {
	      point = points[i];
	      r = point[0];
	      a = point[1] + d3_svg_arcOffset;
	      point[0] = r * Math.cos(a);
	      point[1] = r * Math.sin(a);
	    }
	    return points;
	  }
	  function d3_svg_area(projection) {
	    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
	    function area(data) {
	      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
	        return x;
	      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
	        return y;
	      } : d3_functor(y1), x, y;
	      function segment() {
	        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
	      }
	      while (++i < n) {
	        if (defined.call(this, d = data[i], i)) {
	          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
	          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
	        } else if (points0.length) {
	          segment();
	          points0 = [];
	          points1 = [];
	        }
	      }
	      if (points0.length) segment();
	      return segments.length ? segments.join("") : null;
	    }
	    area.x = function(_) {
	      if (!arguments.length) return x1;
	      x0 = x1 = _;
	      return area;
	    };
	    area.x0 = function(_) {
	      if (!arguments.length) return x0;
	      x0 = _;
	      return area;
	    };
	    area.x1 = function(_) {
	      if (!arguments.length) return x1;
	      x1 = _;
	      return area;
	    };
	    area.y = function(_) {
	      if (!arguments.length) return y1;
	      y0 = y1 = _;
	      return area;
	    };
	    area.y0 = function(_) {
	      if (!arguments.length) return y0;
	      y0 = _;
	      return area;
	    };
	    area.y1 = function(_) {
	      if (!arguments.length) return y1;
	      y1 = _;
	      return area;
	    };
	    area.defined = function(_) {
	      if (!arguments.length) return defined;
	      defined = _;
	      return area;
	    };
	    area.interpolate = function(_) {
	      if (!arguments.length) return interpolateKey;
	      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
	      interpolateReverse = interpolate.reverse || interpolate;
	      L = interpolate.closed ? "M" : "L";
	      return area;
	    };
	    area.tension = function(_) {
	      if (!arguments.length) return tension;
	      tension = _;
	      return area;
	    };
	    return area;
	  }
	  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
	  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
	  d3.svg.area = function() {
	    return d3_svg_area(d3_identity);
	  };
	  d3.svg.area.radial = function() {
	    var area = d3_svg_area(d3_svg_lineRadial);
	    area.radius = area.x, delete area.x;
	    area.innerRadius = area.x0, delete area.x0;
	    area.outerRadius = area.x1, delete area.x1;
	    area.angle = area.y, delete area.y;
	    area.startAngle = area.y0, delete area.y0;
	    area.endAngle = area.y1, delete area.y1;
	    return area;
	  };
	  d3.svg.chord = function() {
	    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
	    function chord(d, i) {
	      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
	      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
	    }
	    function subgroup(self, f, d, i) {
	      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) + d3_svg_arcOffset, a1 = endAngle.call(self, subgroup, i) + d3_svg_arcOffset;
	      return {
	        r: r,
	        a0: a0,
	        a1: a1,
	        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
	        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
	      };
	    }
	    function equals(a, b) {
	      return a.a0 == b.a0 && a.a1 == b.a1;
	    }
	    function arc(r, p, a) {
	      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
	    }
	    function curve(r0, p0, r1, p1) {
	      return "Q 0,0 " + p1;
	    }
	    chord.radius = function(v) {
	      if (!arguments.length) return radius;
	      radius = d3_functor(v);
	      return chord;
	    };
	    chord.source = function(v) {
	      if (!arguments.length) return source;
	      source = d3_functor(v);
	      return chord;
	    };
	    chord.target = function(v) {
	      if (!arguments.length) return target;
	      target = d3_functor(v);
	      return chord;
	    };
	    chord.startAngle = function(v) {
	      if (!arguments.length) return startAngle;
	      startAngle = d3_functor(v);
	      return chord;
	    };
	    chord.endAngle = function(v) {
	      if (!arguments.length) return endAngle;
	      endAngle = d3_functor(v);
	      return chord;
	    };
	    return chord;
	  };
	  function d3_svg_chordRadius(d) {
	    return d.radius;
	  }
	  d3.svg.diagonal = function() {
	    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
	    function diagonal(d, i) {
	      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
	        x: p0.x,
	        y: m
	      }, {
	        x: p3.x,
	        y: m
	      }, p3 ];
	      p = p.map(projection);
	      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
	    }
	    diagonal.source = function(x) {
	      if (!arguments.length) return source;
	      source = d3_functor(x);
	      return diagonal;
	    };
	    diagonal.target = function(x) {
	      if (!arguments.length) return target;
	      target = d3_functor(x);
	      return diagonal;
	    };
	    diagonal.projection = function(x) {
	      if (!arguments.length) return projection;
	      projection = x;
	      return diagonal;
	    };
	    return diagonal;
	  };
	  function d3_svg_diagonalProjection(d) {
	    return [ d.x, d.y ];
	  }
	  d3.svg.diagonal.radial = function() {
	    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
	    diagonal.projection = function(x) {
	      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
	    };
	    return diagonal;
	  };
	  function d3_svg_diagonalRadialProjection(projection) {
	    return function() {
	      var d = projection.apply(this, arguments), r = d[0], a = d[1] + d3_svg_arcOffset;
	      return [ r * Math.cos(a), r * Math.sin(a) ];
	    };
	  }
	  d3.svg.symbol = function() {
	    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
	    function symbol(d, i) {
	      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
	    }
	    symbol.type = function(x) {
	      if (!arguments.length) return type;
	      type = d3_functor(x);
	      return symbol;
	    };
	    symbol.size = function(x) {
	      if (!arguments.length) return size;
	      size = d3_functor(x);
	      return symbol;
	    };
	    return symbol;
	  };
	  function d3_svg_symbolSize() {
	    return 64;
	  }
	  function d3_svg_symbolType() {
	    return "circle";
	  }
	  function d3_svg_symbolCircle(size) {
	    var r = Math.sqrt(size / π);
	    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
	  }
	  var d3_svg_symbols = d3.map({
	    circle: d3_svg_symbolCircle,
	    cross: function(size) {
	      var r = Math.sqrt(size / 5) / 2;
	      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
	    },
	    diamond: function(size) {
	      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
	      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
	    },
	    square: function(size) {
	      var r = Math.sqrt(size) / 2;
	      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
	    },
	    "triangle-down": function(size) {
	      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
	      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
	    },
	    "triangle-up": function(size) {
	      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
	      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
	    }
	  });
	  d3.svg.symbolTypes = d3_svg_symbols.keys();
	  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
	  function d3_transition(groups, id) {
	    d3_subclass(groups, d3_transitionPrototype);
	    groups.id = id;
	    return groups;
	  }
	  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
	  d3_transitionPrototype.call = d3_selectionPrototype.call;
	  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
	  d3_transitionPrototype.node = d3_selectionPrototype.node;
	  d3_transitionPrototype.size = d3_selectionPrototype.size;
	  d3.transition = function(selection) {
	    return arguments.length ? d3_transitionInheritId ? selection.transition() : selection : d3_selectionRoot.transition();
	  };
	  d3.transition.prototype = d3_transitionPrototype;
	  d3_transitionPrototype.select = function(selector) {
	    var id = this.id, subgroups = [], subgroup, subnode, node;
	    selector = d3_selection_selector(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
	          if ("__data__" in node) subnode.__data__ = node.__data__;
	          d3_transitionNode(subnode, i, id, node.__transition__[id]);
	          subgroup.push(subnode);
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_transition(subgroups, id);
	  };
	  d3_transitionPrototype.selectAll = function(selector) {
	    var id = this.id, subgroups = [], subgroup, subnodes, node, subnode, transition;
	    selector = d3_selection_selectorAll(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          transition = node.__transition__[id];
	          subnodes = selector.call(node, node.__data__, i, j);
	          subgroups.push(subgroup = []);
	          for (var k = -1, o = subnodes.length; ++k < o; ) {
	            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, id, transition);
	            subgroup.push(subnode);
	          }
	        }
	      }
	    }
	    return d3_transition(subgroups, id);
	  };
	  d3_transitionPrototype.filter = function(filter) {
	    var subgroups = [], subgroup, group, node;
	    if (typeof filter !== "function") filter = d3_selection_filter(filter);
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
	          subgroup.push(node);
	        }
	      }
	    }
	    return d3_transition(subgroups, this.id);
	  };
	  d3_transitionPrototype.tween = function(name, tween) {
	    var id = this.id;
	    if (arguments.length < 2) return this.node().__transition__[id].tween.get(name);
	    return d3_selection_each(this, tween == null ? function(node) {
	      node.__transition__[id].tween.remove(name);
	    } : function(node) {
	      node.__transition__[id].tween.set(name, tween);
	    });
	  };
	  function d3_transition_tween(groups, name, value, tween) {
	    var id = groups.id;
	    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
	      node.__transition__[id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
	    } : (value = tween(value), function(node) {
	      node.__transition__[id].tween.set(name, value);
	    }));
	  }
	  d3_transitionPrototype.attr = function(nameNS, value) {
	    if (arguments.length < 2) {
	      for (value in nameNS) this.attr(value, nameNS[value]);
	      return this;
	    }
	    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
	    function attrNull() {
	      this.removeAttribute(name);
	    }
	    function attrNullNS() {
	      this.removeAttributeNS(name.space, name.local);
	    }
	    function attrTween(b) {
	      return b == null ? attrNull : (b += "", function() {
	        var a = this.getAttribute(name), i;
	        return a !== b && (i = interpolate(a, b), function(t) {
	          this.setAttribute(name, i(t));
	        });
	      });
	    }
	    function attrTweenNS(b) {
	      return b == null ? attrNullNS : (b += "", function() {
	        var a = this.getAttributeNS(name.space, name.local), i;
	        return a !== b && (i = interpolate(a, b), function(t) {
	          this.setAttributeNS(name.space, name.local, i(t));
	        });
	      });
	    }
	    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
	  };
	  d3_transitionPrototype.attrTween = function(nameNS, tween) {
	    var name = d3.ns.qualify(nameNS);
	    function attrTween(d, i) {
	      var f = tween.call(this, d, i, this.getAttribute(name));
	      return f && function(t) {
	        this.setAttribute(name, f(t));
	      };
	    }
	    function attrTweenNS(d, i) {
	      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
	      return f && function(t) {
	        this.setAttributeNS(name.space, name.local, f(t));
	      };
	    }
	    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
	  };
	  d3_transitionPrototype.style = function(name, value, priority) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof name !== "string") {
	        if (n < 2) value = "";
	        for (priority in name) this.style(priority, name[priority], value);
	        return this;
	      }
	      priority = "";
	    }
	    function styleNull() {
	      this.style.removeProperty(name);
	    }
	    function styleString(b) {
	      return b == null ? styleNull : (b += "", function() {
	        var a = d3_window.getComputedStyle(this, null).getPropertyValue(name), i;
	        return a !== b && (i = d3_interpolate(a, b), function(t) {
	          this.style.setProperty(name, i(t), priority);
	        });
	      });
	    }
	    return d3_transition_tween(this, "style." + name, value, styleString);
	  };
	  d3_transitionPrototype.styleTween = function(name, tween, priority) {
	    if (arguments.length < 3) priority = "";
	    function styleTween(d, i) {
	      var f = tween.call(this, d, i, d3_window.getComputedStyle(this, null).getPropertyValue(name));
	      return f && function(t) {
	        this.style.setProperty(name, f(t), priority);
	      };
	    }
	    return this.tween("style." + name, styleTween);
	  };
	  d3_transitionPrototype.text = function(value) {
	    return d3_transition_tween(this, "text", value, d3_transition_text);
	  };
	  function d3_transition_text(b) {
	    if (b == null) b = "";
	    return function() {
	      this.textContent = b;
	    };
	  }
	  d3_transitionPrototype.remove = function() {
	    return this.each("end.transition", function() {
	      var p;
	      if (this.__transition__.count < 2 && (p = this.parentNode)) p.removeChild(this);
	    });
	  };
	  d3_transitionPrototype.ease = function(value) {
	    var id = this.id;
	    if (arguments.length < 1) return this.node().__transition__[id].ease;
	    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
	    return d3_selection_each(this, function(node) {
	      node.__transition__[id].ease = value;
	    });
	  };
	  d3_transitionPrototype.delay = function(value) {
	    var id = this.id;
	    if (arguments.length < 1) return this.node().__transition__[id].delay;
	    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
	      node.__transition__[id].delay = +value.call(node, node.__data__, i, j);
	    } : (value = +value, function(node) {
	      node.__transition__[id].delay = value;
	    }));
	  };
	  d3_transitionPrototype.duration = function(value) {
	    var id = this.id;
	    if (arguments.length < 1) return this.node().__transition__[id].duration;
	    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
	      node.__transition__[id].duration = Math.max(1, value.call(node, node.__data__, i, j));
	    } : (value = Math.max(1, value), function(node) {
	      node.__transition__[id].duration = value;
	    }));
	  };
	  d3_transitionPrototype.each = function(type, listener) {
	    var id = this.id;
	    if (arguments.length < 2) {
	      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
	      d3_transitionInheritId = id;
	      d3_selection_each(this, function(node, i, j) {
	        d3_transitionInherit = node.__transition__[id];
	        type.call(node, node.__data__, i, j);
	      });
	      d3_transitionInherit = inherit;
	      d3_transitionInheritId = inheritId;
	    } else {
	      d3_selection_each(this, function(node) {
	        var transition = node.__transition__[id];
	        (transition.event || (transition.event = d3.dispatch("start", "end"))).on(type, listener);
	      });
	    }
	    return this;
	  };
	  d3_transitionPrototype.transition = function() {
	    var id0 = this.id, id1 = ++d3_transitionId, subgroups = [], subgroup, group, node, transition;
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        if (node = group[i]) {
	          transition = Object.create(node.__transition__[id0]);
	          transition.delay += transition.duration;
	          d3_transitionNode(node, i, id1, transition);
	        }
	        subgroup.push(node);
	      }
	    }
	    return d3_transition(subgroups, id1);
	  };
	  function d3_transitionNode(node, i, id, inherit) {
	    var lock = node.__transition__ || (node.__transition__ = {
	      active: 0,
	      count: 0
	    }), transition = lock[id];
	    if (!transition) {
	      var time = inherit.time;
	      transition = lock[id] = {
	        tween: new d3_Map(),
	        time: time,
	        ease: inherit.ease,
	        delay: inherit.delay,
	        duration: inherit.duration
	      };
	      ++lock.count;
	      d3.timer(function(elapsed) {
	        var d = node.__data__, ease = transition.ease, delay = transition.delay, duration = transition.duration, timer = d3_timer_active, tweened = [];
	        timer.t = delay + time;
	        if (delay <= elapsed) return start(elapsed - delay);
	        timer.c = start;
	        function start(elapsed) {
	          if (lock.active > id) return stop();
	          lock.active = id;
	          transition.event && transition.event.start.call(node, d, i);
	          transition.tween.forEach(function(key, value) {
	            if (value = value.call(node, d, i)) {
	              tweened.push(value);
	            }
	          });
	          d3.timer(function() {
	            timer.c = tick(elapsed || 1) ? d3_true : tick;
	            return 1;
	          }, 0, time);
	        }
	        function tick(elapsed) {
	          if (lock.active !== id) return stop();
	          var t = elapsed / duration, e = ease(t), n = tweened.length;
	          while (n > 0) {
	            tweened[--n].call(node, e);
	          }
	          if (t >= 1) {
	            transition.event && transition.event.end.call(node, d, i);
	            return stop();
	          }
	        }
	        function stop() {
	          if (--lock.count) delete lock[id]; else delete node.__transition__;
	          return 1;
	        }
	      }, 0, time);
	    }
	  }
	  d3.svg.axis = function() {
	    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
	    function axis(g) {
	      g.each(function() {
	        var g = d3.select(this);
	        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
	        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick.order()).style("opacity", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;
	        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"), 
	        d3.transition(path));
	        tickEnter.append("line");
	        tickEnter.append("text");
	        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text"), sign = orient === "top" || orient === "left" ? -1 : 1, x1, x2, y1, y2;
	        if (orient === "bottom" || orient === "top") {
	          tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";
	          text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");
	          pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);
	        } else {
	          tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";
	          text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");
	          pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);
	        }
	        lineEnter.attr(y2, sign * innerTickSize);
	        textEnter.attr(y1, sign * tickSpacing);
	        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
	        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);
	        if (scale1.rangeBand) {
	          var x = scale1, dx = x.rangeBand() / 2;
	          scale0 = scale1 = function(d) {
	            return x(d) + dx;
	          };
	        } else if (scale0.rangeBand) {
	          scale0 = scale1;
	        } else {
	          tickExit.call(tickTransform, scale1, scale0);
	        }
	        tickEnter.call(tickTransform, scale0, scale1);
	        tickUpdate.call(tickTransform, scale1, scale1);
	      });
	    }
	    axis.scale = function(x) {
	      if (!arguments.length) return scale;
	      scale = x;
	      return axis;
	    };
	    axis.orient = function(x) {
	      if (!arguments.length) return orient;
	      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
	      return axis;
	    };
	    axis.ticks = function() {
	      if (!arguments.length) return tickArguments_;
	      tickArguments_ = arguments;
	      return axis;
	    };
	    axis.tickValues = function(x) {
	      if (!arguments.length) return tickValues;
	      tickValues = x;
	      return axis;
	    };
	    axis.tickFormat = function(x) {
	      if (!arguments.length) return tickFormat_;
	      tickFormat_ = x;
	      return axis;
	    };
	    axis.tickSize = function(x) {
	      var n = arguments.length;
	      if (!n) return innerTickSize;
	      innerTickSize = +x;
	      outerTickSize = +arguments[n - 1];
	      return axis;
	    };
	    axis.innerTickSize = function(x) {
	      if (!arguments.length) return innerTickSize;
	      innerTickSize = +x;
	      return axis;
	    };
	    axis.outerTickSize = function(x) {
	      if (!arguments.length) return outerTickSize;
	      outerTickSize = +x;
	      return axis;
	    };
	    axis.tickPadding = function(x) {
	      if (!arguments.length) return tickPadding;
	      tickPadding = +x;
	      return axis;
	    };
	    axis.tickSubdivide = function() {
	      return arguments.length && axis;
	    };
	    return axis;
	  };
	  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
	    top: 1,
	    right: 1,
	    bottom: 1,
	    left: 1
	  };
	  function d3_svg_axisX(selection, x0, x1) {
	    selection.attr("transform", function(d) {
	      var v0 = x0(d);
	      return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
	    });
	  }
	  function d3_svg_axisY(selection, y0, y1) {
	    selection.attr("transform", function(d) {
	      var v0 = y0(d);
	      return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
	    });
	  }
	  d3.svg.brush = function() {
	    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
	    function brush(g) {
	      g.each(function() {
	        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
	        var background = g.selectAll(".background").data([ 0 ]);
	        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
	        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
	        var resize = g.selectAll(".resize").data(resizes, d3_identity);
	        resize.exit().remove();
	        resize.enter().append("g").attr("class", function(d) {
	          return "resize " + d;
	        }).style("cursor", function(d) {
	          return d3_svg_brushCursor[d];
	        }).append("rect").attr("x", function(d) {
	          return /[ew]$/.test(d) ? -3 : null;
	        }).attr("y", function(d) {
	          return /^[ns]/.test(d) ? -3 : null;
	        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
	        resize.style("display", brush.empty() ? "none" : null);
	        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
	        if (x) {
	          range = d3_scaleRange(x);
	          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
	          redrawX(gUpdate);
	        }
	        if (y) {
	          range = d3_scaleRange(y);
	          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
	          redrawY(gUpdate);
	        }
	        redraw(gUpdate);
	      });
	    }
	    brush.event = function(g) {
	      g.each(function() {
	        var event_ = event.of(this, arguments), extent1 = {
	          x: xExtent,
	          y: yExtent,
	          i: xExtentDomain,
	          j: yExtentDomain
	        }, extent0 = this.__chart__ || extent1;
	        this.__chart__ = extent1;
	        if (d3_transitionInheritId) {
	          d3.select(this).transition().each("start.brush", function() {
	            xExtentDomain = extent0.i;
	            yExtentDomain = extent0.j;
	            xExtent = extent0.x;
	            yExtent = extent0.y;
	            event_({
	              type: "brushstart"
	            });
	          }).tween("brush:brush", function() {
	            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
	            xExtentDomain = yExtentDomain = null;
	            return function(t) {
	              xExtent = extent1.x = xi(t);
	              yExtent = extent1.y = yi(t);
	              event_({
	                type: "brush",
	                mode: "resize"
	              });
	            };
	          }).each("end.brush", function() {
	            xExtentDomain = extent1.i;
	            yExtentDomain = extent1.j;
	            event_({
	              type: "brush",
	              mode: "resize"
	            });
	            event_({
	              type: "brushend"
	            });
	          });
	        } else {
	          event_({
	            type: "brushstart"
	          });
	          event_({
	            type: "brush",
	            mode: "resize"
	          });
	          event_({
	            type: "brushend"
	          });
	        }
	      });
	    };
	    function redraw(g) {
	      g.selectAll(".resize").attr("transform", function(d) {
	        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
	      });
	    }
	    function redrawX(g) {
	      g.select(".extent").attr("x", xExtent[0]);
	      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
	    }
	    function redrawY(g) {
	      g.select(".extent").attr("y", yExtent[0]);
	      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
	    }
	    function brushstart() {
	      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(), center, origin = d3.mouse(target), offset;
	      var w = d3.select(d3_window).on("keydown.brush", keydown).on("keyup.brush", keyup);
	      if (d3.event.changedTouches) {
	        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
	      } else {
	        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
	      }
	      g.interrupt().selectAll("*").interrupt();
	      if (dragging) {
	        origin[0] = xExtent[0] - origin[0];
	        origin[1] = yExtent[0] - origin[1];
	      } else if (resizing) {
	        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
	        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
	        origin[0] = xExtent[ex];
	        origin[1] = yExtent[ey];
	      } else if (d3.event.altKey) center = origin.slice();
	      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
	      d3.select("body").style("cursor", eventTarget.style("cursor"));
	      event_({
	        type: "brushstart"
	      });
	      brushmove();
	      function keydown() {
	        if (d3.event.keyCode == 32) {
	          if (!dragging) {
	            center = null;
	            origin[0] -= xExtent[1];
	            origin[1] -= yExtent[1];
	            dragging = 2;
	          }
	          d3_eventPreventDefault();
	        }
	      }
	      function keyup() {
	        if (d3.event.keyCode == 32 && dragging == 2) {
	          origin[0] += xExtent[1];
	          origin[1] += yExtent[1];
	          dragging = 0;
	          d3_eventPreventDefault();
	        }
	      }
	      function brushmove() {
	        var point = d3.mouse(target), moved = false;
	        if (offset) {
	          point[0] += offset[0];
	          point[1] += offset[1];
	        }
	        if (!dragging) {
	          if (d3.event.altKey) {
	            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
	            origin[0] = xExtent[+(point[0] < center[0])];
	            origin[1] = yExtent[+(point[1] < center[1])];
	          } else center = null;
	        }
	        if (resizingX && move1(point, x, 0)) {
	          redrawX(g);
	          moved = true;
	        }
	        if (resizingY && move1(point, y, 1)) {
	          redrawY(g);
	          moved = true;
	        }
	        if (moved) {
	          redraw(g);
	          event_({
	            type: "brush",
	            mode: dragging ? "move" : "resize"
	          });
	        }
	      }
	      function move1(point, scale, i) {
	        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
	        if (dragging) {
	          r0 -= position;
	          r1 -= size + position;
	        }
	        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
	        if (dragging) {
	          max = (min += position) + size;
	        } else {
	          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
	          if (position < min) {
	            max = min;
	            min = position;
	          } else {
	            max = position;
	          }
	        }
	        if (extent[0] != min || extent[1] != max) {
	          if (i) yExtentDomain = null; else xExtentDomain = null;
	          extent[0] = min;
	          extent[1] = max;
	          return true;
	        }
	      }
	      function brushend() {
	        brushmove();
	        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
	        d3.select("body").style("cursor", null);
	        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
	        dragRestore();
	        event_({
	          type: "brushend"
	        });
	      }
	    }
	    brush.x = function(z) {
	      if (!arguments.length) return x;
	      x = z;
	      resizes = d3_svg_brushResizes[!x << 1 | !y];
	      return brush;
	    };
	    brush.y = function(z) {
	      if (!arguments.length) return y;
	      y = z;
	      resizes = d3_svg_brushResizes[!x << 1 | !y];
	      return brush;
	    };
	    brush.clamp = function(z) {
	      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
	      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
	      return brush;
	    };
	    brush.extent = function(z) {
	      var x0, x1, y0, y1, t;
	      if (!arguments.length) {
	        if (x) {
	          if (xExtentDomain) {
	            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
	          } else {
	            x0 = xExtent[0], x1 = xExtent[1];
	            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
	            if (x1 < x0) t = x0, x0 = x1, x1 = t;
	          }
	        }
	        if (y) {
	          if (yExtentDomain) {
	            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
	          } else {
	            y0 = yExtent[0], y1 = yExtent[1];
	            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
	            if (y1 < y0) t = y0, y0 = y1, y1 = t;
	          }
	        }
	        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
	      }
	      if (x) {
	        x0 = z[0], x1 = z[1];
	        if (y) x0 = x0[0], x1 = x1[0];
	        xExtentDomain = [ x0, x1 ];
	        if (x.invert) x0 = x(x0), x1 = x(x1);
	        if (x1 < x0) t = x0, x0 = x1, x1 = t;
	        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
	      }
	      if (y) {
	        y0 = z[0], y1 = z[1];
	        if (x) y0 = y0[1], y1 = y1[1];
	        yExtentDomain = [ y0, y1 ];
	        if (y.invert) y0 = y(y0), y1 = y(y1);
	        if (y1 < y0) t = y0, y0 = y1, y1 = t;
	        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
	      }
	      return brush;
	    };
	    brush.clear = function() {
	      if (!brush.empty()) {
	        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
	        xExtentDomain = yExtentDomain = null;
	      }
	      return brush;
	    };
	    brush.empty = function() {
	      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
	    };
	    return d3.rebind(brush, event, "on");
	  };
	  var d3_svg_brushCursor = {
	    n: "ns-resize",
	    e: "ew-resize",
	    s: "ns-resize",
	    w: "ew-resize",
	    nw: "nwse-resize",
	    ne: "nesw-resize",
	    se: "nwse-resize",
	    sw: "nesw-resize"
	  };
	  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
	  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
	  var d3_time_formatUtc = d3_time_format.utc;
	  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
	  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
	  function d3_time_formatIsoNative(date) {
	    return date.toISOString();
	  }
	  d3_time_formatIsoNative.parse = function(string) {
	    var date = new Date(string);
	    return isNaN(date) ? null : date;
	  };
	  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
	  d3_time.second = d3_time_interval(function(date) {
	    return new d3_date(Math.floor(date / 1e3) * 1e3);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
	  }, function(date) {
	    return date.getSeconds();
	  });
	  d3_time.seconds = d3_time.second.range;
	  d3_time.seconds.utc = d3_time.second.utc.range;
	  d3_time.minute = d3_time_interval(function(date) {
	    return new d3_date(Math.floor(date / 6e4) * 6e4);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
	  }, function(date) {
	    return date.getMinutes();
	  });
	  d3_time.minutes = d3_time.minute.range;
	  d3_time.minutes.utc = d3_time.minute.utc.range;
	  d3_time.hour = d3_time_interval(function(date) {
	    var timezone = date.getTimezoneOffset() / 60;
	    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
	  }, function(date) {
	    return date.getHours();
	  });
	  d3_time.hours = d3_time.hour.range;
	  d3_time.hours.utc = d3_time.hour.utc.range;
	  d3_time.month = d3_time_interval(function(date) {
	    date = d3_time.day(date);
	    date.setDate(1);
	    return date;
	  }, function(date, offset) {
	    date.setMonth(date.getMonth() + offset);
	  }, function(date) {
	    return date.getMonth();
	  });
	  d3_time.months = d3_time.month.range;
	  d3_time.months.utc = d3_time.month.utc.range;
	  function d3_time_scale(linear, methods, format) {
	    function scale(x) {
	      return linear(x);
	    }
	    scale.invert = function(x) {
	      return d3_time_scaleDate(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
	      linear.domain(x);
	      return scale;
	    };
	    function tickMethod(extent, count) {
	      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
	      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
	        return d / 31536e6;
	      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
	    }
	    scale.nice = function(interval, skip) {
	      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
	      if (method) interval = method[0], skip = method[1];
	      function skipped(date) {
	        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
	      }
	      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
	        floor: function(date) {
	          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
	          return date;
	        },
	        ceil: function(date) {
	          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
	          return date;
	        }
	      } : interval));
	    };
	    scale.ticks = function(interval, skip) {
	      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
	        range: interval
	      }, skip ];
	      if (method) interval = method[0], skip = method[1];
	      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
	    };
	    scale.tickFormat = function() {
	      return format;
	    };
	    scale.copy = function() {
	      return d3_time_scale(linear.copy(), methods, format);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  function d3_time_scaleDate(t) {
	    return new Date(t);
	  }
	  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
	  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
	  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ ".%L", function(d) {
	    return d.getMilliseconds();
	  } ], [ ":%S", function(d) {
	    return d.getSeconds();
	  } ], [ "%I:%M", function(d) {
	    return d.getMinutes();
	  } ], [ "%I %p", function(d) {
	    return d.getHours();
	  } ], [ "%a %d", function(d) {
	    return d.getDay() && d.getDate() != 1;
	  } ], [ "%b %d", function(d) {
	    return d.getDate() != 1;
	  } ], [ "%B", function(d) {
	    return d.getMonth();
	  } ], [ "%Y", d3_true ] ]);
	  var d3_time_scaleMilliseconds = {
	    range: function(start, stop, step) {
	      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
	    },
	    floor: d3_identity,
	    ceil: d3_identity
	  };
	  d3_time_scaleLocalMethods.year = d3_time.year;
	  d3_time.scale = function() {
	    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
	  };
	  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
	    return [ m[0].utc, m[1] ];
	  });
	  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ ".%L", function(d) {
	    return d.getUTCMilliseconds();
	  } ], [ ":%S", function(d) {
	    return d.getUTCSeconds();
	  } ], [ "%I:%M", function(d) {
	    return d.getUTCMinutes();
	  } ], [ "%I %p", function(d) {
	    return d.getUTCHours();
	  } ], [ "%a %d", function(d) {
	    return d.getUTCDay() && d.getUTCDate() != 1;
	  } ], [ "%b %d", function(d) {
	    return d.getUTCDate() != 1;
	  } ], [ "%B", function(d) {
	    return d.getUTCMonth();
	  } ], [ "%Y", d3_true ] ]);
	  d3_time_scaleUtcMethods.year = d3_time.year.utc;
	  d3_time.scale.utc = function() {
	    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
	  };
	  d3.text = d3_xhrType(function(request) {
	    return request.responseText;
	  });
	  d3.json = function(url, callback) {
	    return d3_xhr(url, "application/json", d3_json, callback);
	  };
	  function d3_json(request) {
	    return JSON.parse(request.responseText);
	  }
	  d3.html = function(url, callback) {
	    return d3_xhr(url, "text/html", d3_html, callback);
	  };
	  function d3_html(request) {
	    var range = d3_document.createRange();
	    range.selectNode(d3_document.body);
	    return range.createContextualFragment(request.responseText);
	  }
	  d3.xml = d3_xhrType(function(request) {
	    return request.responseXML;
	  });
	  if (true) !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else if (typeof module === "object" && module.exports) module.exports = d3;
	  this.d3 = d3;
	}();

/***/ },
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! 
	 *  dc 2.0.0-alpha.2 
	 *  http://dc-js.github.io/dc.js/
	 *  Copyright 2012 Nick Zhu and other contributors
	 *
	 *  Licensed under the Apache License, Version 2.0 (the "License");
	 *  you may not use this file except in compliance with the License.
	 *  You may obtain a copy of the License at
	 *
	 *      http://www.apache.org/licenses/LICENSE-2.0
	 *
	 *  Unless required by applicable law or agreed to in writing, software
	 *  distributed under the License is distributed on an "AS IS" BASIS,
	 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 *  See the License for the specific language governing permissions and
	 *  limitations under the License.
	 */

	(function() { function _dc(d3) {
	'use strict';

	/**
	#### Version 2.0.0-alpha.2

	The entire dc.js library is scoped under the **dc** name space. It does not introduce anything else
	into the global name space.

	#### Function Chaining
	Most dc functions are designed to allow function chaining, meaning they return the current chart
	instance whenever it is appropriate. This way chart configuration can be written in the following
	style:
	```js
	chart.width(300)
	    .height(300)
	    .filter("sunday")
	```
	The getter forms of functions do not participate in function chaining because they necessarily
	return values that are not the chart.  (Although some, such as `.svg` and `.xAxis`, return values
	that are chainable d3 objects.)

	**/
	var dc = {
	    version: "2.0.0-alpha.2",
	    constants: {
	        CHART_CLASS: "dc-chart",
	        DEBUG_GROUP_CLASS: "debug",
	        STACK_CLASS: "stack",
	        DESELECTED_CLASS: "deselected",
	        SELECTED_CLASS: "selected",
	        NODE_INDEX_NAME: "__index__",
	        GROUP_INDEX_NAME: "__group_index__",
	        DEFAULT_CHART_GROUP: "__default_chart_group__",
	        EVENT_DELAY: 40,
	        NEGLIGIBLE_NUMBER: 1e-10
	    },
	    _renderlet: null
	};

	dc.chartRegistry = function() {
	    // chartGroup:string => charts:array
	    var _chartMap = {};

	    function initializeChartGroup(group) {
	        if (!group)
	            group = dc.constants.DEFAULT_CHART_GROUP;

	        if (!_chartMap[group])
	            _chartMap[group] = [];

	        return group;
	    }

	    return {
	        has: function(chart) {
	            for (var e in _chartMap) {
	                if (_chartMap[e].indexOf(chart) >= 0)
	                    return true;
	            }
	            return false;
	        },

	        register: function(chart, group) {
	            group = initializeChartGroup(group);
	            _chartMap[group].push(chart);
	        },

	        deregister: function (chart, group) {
	            group = initializeChartGroup(group);
	            for (var i = 0; i < _chartMap[group].length; i++) {
	                if (_chartMap[group][i].anchorName() === chart.anchorName()) {
	                    _chartMap[group].splice(i, 1);
	                    break;
	                }
	            }
	        },

	        clear: function(group) {
	            if (group) {
	                delete _chartMap[group];
	            } else {
	                _chartMap = {};
	            }
	        },

	        list: function(group) {
	            group = initializeChartGroup(group);
	            return _chartMap[group];
	        }
	    };
	}();

	dc.registerChart = function(chart, group) {
	    dc.chartRegistry.register(chart, group);
	};

	dc.deregisterChart = function (chart, group) {
	    dc.chartRegistry.deregister(chart, group);
	};

	dc.hasChart = function(chart) {
	    return dc.chartRegistry.has(chart);
	};

	dc.deregisterAllCharts = function(group) {
	    dc.chartRegistry.clear(group);
	};

	/**
	## Utilities
	**/

	/**
	#### dc.filterAll([chartGroup])
	Clear all filters on all charts within the given chart group. If the chart group is not given then
	only charts that belong to the default chart group will be reset.
	**/
	dc.filterAll = function(group) {
	    var charts = dc.chartRegistry.list(group);
	    for (var i = 0; i < charts.length; ++i) {
	        charts[i].filterAll();
	    }
	};

	/**
	#### dc.refocusAll([chartGroup])
	Reset zoom level / focus on all charts that belong to the given chart group. If the chart group is
	not given then only charts that belong to the default chart group will be reset.
	**/
	dc.refocusAll = function(group) {
	    var charts = dc.chartRegistry.list(group);
	    for (var i = 0; i < charts.length; ++i) {
	        if (charts[i].focus) charts[i].focus();
	    }
	};

	/**
	#### dc.renderAll([chartGroup])
	Re-render all charts belong to the given chart group. If the chart group is not given then only
	charts that belong to the default chart group will be re-rendered.
	**/
	dc.renderAll = function(group) {
	    var charts = dc.chartRegistry.list(group);
	    for (var i = 0; i < charts.length; ++i) {
	        charts[i].render();
	    }

	    if(dc._renderlet !== null)
	        dc._renderlet(group);
	};

	/**
	#### dc.redrawAll([chartGroup])
	Redraw all charts belong to the given chart group. If the chart group is not given then only charts
	that belong to the default chart group will be re-drawn. Redraw is different from re-render since
	when redrawing dc tries to update the graphic incrementally, using transitions, instead of starting
	from scratch.
	**/
	dc.redrawAll = function(group) {
	    var charts = dc.chartRegistry.list(group);
	    for (var i = 0; i < charts.length; ++i) {
	        charts[i].redraw();
	    }

	    if(dc._renderlet !== null)
	        dc._renderlet(group);
	};

	/**
	#### dc.disableTransitions
	If this boolean is set truthy, all transitions will be disabled, and changes to the charts will happen
	immediately.  Default: false
	**/
	dc.disableTransitions = false;

	dc.transition = function(selections, duration, callback) {
	    if (duration <= 0 || duration === undefined || dc.disableTransitions)
	        return selections;

	    var s = selections
	        .transition()
	        .duration(duration);

	    if (typeof(callback) === 'function') {
	        callback(s);
	    }

	    return s;
	};

	dc.units = {};

	/**
	#### dc.units.integers
	`dc.units.integers` is the default value for `xUnits` for the [Coordinate Grid
	Chart](#coordinate-grid-chart) and should be used when the x values are a sequence of integers.

	It is a function that counts the number of integers in the range supplied in its start and end parameters.

	```js
	chart.xUnits(dc.units.integers) // already the default
	```

	**/
	dc.units.integers = function(s, e) {
	    return Math.abs(e - s);
	};

	/**
	#### dc.units.ordinal
	This argument can be passed to the `xUnits` function of the to specify ordinal units for the x
	axis. Usually this parameter is used in combination with passing `d3.scale.ordinal()` to `.x`.

	It just returns the domain passed to it, which for ordinal charts is an array of all values.

	```js
	chart.xUnits(dc.units.ordinal)
	    .x(d3.scale.ordinal())
	```

	**/
	dc.units.ordinal = function(s, e, domain){
	    return domain;
	};

	/**
	#### dc.units.fp.precision(precision)
	This function generates an argument for the [Coordinate Grid Chart's](#coordinate-grid-chart)
	`xUnits` function specifying that the x values are floating-point numbers with the given
	precision.

	The returned function determines how many values at the given precision will fit into the range
	supplied in its start and end parameters.

	```js
	// specify values (and ticks) every 0.1 units
	chart.xUnits(dc.units.fp.precision(0.1)
	// there are 500 units between 0.5 and 1 if the precision is 0.001
	var thousandths = dc.units.fp.precision(0.001);
	thousandths(0.5, 1.0) // returns 500
	```
	**/
	dc.units.fp = {};
	dc.units.fp.precision = function(precision){
	    var _f = function(s, e){
	        var d = Math.abs((e-s)/_f.resolution);
	        if(dc.utils.isNegligible(d - Math.floor(d)))
	            return Math.floor(d);
	        else
	            return Math.ceil(d);
	    };
	    _f.resolution = precision;
	    return _f;
	};

	dc.round = {};
	dc.round.floor = function(n) {
	    return Math.floor(n);
	};
	dc.round.ceil = function(n) {
	    return Math.ceil(n);
	};
	dc.round.round = function(n) {
	    return Math.round(n);
	};

	dc.override = function(obj, functionName, newFunction) {
	    var existingFunction = obj[functionName];
	    obj["_" + functionName] = existingFunction;
	    obj[functionName] = newFunction;
	};

	dc.renderlet = function(_){
	    if(!arguments.length) return dc._renderlet;
	    dc._renderlet = _;
	    return dc;
	};

	dc.instanceOfChart = function (o) {
	    return o instanceof Object && o.__dc_flag__ && true;
	};

	dc.errors = {};

	dc.errors.Exception = function(msg) {
	    var _msg = msg || "Unexpected internal error";

	    this.message = _msg;

	    this.toString = function(){
	        return _msg;
	    };
	};

	dc.errors.InvalidStateException = function() {
	    dc.errors.Exception.apply(this, arguments);
	};

	dc.dateFormat = d3.time.format("%m/%d/%Y");

	dc.printers = {};

	dc.printers.filters = function (filters) {
	    var s = "";

	    for (var i = 0; i < filters.length; ++i) {
	        if (i > 0) s += ", ";
	        s += dc.printers.filter(filters[i]);
	    }

	    return s;
	};

	dc.printers.filter = function (filter) {
	    var s = "";

	    if (filter) {
	        if (filter instanceof Array) {
	            if (filter.length >= 2)
	                s = "[" + dc.utils.printSingleValue(filter[0]) + " -> " + dc.utils.printSingleValue(filter[1]) + "]";
	            else if (filter.length >= 1)
	                s = dc.utils.printSingleValue(filter[0]);
	        } else {
	            s = dc.utils.printSingleValue(filter);
	        }
	    }

	    return s;
	};

	dc.pluck = function(n,f) {
	    if (!f) return function(d) { return d[n]; };
	    return function(d,i) { return f.call(d,d[n],i); };
	};

	dc.utils = {};

	dc.utils.printSingleValue = function (filter) {
	    var s = "" + filter;

	    if (filter instanceof Date)
	        s = dc.dateFormat(filter);
	    else if (typeof(filter) == "string")
	        s = filter;
	    else if (dc.utils.isFloat(filter))
	        s = dc.utils.printSingleValue.fformat(filter);
	    else if (dc.utils.isInteger(filter))
	        s = Math.round(filter);

	    return s;
	};
	dc.utils.printSingleValue.fformat = d3.format(".2f");

	// FIXME: these assume than any string r is a percentage (whether or not it
	// includes %). They also generate strange results if l is a string.
	dc.utils.add = function (l, r) {
	    if (typeof r === "string")
	        r = r.replace("%", "");

	    if (l instanceof Date) {
	        if (typeof r === "string") r = +r;
	        var d = new Date();
	        d.setTime(l.getTime());
	        d.setDate(l.getDate() + r);
	        return d;
	    } else if (typeof r === "string") {
	        var percentage = (+r / 100);
	        return l > 0 ? l * (1 + percentage) : l * (1 - percentage);
	    } else {
	        return l + r;
	    }
	};

	dc.utils.subtract = function (l, r) {
	    if (typeof r === "string")
	        r = r.replace("%", "");

	    if (l instanceof Date) {
	        if (typeof r === "string") r = +r;
	        var d = new Date();
	        d.setTime(l.getTime());
	        d.setDate(l.getDate() - r);
	        return d;
	    } else if (typeof r === "string") {
	        var percentage = (+r / 100);
	        return l < 0 ? l * (1 + percentage) : l * (1 - percentage);
	    } else {
	        return l - r;
	    }
	};

	dc.utils.isNumber = function(n) {
	    return n===+n;
	};

	dc.utils.isFloat = function (n) {
	    return n===+n && n!==(n|0);
	};

	dc.utils.isInteger = function (n) {
	    return n===+n && n===(n|0);
	};

	dc.utils.isNegligible = function (n) {
	    return !dc.utils.isNumber(n) || (n < dc.constants.NEGLIGIBLE_NUMBER && n > -dc.constants.NEGLIGIBLE_NUMBER);
	};

	dc.utils.clamp = function (val, min, max) {
	    return val < min ? min : (val > max ? max : val);
	};

	var _idCounter = 0;
	dc.utils.uniqueId = function () {
	    return ++_idCounter;
	};

	dc.utils.nameToId = function (name) {
	    return name.toLowerCase().replace(/[\s]/g, "_").replace(/[\.']/g, "");
	};

	dc.utils.appendOrSelect = function (parent, name) {
	    var element = parent.select(name);
	    if (element.empty()) element = parent.append(name);
	    return element;
	};

	dc.utils.safeNumber = function(n){return dc.utils.isNumber(+n)?+n:0;};

	dc.logger = {};

	dc.logger.enableDebugLog = false;

	dc.logger.warn = function (msg) {
	    if (console) {
	        if (console.warn) {
	            console.warn(msg);
	        } else if (console.log) {
	            console.log(msg);
	        }
	    }

	    return dc.logger;
	};

	dc.logger.debug = function (msg) {
	    if (dc.logger.enableDebugLog && console) {
	        if (console.debug) {
	            console.debug(msg);
	        } else if (console.log) {
	            console.log(msg);
	        }
	    }

	    return dc.logger;
	};

	dc.events = {
	    current: null
	};

	/**
	#### dc.events.trigger(function[, delay])
	This function triggers a throttled event function with a specified delay (in milli-seconds).  Events
	that are triggered repetitively due to user interaction such brush dragging might flood the library
	and invoke more renders than can be executed in time. Using this function to wrap your event
	function allows the library to smooth out the rendering by throttling events and only responding to
	the most recent event.

	```js
	    chart.renderlet(function(chart){
	        // smooth the rendering through event throttling
	        dc.events.trigger(function(){
	            // focus some other chart to the range selected by user on this chart
	            someOtherChart.focus(chart.filter());
	        });
	    })
	```
	**/
	dc.events.trigger = function(closure, delay) {
	    if (!delay){
	        closure();
	        return;
	    }

	    dc.events.current = closure;

	    setTimeout(function() {
	        if (closure == dc.events.current)
	            closure();
	    }, delay);
	};

	dc.filters = {};

	/**
	## Filters

	The dc.js filters are functions which are passed into crossfilter to chose which records will be
	accumulated to produce values for the charts.  In the crossfilter model, any filters applied on one
	dimension will affect all the other dimensions but not that one.  dc always applies a filter
	function to the dimension; the function combines multiple filters and if any of them accept a
	record, it is filtered in.

	These filter constructors are used as appropriate by the various charts to implement brushing.  We
	mention below which chart uses which filter.  In some cases, many instances of a filter will be added.

	**/

	/**
	#### dc.filters.RangedFilter(low, high)
	 RangedFilter is a filter which accepts keys between `low` and `high`.  It is used to implement X
	 axis brushing for the [coordinate grid charts](#coordinate-grid-mixin).
	**/
	dc.filters.RangedFilter = function(low, high) {
	    var range = Array(low, high);
	    range.isFiltered = function(value) {
	        return value >= this[0] && value < this[1];
	    };

	    return range;
	};

	/**
	#### dc.filters.TwoDimensionalFilter(array)
	 TwoDimensionalFilter is a filter which accepts a single two-dimensional value.  It is used by the
	 [heat map chart](#heat-map) to include particular cells as they are clicked.  (Rows and columns are
	 filtered by filtering all the cells in the row or column.)
	**/
	dc.filters.TwoDimensionalFilter = function(array) {
	    if (array === null) { return null; }

	    var filter = array;
	    filter.isFiltered = function(value) {
	        return value.length && value.length == filter.length &&
	               value[0] == filter[0] && value[1] == filter[1];
	    };

	    return filter;
	};

	/**
	#### dc.filters.RangedTwoDimensionalFilter(array)
	 The RangedTwoDimensionalFilter allows filtering all values which fit within a rectangular
	 region. It is used by the [scatter plot](#scatter-plot) to implement rectangular brushing.

	 It takes two two-dimensional points in the form `[[x1,y1],[x2,y2]]`, and normalizes them so that
	 `x1 <= x2` and `y1 <- y2`. It then returns a filter which accepts any points which are in the
	 rectangular range including the lower values but excluding the higher values.

	 If an array of two values are given to the RangedTwoDimensionalFilter, it interprets the values as
	 two x coordinates `x1` and `x2` and returns a filter which accepts any points for which `x1 <= x <
	 x2`.
	 **/
	dc.filters.RangedTwoDimensionalFilter = function(array){
	    if (array === null) { return null; }

	    var filter = array;
	    var fromBottomLeft;

	    if (filter[0] instanceof Array) {
	        fromBottomLeft = [[Math.min(array[0][0], array[1][0]),
	                           Math.min(array[0][1], array[1][1])],
	                          [Math.max(array[0][0], array[1][0]),
	                           Math.max(array[0][1], array[1][1])]];
	    } else {
	        fromBottomLeft = [[array[0], -Infinity],
	                          [array[1], Infinity]];
	    }

	    filter.isFiltered = function(value) {
	        var x, y;

	        if (value instanceof Array) {
	            if (value.length != 2) return false;
	            x = value[0];
	            y = value[1];
	        } else {
	            x = value;
	            y = fromBottomLeft[0][1];
	        }

	        return x >= fromBottomLeft[0][0] && x < fromBottomLeft[1][0] &&
	               y >= fromBottomLeft[0][1] && y < fromBottomLeft[1][1];
	    };

	    return filter;
	};

	/**
	## Base Mixin
	Base Mixin is an abstract functional object representing a basic dc chart object
	for all chart and widget implementations. Methods from the Base Mixin are inherited
	and available on all chart implementation in the DC library.
	**/
	dc.baseMixin = function (_chart) {
	    _chart.__dc_flag__ = dc.utils.uniqueId();

	    var _dimension;
	    var _group;

	    var _anchor;
	    var _root;
	    var _svg;

	    var _minWidth = 200;
	    var _default_width = function (element) {
	        var width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;
	        return (width && width > _minWidth) ? width : _minWidth;
	    };
	    var _width = _default_width;

	    var _minHeight = 200;
	    var _default_height = function (element) {
	        var height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;
	        return (height && height > _minHeight) ? height : _minHeight;
	    };
	    var _height = _default_height;

	    var _keyAccessor = dc.pluck('key');
	    var _valueAccessor = dc.pluck('value');
	    var _label = dc.pluck('key');

	    var _ordering = dc.pluck('key');
	    var _orderSort;

	    var _renderLabel = false;

	    var _title = function (d) {
	        return _chart.keyAccessor()(d) + ": " + _chart.valueAccessor()(d);
	    };
	    var _renderTitle = false;

	    var _transitionDuration = 750;

	    var _filterPrinter = dc.printers.filters;

	    var _renderlets = [];
	    var _mandatoryAttributes = ['dimension', 'group'];

	    var _chartGroup = dc.constants.DEFAULT_CHART_GROUP;

	    var NULL_LISTENER = function () {};

	    var _listeners = d3.dispatch(
	        "preRender",
	        "postRender",
	        "preRedraw",
	        "postRedraw",
	        "filtered",
	        "zoomed");

	    var _legend;

	    var _filters = [];
	    var _filterHandler = function (dimension, filters) {
	        dimension.filter(null);

	        if (filters.length === 0)
	            dimension.filter(null);
	        else
	            dimension.filterFunction(function (d) {
	                for(var i = 0; i < filters.length; i++) {
	                    var filter = filters[i];
	                    if (filter.isFiltered && filter.isFiltered(d)) {
	                        return true;
	                    } else if (filter <= d && filter >= d) {
	                        return true;
	                    }
	                }
	                return false;
	            });

	        return filters;
	    };

	    var _data = function (group) {
	        return group.all();
	    };

	    /**
	    #### .width([value])
	    Set or get the width attribute of a chart. See `.height` below for further description of the
	    behavior.

	    **/
	    _chart.width = function (w) {
	        if (!arguments.length) return _width(_root.node());
	        _width = d3.functor(w || _default_width);
	        return _chart;
	    };

	    /**
	    #### .height([value])
	    Set or get the height attribute of a chart. The height is applied to the SVG element generated by
	    the chart when rendered (or rerendered). If a value is given, then it will be used to calculate
	    the new height and the chart returned for method chaining.  The value can either be a numeric, a
	    function, or falsy. If no value is specified then the value of the current height attribute will
	    be returned.

	    By default, without an explicit height being given, the chart will select the width of its
	    anchor element. If that isn't possible it defaults to 200. Setting the value falsy will return
	    the chart to the default behavior

	    Examples:

	    ```js
	    chart.height(250); // Set the chart's height to 250px;
	    chart.height(function(anchor) { return doSomethingWith(anchor); }); // set the chart's height with a function
	    chart.height(null); // reset the height to the default auto calculation
	    ```

	    **/
	    _chart.height = function (h) {
	        if (!arguments.length) return _height(_root.node());
	        _height = d3.functor(h || _default_height);
	        return _chart;
	    };

	    /**
	    #### .minWidth([value])
	    Set or get the minimum width attribute of a chart. This only applicable if the width is
	    calculated by dc.

	    **/
	    _chart.minWidth = function (w) {
	        if (!arguments.length) return _minWidth;
	        _minWidth = w;
	        return _chart;
	    };

	    /**
	    #### .minHeight([value])
	    Set or get the minimum height attribute of a chart. This only applicable if the height is
	    calculated by dc.

	    **/
	    _chart.minHeight = function (w) {
	        if (!arguments.length) return _minHeight;
	        _minHeight = w;
	        return _chart;
	    };

	    /**
	    #### .dimension([value]) - **mandatory**
	    Set or get the dimension attribute of a chart. In dc a dimension can be any valid [crossfilter
	    dimension](https://github.com/square/crossfilter/wiki/API-Reference#wiki-dimension).

	    If a value is given, then it will be used as the new dimension. If no value is specified then
	    the current dimension will be returned.

	    **/
	    _chart.dimension = function (d) {
	        if (!arguments.length) return _dimension;
	        _dimension = d;
	        _chart.expireCache();
	        return _chart;
	    };

	    /**
	    #### .data([callback])
	    Set the data callback or retrieve the chart's data set. The data callback is passed the chart's
	    group and by default will return `group.all()`. This behavior may be modified to, for instance,
	    return only the top 5 groups:
	    ```
	        chart.data(function(group) {
	            return group.top(5);
	        });
	    ```
	    **/
	    _chart.data = function(d) {
	        if (!arguments.length) return _data.call(_chart,_group);
	        _data = d3.functor(d);
	        _chart.expireCache();
	        return _chart;
	    };

	    /**
	    #### .group([value, [name]]) - **mandatory**
	    Set or get the group attribute of a chart. In dc a group is a [crossfilter
	    group](https://github.com/square/crossfilter/wiki/API-Reference#wiki-group). Usually the group
	    should be created from the particular dimension associated with the same chart. If a value is
	    given, then it will be used as the new group.

	    If no value specified then the current group will be returned.
	    If `name` is specified then it will be used to generate legend label.

	    **/
	    _chart.group = function (g, name) {
	        if (!arguments.length) return _group;
	        _group = g;
	        _chart._groupName = name;
	        _chart.expireCache();
	        return _chart;
	    };

	    /**
	    #### .ordering([orderFunction])
	    Get or set an accessor to order ordinal charts
	    **/
	    _chart.ordering = function(o) {
	        if (!arguments.length) return _ordering;
	        _ordering = o;
	        _orderSort = crossfilter.quicksort.by(_ordering);
	        _chart.expireCache();
	        return _chart;
	    };

	    _chart._computeOrderedGroups = function(data) {
	        var dataCopy = data.slice(0);

	        if (dataCopy.length <= 1)
	            return dataCopy;

	        if (!_orderSort)
	            _orderSort = crossfilter.quicksort.by(_ordering);

	        return _orderSort(dataCopy, 0, dataCopy.length);
	    };

	    /**
	    #### .filterAll()
	    Clear all filters associated with this chart.

	    **/
	    _chart.filterAll = function () {
	        return _chart.filter(null);
	    };

	    /**
	    #### .select(selector)
	    Execute d3 single selection in the chart's scope using the given selector and return the d3
	    selection. Roughly the same as:
	    ```js
	    d3.select("#chart-id").select(selector);
	    ```
	    This function is **not chainable** since it does not return a chart instance; however the d3
	    selection result can be chained to d3 function calls.

	    **/
	    _chart.select = function (s) {
	        return _root.select(s);
	    };

	    /**
	    #### .selectAll(selector)
	    Execute in scope d3 selectAll using the given selector and return d3 selection result. Roughly
	    the same as:
	    ```js
	    d3.select("#chart-id").selectAll(selector);
	    ```
	    This function is **not chainable** since it does not return a chart instance; however the d3
	    selection result can be chained to d3 function calls.

	    **/
	    _chart.selectAll = function (s) {
	        return _root ? _root.selectAll(s) : null;
	    };

	    /**
	     #### .anchor([anchorChart|anchorSelector|anchorNode], [chartGroup])
	     Set the svg root to either be an existing chart's root; or any valid [d3 single
	     selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying a dom
	     block element such as a div; or a dom element or d3 selection. Optionally registers the chart
	     within the chartGroup. This class is called internally on chart initialization, but be called
	     again to relocate the chart. However, it will orphan any previously created SVG elements.
	    **/
	    _chart.anchor = function (a, chartGroup) {
	        if (!arguments.length) return _anchor;
	        if (dc.instanceOfChart(a)) {
	            _anchor = a.anchor();
	            _root = a.root();
	        } else {
	            _anchor = a;
	            _root = d3.select(_anchor);
	            _root.classed(dc.constants.CHART_CLASS, true);
	            dc.registerChart(_chart, chartGroup);
	        }
	        _chartGroup = chartGroup;
	        return _chart;
	    };

	    /**
	    #### .anchorName()
	    Returns the dom id for the chart's anchored location.

	    **/
	    _chart.anchorName = function () {
	        var a = _chart.anchor();
	        if (a && a.id) return a.id;
	        if (a && a.replace) return a.replace('#','');
	        return "" + _chart.chartID();
	    };

	    /**
	    #### .root([rootElement])
	    Returns the root element where a chart resides. Usually it will be the parent div element where
	    the svg was created. You can also pass in a new root element however this is usually handled by
	    dc internally. Resetting the root element on a chart outside of dc internals may have
	    unexpected consequences.

	    **/
	    _chart.root = function (r) {
	        if (!arguments.length) return _root;
	        _root = r;
	        return _chart;
	    };

	    /**
	    #### .svg([svgElement])
	    Returns the top svg element for this specific chart. You can also pass in a new svg element,
	    however this is usually handled by dc internally. Resetting the svg element on a chart outside
	    of dc internals may have unexpected consequences.

	    **/
	    _chart.svg = function (_) {
	        if (!arguments.length) return _svg;
	        _svg = _;
	        return _chart;
	    };

	    /**
	    #### .resetSvg()
	    Remove the chart's SVG elements from the dom and recreate the container SVG element.
	    **/
	    _chart.resetSvg = function () {
	        _chart.select("svg").remove();
	        return generateSvg();
	    };

	    function generateSvg() {
	        _svg = _chart.root().append("svg")
	            .attr("width", _chart.width())
	            .attr("height", _chart.height());
	        return _svg;
	    }

	    /**
	    #### .filterPrinter([filterPrinterFunction])
	    Set or get the filter printer function. The filter printer function is used to generate human
	    friendly text for filter value(s) associated with the chart instance. By default dc charts use a
	    default filter printer `dc.printers.filter` that provides simple printing support for both
	    single value and ranged filters.

	    **/
	    _chart.filterPrinter = function (_) {
	        if (!arguments.length) return _filterPrinter;
	        _filterPrinter = _;
	        return _chart;
	    };

	    /**
	    #### .turnOnControls() & .turnOffControls()
	    Turn on/off optional control elements within the root element. dc currently supports the
	    following html control elements.

	    * root.selectAll(".reset") - elements are turned on if the chart has an active filter. This type
	     of control element is usually used to store a reset link to allow user to reset filter on a
	     certain chart. This element will be turned off automatically if the filter is cleared.
	    * root.selectAll(".filter") elements are turned on if the chart has an active filter. The text
	     content of this element is then replaced with the current filter value using the filter printer
	     function. This type of element will be turned off automatically if the filter is cleared.

	    **/
	    _chart.turnOnControls = function () {
	        if (_root) {
	            _chart.selectAll(".reset").style("display", null);
	            _chart.selectAll(".filter").text(_filterPrinter(_chart.filters())).style("display", null);
	        }
	        return _chart;
	    };

	    _chart.turnOffControls = function () {
	        if (_root) {
	            _chart.selectAll(".reset").style("display", "none");
	            _chart.selectAll(".filter").style("display", "none").text(_chart.filter());
	        }
	        return _chart;
	    };

	    /**
	    #### .transitionDuration([duration])
	    Set or get the animation transition duration(in milliseconds) for this chart instance. Default
	    duration is 750ms.

	    **/
	    _chart.transitionDuration = function (d) {
	        if (!arguments.length) return _transitionDuration;
	        _transitionDuration = d;
	        return _chart;
	    };

	    _chart._mandatoryAttributes = function (_) {
	        if (!arguments.length) return _mandatoryAttributes;
	        _mandatoryAttributes = _;
	        return _chart;
	    };

	    function checkForMandatoryAttributes(a) {
	        if (!_chart[a] || !_chart[a]())
	            throw new dc.errors.InvalidStateException("Mandatory attribute chart." + a +
	                                                      " is missing on chart[#" + _chart.anchorName() + "]");
	    }

	    /**
	    #### .render()
	    Invoking this method will force the chart to re-render everything from scratch. Generally it
	    should only be used to render the chart for the first time on the page or if you want to make
	    sure everything is redrawn from scratch instead of relying on the default incremental redrawing
	    behaviour.

	    **/
	    _chart.render = function () {
	        _listeners.preRender(_chart);

	        if (_mandatoryAttributes)
	            _mandatoryAttributes.forEach(checkForMandatoryAttributes);

	        var result = _chart._doRender();

	        if (_legend) _legend.render();

	        _chart._activateRenderlets("postRender");

	        return result;
	    };

	    _chart._activateRenderlets = function (event) {
	        if (_chart.transitionDuration() > 0 && _svg) {
	            _svg.transition().duration(_chart.transitionDuration())
	                .each("end", function () {
	                    runAllRenderlets();
	                    if (event) _listeners[event](_chart);
	                });
	        } else {
	            runAllRenderlets();
	            if (event) _listeners[event](_chart);
	        }
	    };

	    /**
	    #### .redraw()
	    Calling redraw will cause the chart to re-render data changes incrementally. If there is no
	    change in the underlying data dimension then calling this method will have no effect on the
	    chart. Most chart interaction in dc will automatically trigger this method through internal
	    events (in particular [dc.redrawAll](#dcredrawallchartgroup)); therefore, you only need to
	    manually invoke this function if data is manipulated outside of dc's control (for example if
	    data is loaded in the background using `crossfilter.add()`).

	    **/
	    _chart.redraw = function () {
	        _listeners.preRedraw(_chart);

	        var result = _chart._doRedraw();

	        if (_legend) _legend.render();

	        _chart._activateRenderlets("postRedraw");

	        return result;
	    };

	    _chart.redrawGroup = function () {
	        dc.redrawAll(_chart.chartGroup());
	    };

	    _chart.renderGroup = function () {
	        dc.renderAll(_chart.chartGroup());
	    };

	    _chart._invokeFilteredListener = function (f) {
	        if (f !== undefined) _listeners.filtered(_chart, f);
	    };

	    _chart._invokeZoomedListener = function () {
	        _listeners.zoomed(_chart);
	    };

	    /**
	    #### .hasFilter([filter])
	    Check whether is any active filter or a specific filter is associated with particular chart instance.
	    This function is **not chainable**.

	    **/
	    _chart.hasFilter = function (filter) {
	        if (!arguments.length) return _filters.length > 0;
	        return _filters.some(function(f) {
	            return filter <= f && filter >= f;
	        });
	    };

	    function removeFilter(_) {
	        for(var i = 0; i < _filters.length; i++) {
	            if(_filters[i] <= _ && _filters[i] >= _) {
	                _filters.splice(i, 1);
	                break;
	            }
	        }
	        applyFilters();
	        _chart._invokeFilteredListener(_);
	    }

	    function addFilter(_) {
	        _filters.push(_);
	        applyFilters();
	        _chart._invokeFilteredListener(_);
	    }

	    function resetFilters() {
	        _filters = [];
	        applyFilters();
	        _chart._invokeFilteredListener(null);
	    }

	    function applyFilters() {
	        if (_chart.dimension() && _chart.dimension().filter) {
	            var fs = _filterHandler(_chart.dimension(), _filters);
	            _filters = fs ? fs : _filters;
	        }
	    }

	    _chart.replaceFilter = function (_) {
	        _filters = [];
	        _chart.filter(_);
	    };

	    /**
	    #### .filter([filterValue])
	    Filter the chart by the given value or return the current filter if the input parameter is missing.
	    ```js
	    // filter by a single string
	    chart.filter("Sunday");
	    // filter by a single age
	    chart.filter(18);
	    ```

	    **/
	    _chart.filter = function (_) {
	        if (!arguments.length) return _filters.length > 0 ? _filters[0] : null;
	        if (_ instanceof Array && _[0] instanceof Array && !_.isFiltered) {
	            _[0].forEach(function(d){
	                if (_chart.hasFilter(d)) {
	                    _filters.splice(_filters.indexOf(d), 1);
	                } else {
	                    _filters.push(d);
	                }
	            });
	            applyFilters();
	            _chart._invokeFilteredListener(_);
	        } else if (_ === null) {
	            resetFilters();
	        } else {
	            if (_chart.hasFilter(_))
	                removeFilter(_);
	            else
	                addFilter(_);
	        }

	        if (_root !== null && _chart.hasFilter()) {
	            _chart.turnOnControls();
	        } else {
	            _chart.turnOffControls();
	        }

	        return _chart;
	    };

	    /**
	    #### .filters()
	    Returns all current filters. This method does not perform defensive cloning of the internal
	    filter array before returning, therefore any modification of the returned array will effect the
	    chart's internal filter storage.

	    **/
	    _chart.filters = function () {
	        return _filters;
	    };

	    _chart.highlightSelected = function (e) {
	        d3.select(e).classed(dc.constants.SELECTED_CLASS, true);
	        d3.select(e).classed(dc.constants.DESELECTED_CLASS, false);
	    };

	    _chart.fadeDeselected = function (e) {
	        d3.select(e).classed(dc.constants.SELECTED_CLASS, false);
	        d3.select(e).classed(dc.constants.DESELECTED_CLASS, true);
	    };

	    _chart.resetHighlight = function (e) {
	        d3.select(e).classed(dc.constants.SELECTED_CLASS, false);
	        d3.select(e).classed(dc.constants.DESELECTED_CLASS, false);
	    };

	    /**
	    #### .onClick(datum)
	    This function is passed to d3 as the onClick handler for each chart. The default behavior is to
	    filter on the clicked datum (passed to the callback) and redraw the chart group.
	    **/
	    _chart.onClick = function (d) {
	        var filter = _chart.keyAccessor()(d);
	        dc.events.trigger(function () {
	            _chart.filter(filter);
	            _chart.redrawGroup();
	        });
	    };

	    /**
	    #### .filterHandler([function])
	    Set or get the filter handler. The filter handler is a function that performs the filter action
	    on a specific dimension. Using a custom filter handler allows you to perform additional logic
	    before or after filtering.

	    ```js
	    // default filter handler
	    function(dimension, filter){
	        dimension.filter(filter); // perform filtering
	        return filter; // return the actual filter value
	    }

	    // custom filter handler
	    chart.filterHandler(function(dimension, filter){
	        var newFilter = filter + 10;
	        dimension.filter(newFilter);
	        return newFilter; // set the actual filter value to the new value
	    });
	    ```

	    **/
	    _chart.filterHandler = function (_) {
	        if (!arguments.length) return _filterHandler;
	        _filterHandler = _;
	        return _chart;
	    };

	    // abstract function stub
	    _chart._doRender = function () {
	        // do nothing in base, should be overridden by sub-function
	        return _chart;
	    };

	    _chart._doRedraw = function () {
	        // do nothing in base, should be overridden by sub-function
	        return _chart;
	    };

	    _chart.legendables = function () {
	        // do nothing in base, should be overridden by sub-function
	        return [];
	    };

	    _chart.legendHighlight = function (d) {
	        // do nothing in base, should be overridden by sub-function
	    };

	    _chart.legendReset = function (d) {
	        // do nothing in base, should be overridden by sub-function
	    };

	    _chart.legendToggle = function (d) {
	        // do nothing in base, should be overriden by sub-function
	    };

	    _chart.isLegendableHidden = function (d) {
	        // do nothing in base, should be overridden by sub-function
	        return false;
	    };

	    /**
	    #### .keyAccessor([keyAccessorFunction])
	    Set or get the key accessor function. The key accessor function is used to retrieve the key
	    value from the crossfilter group. Key values are used differently in different charts, for
	    example keys correspond to slices in a pie chart and x axis positions in a grid coordinate chart.
	    ```js
	    // default key accessor
	    chart.keyAccessor(function(d) { return d.key; });
	    // custom key accessor for a multi-value crossfilter reduction
	    chart.keyAccessor(function(p) { return p.value.absGain; });
	    ```

	    **/
	    _chart.keyAccessor = function (_) {
	        if (!arguments.length) return _keyAccessor;
	        _keyAccessor = _;
	        return _chart;
	    };

	    /**
	    #### .valueAccessor([valueAccessorFunction])
	    Set or get the value accessor function. The value accessor function is used to retrieve the
	    value from the crossfilter group. Group values are used differently in different charts, for
	    example values correspond to slice sizes in a pie chart and y axis positions in a grid
	    coordinate chart.
	    ```js
	    // default value accessor
	    chart.valueAccessor(function(d) { return d.value; });
	    // custom value accessor for a multi-value crossfilter reduction
	    chart.valueAccessor(function(p) { return p.value.percentageGain; });
	    ```

	    **/
	    _chart.valueAccessor = function (_) {
	        if (!arguments.length) return _valueAccessor;
	        _valueAccessor = _;
	        return _chart;
	    };

	    /**
	    #### .label([labelFunction])
	    Set or get the label function. The chart class will use this function to render labels for each
	    child element in the chart, e.g. slices in a pie chart or bubbles in a bubble chart. Not every
	    chart supports the label function for example bar chart and line chart do not use this function
	    at all.
	    ```js
	    // default label function just return the key
	    chart.label(function(d) { return d.key; });
	    // label function has access to the standard d3 data binding and can get quite complicated
	    chart.label(function(d) { return d.data.key + "(" + Math.floor(d.data.value / all.value() * 100) + "%)"; });
	    ```

	    **/
	    _chart.label = function (_) {
	        if (!arguments.length) return _label;
	        _label = _;
	        _renderLabel = true;
	        return _chart;
	    };

	    /**
	    #### .renderLabel(boolean)
	    Turn on/off label rendering

	    **/
	    _chart.renderLabel = function (_) {
	        if (!arguments.length) return _renderLabel;
	        _renderLabel = _;
	        return _chart;
	    };

	    /**
	    #### .title([titleFunction])
	    Set or get the title function. The chart class will use this function to render the svg title
	    (usually interpreted by browser as tooltips) for each child element in the chart, e.g. a slice
	    in a pie chart or a bubble in a bubble chart. Almost every chart supports the title function;
	    however in grid coordinate charts you need to turn off the brush in order to see titles, because
	    otherwise the brush layer will block tooltip triggering.
	    ```js
	    // default title function just return the key
	    chart.title(function(d) { return d.key + ": " + d.value; });
	    // title function has access to the standard d3 data binding and can get quite complicated
	    chart.title(function(p) {
	        return p.key.getFullYear()
	            + "\n"
	            + "Index Gain: " + numberFormat(p.value.absGain) + "\n"
	            + "Index Gain in Percentage: " + numberFormat(p.value.percentageGain) + "%\n"
	            + "Fluctuation / Index Ratio: " + numberFormat(p.value.fluctuationPercentage) + "%";
	    });
	    ```

	    **/
	    _chart.title = function (_) {
	        if (!arguments.length) return _title;
	        _title = _;
	        _renderTitle = true;
	        return _chart;
	    };

	    /**
	    #### .renderTitle(boolean)
	    Turn on/off title rendering, or return the state of the render title flag if no arguments are
	    given.

	    **/
	    _chart.renderTitle = function (_) {
	        if (!arguments.length) return _renderTitle;
	        _renderTitle = _;
	        return _chart;
	    };

	    /**
	    #### .renderlet(renderletFunction)
	    A renderlet is similar to an event listener on rendering event. Multiple renderlets can be added
	    to an individual chart.  Each time a chart is rerendered or redrawn the renderlets are invoked
	    right after the chart finishes its own drawing routine, giving you a way to modify the svg
	    elements. Renderlet functions take the chart instance as the only input parameter and you can
	    use the dc API or use raw d3 to achieve pretty much any effect.
	    ```js
	    // renderlet function
	    chart.renderlet(function(chart){
	        // mix of dc API and d3 manipulation
	        chart.select("g.y").style("display", "none");
	        // its a closure so you can also access other chart variable available in the closure scope
	        moveChart.filter(chart.filter());
	    });
	    ```

	    **/
	    _chart.renderlet = function (_) {
	        _renderlets.push(_);
	        return _chart;
	    };

	    function runAllRenderlets() {
	        for (var i = 0; i < _renderlets.length; ++i) {
	            _renderlets[i](_chart);
	        }
	    }

	    /**
	    #### .chartGroup([group])
	    Get or set the chart group to which this chart belongs. Chart groups are rendered or redrawn
	    together since it is expected they share the same underlying crossfilter data set.
	    **/
	    _chart.chartGroup = function (_) {
	        if (!arguments.length) return _chartGroup;
	        _chartGroup = _;
	        return _chart;
	    };

	    /**
	    #### .expireCache()
	    Expire the internal chart cache. dc charts cache some data internally on a per chart basis to
	    speed up rendering and avoid unnecessary calculation; however it might be useful to clear the
	    cache if you have changed state which will affect rendering.  For example if you invoke the
	    `crossfilter.add` function or reset group or dimension after rendering it is a good idea to
	    clear the cache to make sure charts are rendered properly.

	    **/
	    _chart.expireCache = function () {
	        // do nothing in base, should be overridden by sub-function
	        return _chart;
	    };

	    /**
	    #### .legend([dc.legend])
	    Attach a dc.legend widget to this chart. The legend widget will automatically draw legend labels
	    based on the color setting and names associated with each group.

	    ```js
	    chart.legend(dc.legend().x(400).y(10).itemHeight(13).gap(5))
	    ```

	    **/
	    _chart.legend = function (l) {
	        if (!arguments.length) return _legend;
	        _legend = l;
	        _legend.parent(_chart);
	        return _chart;
	    };

	    /**
	    #### .chartID()
	    Returns the internal numeric ID of the chart.
	    **/
	    _chart.chartID = function () {
	        return _chart.__dc_flag__;
	    };

	    /**
	    #### .options(optionsObject)
	    Set chart options using a configuration object. Each key in the object will cause the method of
	    the same name to be called with the value to set that attribute for the chart.

	    Example:
	    ```
	    chart.options({dimension: myDimension, group: myGroup});
	    ```
	    **/
	    _chart.options = function(opts) {
	        for (var o in opts) {
	            if (typeof(_chart[o]) === 'function') {
	                _chart[o].call(_chart,opts[o]);
	            } else {
	                dc.logger.debug("Not a valid option setter name: " + o);
	            }
	        }
	        return _chart;
	    };

	    /**
	    ## Listeners
	    All dc chart instance supports the following listeners.

	    #### .on("preRender", function(chart){...})
	    This listener function will be invoked before chart rendering.

	    #### .on("postRender", function(chart){...})
	    This listener function will be invoked after chart finish rendering including all renderlets' logic.

	    #### .on("preRedraw", function(chart){...})
	    This listener function will be invoked before chart redrawing.

	    #### .on("postRedraw", function(chart){...})
	    This listener function will be invoked after chart finish redrawing including all renderlets' logic.

	    #### .on("filtered", function(chart, filter){...})
	    This listener function will be invoked after a filter is applied, added or removed.

	    #### .on("zoomed", function(chart, filter){...})
	    This listener function will be invoked after a zoom is triggered.

	    **/
	    _chart.on = function (event, listener) {
	        _listeners.on(event, listener);
	        return _chart;
	    };

	    return _chart;
	};


	/**
	## Margin Mixin

	Margin is a mixin that provides margin utility functions for both the Row Chart and Coordinate Grid
	Charts.

	**/
	dc.marginMixin = function (_chart) {
	    var _margin = {top: 10, right: 50, bottom: 30, left: 30};

	    /**
	    #### .margins([margins])
	    Get or set the margins for a particular coordinate grid chart instance. The margins is stored as
	    an associative Javascript array. Default margins: {top: 10, right: 50, bottom: 30, left: 30}.

	    The margins can be accessed directly from the getter.
	    ```js
	    var leftMargin = chart.margins().left; // 30 by default
	    chart.margins().left = 50;
	    leftMargin = chart.margins().left; // now 50
	    ```

	    **/
	    _chart.margins = function (m) {
	        if (!arguments.length) return _margin;
	        _margin = m;
	        return _chart;
	    };

	    _chart.effectiveWidth = function () {
	        return _chart.width() - _chart.margins().left - _chart.margins().right;
	    };

	    _chart.effectiveHeight = function () {
	        return _chart.height() - _chart.margins().top - _chart.margins().bottom;
	    };

	    return _chart;
	};

	/**
	## Color Mixin

	The Color Mixin is an abstract chart functional class providing universal coloring support
	as a mix-in for any concrete chart implementation.

	**/

	dc.colorMixin = function(_chart) {
	    var _colors = d3.scale.category20c();
	    var _defaultAccessor = true;

	    var _colorAccessor = function(d) { return _chart.keyAccessor()(d); };

	    /**
	    #### .colors([colorScale])
	    Retrieve current color scale or set a new color scale. This methods accepts any function that
	    operates like a d3 scale. If not set the default is
	    `d3.scale.category20c()`.
	    ```js
	    // alternate categorical scale
	    chart.colors(d3.scale.category20b());

	    // ordinal scale
	    chart.colors(d3.scale.ordinal().range(['red','green','blue']));
	    // convenience method, the same as above
	    chart.ordinalColors(['red','green','blue']);

	    // set a linear scale
	    chart.linearColors(["#4575b4", "#ffffbf", "#a50026"]);
	    ```
	    **/
	    _chart.colors = function(_) {
	        if (!arguments.length) return _colors;
	        if (_ instanceof Array) _colors = d3.scale.quantize().range(_); // deprecated legacy support, note: this fails for ordinal domains
	        else _colors = d3.functor(_);
	        return _chart;
	    };

	    /**
	    #### .ordinalColors(r)
	    Convenience method to set the color scale to d3.scale.ordinal with range `r`.

	    **/
	    _chart.ordinalColors = function(r) {
	        return _chart.colors(d3.scale.ordinal().range(r));
	    };

	    /**
	    #### .linearColors(r)
	    Convenience method to set the color scale to an Hcl interpolated linear scale with range `r`.

	    **/
	    _chart.linearColors = function(r) {
	        return _chart.colors(d3.scale.linear()
	                             .range(r)
	                             .interpolate(d3.interpolateHcl));
	    };

	    /**
	    #### .colorAccessor([colorAccessorFunction])
	    Set or the get color accessor function. This function will be used to map a data point in a
	    crossfilter group to a color value on the color scale. The default function uses the key
	    accessor.
	    ```js
	    // default index based color accessor
	    .colorAccessor(function(d, i){return i;})
	    // color accessor for a multi-value crossfilter reduction
	    .colorAccessor(function(d){return d.value.absGain;})
	    ```
	    **/
	    _chart.colorAccessor = function(_){
	        if(!arguments.length) return _colorAccessor;
	        _colorAccessor = _;
	        _defaultAccessor = false;
	        return _chart;
	    };

	    // what is this?
	    _chart.defaultColorAccessor = function() {
	        return _defaultAccessor;
	    };

	    /**
	    #### .colorDomain([domain])
	    Set or get the current domain for the color mapping function. The domain must be supplied as an
	    array.

	    Note: previously this method accepted a callback function. Instead you may use a custom scale
	    set by `.colors`.

	    **/
	    _chart.colorDomain = function(_){
	        if(!arguments.length) return _colors.domain();
	        _colors.domain(_);
	        return _chart;
	    };

	    /**
	    #### .calculateColorDomain()
	    Set the domain by determining the min and max values as retrieved by `.colorAccessor` over the
	    chart's dataset.

	    **/
	    _chart.calculateColorDomain = function () {
	        var newDomain = [d3.min(_chart.data(), _chart.colorAccessor()),
	                         d3.max(_chart.data(), _chart.colorAccessor())];
	        _colors.domain(newDomain);
	    };

	    /**
	    #### .getColor(d [, i])
	    Get the color for the datum d and counter i. This is used internally by charts to retrieve a color.

	    **/
	    _chart.getColor = function(d, i){
	        return _colors(_colorAccessor.call(this,d, i));
	    };

	    /**
	     #### .colorCalculator([value])
	     Gets or sets chart.getColor.
	     **/
	    _chart.colorCalculator = function(_){
	        if(!arguments.length) return _chart.getColor;
	        _chart.getColor = _;
	        return _chart;
	    };

	    return _chart;
	};

	/**
	## Coordinate Grid Mixin

	Includes: [Color Mixin](#color-mixin), [Margin Mixin](#margin-mixin), [Base Mixin](#base-mixin)

	Coordinate Grid is an abstract base chart designed to support a number of coordinate grid based
	concrete chart types, e.g. bar chart, line chart, and bubble chart.

	**/
	dc.coordinateGridMixin = function (_chart) {
	    var GRID_LINE_CLASS = "grid-line";
	    var HORIZONTAL_CLASS = "horizontal";
	    var VERTICAL_CLASS = "vertical";
	    var Y_AXIS_LABEL_CLASS = 'y-axis-label';
	    var X_AXIS_LABEL_CLASS = 'x-axis-label';
	    var DEFAULT_AXIS_LABEL_PADDING = 12;

	    _chart = dc.colorMixin(dc.marginMixin(dc.baseMixin(_chart)));

	    _chart.colors(d3.scale.category10());
	    _chart._mandatoryAttributes().push('x');

	    var _parent;
	    var _g;
	    var _chartBodyG;

	    var _x;
	    var _xOriginalDomain;
	    var _xAxis = d3.svg.axis().orient("bottom");
	    var _xUnits = dc.units.integers;
	    var _xAxisPadding = 0;
	    var _xElasticity = false;
	    var _xAxisLabel;
	    var _xAxisLabelPadding = 0;
	    var _lastXDomain;

	    var _y;
	    var _yAxis = d3.svg.axis().orient("left");
	    var _yAxisPadding = 0;
	    var _yElasticity = false;
	    var _yAxisLabel;
	    var _yAxisLabelPadding = 0;

	    var _brush = d3.svg.brush();
	    var _brushOn = true;
	    var _round;

	    var _renderHorizontalGridLine = false;
	    var _renderVerticalGridLine = false;

	    var _refocused = false;
	    var _unitCount;

	    var _zoomScale = [1, Infinity];
	    var _zoomOutRestrict = true;

	    var _zoom = d3.behavior.zoom().on("zoom", zoomHandler);
	    var _nullZoom = d3.behavior.zoom().on("zoom", null);
	    var _hasBeenMouseZoomable = false;

	    var _rangeChart;
	    var _focusChart;

	    var _mouseZoomable = false;
	    var _clipPadding = 0;

	    var _outerRangeBandPadding = 0.5;
	    var _rangeBandPadding = 0;

	    var _useRightYAxis = false;

	    _chart.rescale = function () {
	        _unitCount = undefined;
	    };

	    /**
	    #### .rangeChart([chart])
	    Get or set the range selection chart associated with this instance. Setting the range selection
	    chart using this function will automatically update its selection brush when the current chart
	    zooms in. In return the given range chart will also automatically attach this chart as its focus
	    chart hence zoom in when range brush updates. See the [Nasdaq 100
	    Index](http://dc-js.github.com/dc.js/) example for this effect in action.

	    **/
	    _chart.rangeChart = function (_) {
	        if (!arguments.length) return _rangeChart;
	        _rangeChart = _;
	        _rangeChart.focusChart(_chart);
	        return _chart;
	    };

	    /**
	    #### .zoomScale([extent])
	    Get or set the scale extent for mouse zooms.

	    **/
	    _chart.zoomScale = function (_) {
	        if (!arguments.length) return _zoomScale;
	        _zoomScale = _;
	        return _chart;
	    };

	    /**
	    #### .zoomOutRestrict([true/false])
	    Get or set the zoom restriction for the chart. If true limits the zoom to origional domain of the chart.
	    **/
	    _chart.zoomOutRestrict = function (r) {
	        if (!arguments.length) return _zoomOutRestrict;
	        _zoomScale[0] = r ? 1 : 0;
	        _zoomOutRestrict = r;
	        return _chart;
	    };

	    _chart._generateG = function (parent) {
	        if (parent === undefined)
	            _parent = _chart.svg();
	        else
	            _parent = parent;

	        _g = _parent.append("g");

	        _chartBodyG = _g.append("g").attr("class", "chart-body")
	            .attr("transform", "translate(" + _chart.margins().left + ", " + _chart.margins().top + ")")
	            .attr("clip-path", "url(#" + getClipPathId() + ")");

	        return _g;
	    };

	    /**
	    #### .g([gElement])
	    Get or set the root g element. This method is usually used to retrieve the g element in order to
	    overlay custom svg drawing programatically. **Caution**: The root g element is usually generated
	    by dc.js internals, and resetting it might produce unpredictable result.

	    **/
	    _chart.g = function (_) {
	        if (!arguments.length) return _g;
	        _g = _;
	        return _chart;
	    };

	    /**
	    #### .mouseZoomable([boolean])
	    Set or get mouse zoom capability flag (default: false). When turned on the chart will be
	    zoomable using the mouse wheel. If the range selector chart is attached zooming will also update
	    the range selection brush on the associated range selector chart.

	    **/
	    _chart.mouseZoomable = function (z) {
	        if (!arguments.length) return _mouseZoomable;
	        _mouseZoomable = z;
	        return _chart;
	    };

	    /**
	    #### .chartBodyG()
	    Retrieve the svg group for the chart body.
	    **/
	    _chart.chartBodyG = function (_) {
	        if (!arguments.length) return _chartBodyG;
	        _chartBodyG = _;
	        return _chart;
	    };

	    /**
	    #### .x([xScale]) - **mandatory**
	    Get or set the x scale. The x scale can be any d3
	    [quantitive scale](https://github.com/mbostock/d3/wiki/Quantitative-Scales) or
	    [ordinal scale](https://github.com/mbostock/d3/wiki/Ordinal-Scales).
	    ```js
	    // set x to a linear scale
	    chart.x(d3.scale.linear().domain([-2500, 2500]))
	    // set x to a time scale to generate histogram
	    chart.x(d3.time.scale().domain([new Date(1985, 0, 1), new Date(2012, 11, 31)]))
	    ```

	    **/
	    _chart.x = function (_) {
	        if (!arguments.length) return _x;
	        _x = _;
	        _xOriginalDomain = _x.domain();
	        return _chart;
	    };

	    _chart.xOriginalDomain = function () {
	        return _xOriginalDomain;
	    };

	    /**
	    #### .xUnits([xUnits function])
	    Set or get the xUnits function. The coordinate grid chart uses the xUnits function to calculate
	    the number of data projections on x axis such as the number of bars for a bar chart or the
	    number of dots for a line chart. This function is expected to return a Javascript array of all
	    data points on x axis, or the number of points on the axis. [d3 time range functions
	    d3.time.days, d3.time.months, and
	    d3.time.years](https://github.com/mbostock/d3/wiki/Time-Intervals#aliases) are all valid xUnits
	    function. dc.js also provides a few units function, see the [Utilities](#utilities) section for
	    a list of built-in units functions. The default xUnits function is dc.units.integers.
	    ```js
	    // set x units to count days
	    chart.xUnits(d3.time.days);
	    // set x units to count months
	    chart.xUnits(d3.time.months);
	    ```
	    A custom xUnits function can be used as long as it follows the following interface:
	    ```js
	    // units in integer
	    function(start, end, xDomain) {
	        // simply calculates how many integers in the domain
	        return Math.abs(end - start);
	    };

	    // fixed units
	    function(start, end, xDomain) {
	        // be aware using fixed units will disable the focus/zoom ability on the chart
	        return 1000;
	    };
	    ```

	    **/
	    _chart.xUnits = function (_) {
	        if (!arguments.length) return _xUnits;
	        _xUnits = _;
	        return _chart;
	    };

	    /**
	    #### .xAxis([xAxis])
	    Set or get the x axis used by a particular coordinate grid chart instance. This function is most
	    useful when x axis customization is required. The x axis in dc.js is an instance of a [d3
	    axis object](https://github.com/mbostock/d3/wiki/SVG-Axes#wiki-axis); therefore it supports any
	    valid d3 axis manipulation. **Caution**: The x axis is usually generated internally by dc;
	    resetting it may cause unexpected results.
	    ```js
	    // customize x axis tick format
	    chart.xAxis().tickFormat(function(v) {return v + "%";});
	    // customize x axis tick values
	    chart.xAxis().tickValues([0, 100, 200, 300]);
	    ```

	    **/
	    _chart.xAxis = function (_) {
	        if (!arguments.length) return _xAxis;
	        _xAxis = _;
	        return _chart;
	    };

	    /**
	    #### .elasticX([boolean])
	    Turn on/off elastic x axis behavior. If x axis elasticity is turned on, then the grid chart will
	    attempt to recalculate the x axis range whenever a redraw event is triggered.

	    **/
	    _chart.elasticX = function (_) {
	        if (!arguments.length) return _xElasticity;
	        _xElasticity = _;
	        return _chart;
	    };

	    /**
	    #### .xAxisPadding([padding])
	    Set or get x axis padding for the elastic x axis. The padding will be added to both end of the x
	    axis if elasticX is turned on; otherwise it is ignored.

	    * padding can be an integer or percentage in string (e.g. "10%"). Padding can be applied to
	    number or date x axes.  When padding a date axis, an integer represents number of days being padded
	    and a percentage string will be treated the same as an integer.

	    **/
	    _chart.xAxisPadding = function (_) {
	        if (!arguments.length) return _xAxisPadding;
	        _xAxisPadding = _;
	        return _chart;
	    };

	    /**
	    #### .xUnitCount()
	    Returns the number of units displayed on the x axis using the unit measure configured by
	    .xUnits.
	    **/
	    _chart.xUnitCount = function () {
	        if (_unitCount === undefined) {
	            var units = _chart.xUnits()(_chart.x().domain()[0], _chart.x().domain()[1], _chart.x().domain());

	            if (units instanceof Array)
	                _unitCount = units.length;
	            else
	                _unitCount = units;
	        }

	        return _unitCount;
	    };
	    /**
	     #### .useRightYAxis()
	     Gets or sets whether the chart should be drawn with a right axis instead of a left axis. When
	     used with a chart in a composite chart, allows both left and right Y axes to be shown on a
	     chart.
	     **/

	    _chart.useRightYAxis = function (_) {
	        if (!arguments.length) return _useRightYAxis;
	        _useRightYAxis = _;
	        return _chart;
	    };

	    /**
	    #### isOrdinal()
	    Returns true if the chart is using ordinal xUnits ([dc.units.ordinal](#dcunitsordinal)), or false
	    otherwise. Most charts behave differently with ordinal data and use the result of this method to
	    trigger the appropriate logic.
	    **/
	    _chart.isOrdinal = function () {
	        return _chart.xUnits() === dc.units.ordinal;
	    };

	    _chart._useOuterPadding = function() {
	        return true;
	    };

	    _chart._ordinalXDomain = function() {
	        var groups = _chart._computeOrderedGroups(_chart.data());
	        return groups.map(_chart.keyAccessor());
	    };

	    function prepareXAxis(g) {
	        if(!_chart.isOrdinal()) {
	            if (_chart.elasticX())
	                _x.domain([_chart.xAxisMin(), _chart.xAxisMax()]);
	        }
	        else { // _chart.isOrdinal()
	            if(_chart.elasticX() || _x.domain().length===0)
	                _x.domain(_chart._ordinalXDomain());
	        }

	        // has the domain changed?
	        var xdom = _x.domain();
	        if(!_lastXDomain || xdom.some(function(elem, i) { return elem != _lastXDomain[i]; }))
	            _chart.rescale();
	        _lastXDomain = xdom;

	        // please can't we always use rangeBands for bar charts?
	        if (_chart.isOrdinal()) {
	            _x.rangeBands([0,_chart.xAxisLength()],_rangeBandPadding,
	                          _chart._useOuterPadding()?_outerRangeBandPadding:0);
	        } else {
	            _x.range([0, _chart.xAxisLength()]);
	        }

	        _xAxis = _xAxis.scale(_chart.x());

	        renderVerticalGridLines(g);
	    }

	    _chart.renderXAxis = function (g) {
	        var axisXG = g.selectAll("g.x");

	        if (axisXG.empty())
	            axisXG = g.append("g")
	                .attr("class", "axis x")
	                .attr("transform", "translate(" + _chart.margins().left + "," + _chart._xAxisY() + ")");

	        var axisXLab = g.selectAll("text."+X_AXIS_LABEL_CLASS);
	        if (axisXLab.empty() && _chart.xAxisLabel())
	            axisXLab = g.append('text')
	                .attr("transform", "translate(" + (_chart.margins().left + _chart.xAxisLength() / 2) + "," + (_chart.height() - _xAxisLabelPadding) + ")")
	                .attr('class', X_AXIS_LABEL_CLASS)
	                .attr('text-anchor', 'middle')
	                .text(_chart.xAxisLabel());
	        if (_chart.xAxisLabel() && axisXLab.text() != _chart.xAxisLabel())
	            axisXLab.text(_chart.xAxisLabel());

	        dc.transition(axisXG, _chart.transitionDuration())
	            .call(_xAxis);
	    };

	    function renderVerticalGridLines(g) {
	        var gridLineG = g.selectAll("g." + VERTICAL_CLASS);

	        if (_renderVerticalGridLine) {
	            if (gridLineG.empty())
	                gridLineG = g.insert("g", ":first-child")
	                    .attr("class", GRID_LINE_CLASS + " " + VERTICAL_CLASS)
	                    .attr("transform", "translate(" + _chart.margins().left + "," + _chart.margins().top + ")");

	            var ticks = _xAxis.tickValues() ? _xAxis.tickValues() : _x.ticks(_xAxis.ticks()[0]);

	            var lines = gridLineG.selectAll("line")
	                .data(ticks);

	            // enter
	            var linesGEnter = lines.enter()
	                .append("line")
	                .attr("x1", function (d) {
	                    return _x(d);
	                })
	                .attr("y1", _chart._xAxisY() - _chart.margins().top)
	                .attr("x2", function (d) {
	                    return _x(d);
	                })
	                .attr("y2", 0)
	                .attr("opacity", 0);
	            dc.transition(linesGEnter, _chart.transitionDuration())
	                .attr("opacity", 1);

	            // update
	            dc.transition(lines, _chart.transitionDuration())
	                .attr("x1", function (d) {
	                    return _x(d);
	                })
	                .attr("y1", _chart._xAxisY() - _chart.margins().top)
	                .attr("x2", function (d) {
	                    return _x(d);
	                })
	                .attr("y2", 0);

	            // exit
	            lines.exit().remove();
	        }
	        else {
	            gridLineG.selectAll("line").remove();
	        }
	    }

	    _chart._xAxisY = function () {
	        return (_chart.height() - _chart.margins().bottom);
	    };

	    _chart.xAxisLength = function () {
	        return _chart.effectiveWidth();
	    };

	    /**
	    #### .xAxisLabel([labelText, [, padding]])
	    Set or get the x axis label. If setting the label, you may optionally include additional padding to
	    the margin to make room for the label. By default the padded is set to 12 to accomodate the text height.
	    **/
	    _chart.xAxisLabel = function (_, padding) {
	        if (!arguments.length) return _xAxisLabel;
	        _xAxisLabel = _;
	        _chart.margins().bottom -= _xAxisLabelPadding;
	        _xAxisLabelPadding = (padding === undefined) ? DEFAULT_AXIS_LABEL_PADDING : padding;
	        _chart.margins().bottom += _xAxisLabelPadding;
	        return _chart;
	    };

	    _chart._prepareYAxis = function(g) {
	        if (_y === undefined || _chart.elasticY()) {
	            _y = d3.scale.linear();
	            var min = _chart.yAxisMin() || 0,
	                max = _chart.yAxisMax() || 0;
	            _y.domain([min, max]).rangeRound([_chart.yAxisHeight(), 0]);
	        }

	        _y.range([_chart.yAxisHeight(), 0]);
	        _yAxis = _yAxis.scale(_y);

	        if (_useRightYAxis)
	            _yAxis.orient("right");

	        _chart._renderHorizontalGridLinesForAxis(g, _y, _yAxis);
	    };

	    _chart.renderYAxisLabel = function(axisClass, text, rotation, labelXPosition) {
	        labelXPosition = labelXPosition || _yAxisLabelPadding;

	        var axisYLab = _chart.g().selectAll("text." + Y_AXIS_LABEL_CLASS + "." + axisClass + "-label");
	        if (axisYLab.empty() && text) {

	            var labelYPosition = (_chart.margins().top + _chart.yAxisHeight() / 2);
	            axisYLab = _chart.g().append('text')
	                .attr("transform", "translate(" + labelXPosition + "," + labelYPosition + "),rotate(" + rotation + ")")
	                .attr('class', Y_AXIS_LABEL_CLASS + " " + axisClass + "-label")
	                .attr('text-anchor', 'middle')
	                .text(text);
	        }
	        if (text && axisYLab.text() != text) {
	            axisYLab.text(text);
	        }
	    };

	    _chart.renderYAxisAt = function (axisClass, axis, position){
	        var axisYG = _chart.g().selectAll("g." + axisClass);
	        if (axisYG.empty()) {
	            axisYG = _chart.g().append("g")
	                .attr("class", "axis " + axisClass)
	                .attr("transform", "translate(" + position + "," + _chart.margins().top + ")");
	        }

	        dc.transition(axisYG, _chart.transitionDuration()).call(axis);
	    };

	    _chart.renderYAxis = function () {
	        var axisPosition = _useRightYAxis ? (_chart.width() - _chart.margins().right) : _chart._yAxisX();
	        _chart.renderYAxisAt("y", _yAxis, axisPosition);
	        var labelPosition = _useRightYAxis ? (_chart.width() - _yAxisLabelPadding) : _yAxisLabelPadding;
	        var rotation = _useRightYAxis ? 90 : -90;
	        _chart.renderYAxisLabel("y", _chart.yAxisLabel(), rotation, labelPosition);
	    };

	    _chart._renderHorizontalGridLinesForAxis = function (g, scale, axis) {
	        var gridLineG = g.selectAll("g." + HORIZONTAL_CLASS);

	        if (_renderHorizontalGridLine) {
	            var ticks = axis.tickValues() ? axis.tickValues() : scale.ticks(axis.ticks()[0]);

	            if (gridLineG.empty()) {
	                gridLineG = g.insert("g", ":first-child")
	                    .attr("class", GRID_LINE_CLASS + " " + HORIZONTAL_CLASS)
	                    .attr("transform", "translate(" + _chart.margins().left + "," + _chart.margins().top + ")");
	            }

	            var lines = gridLineG.selectAll("line")
	                .data(ticks);

	            // enter
	            var linesGEnter = lines.enter()
	                .append("line")
	                .attr("x1", 1)
	                .attr("y1", function (d) {
	                    return scale(d);
	                })
	                .attr("x2", _chart.xAxisLength())
	                .attr("y2", function (d) {
	                    return scale(d);
	                })
	                .attr("opacity", 0);
	            dc.transition(linesGEnter, _chart.transitionDuration())
	                .attr("opacity", 1);

	            // update
	            dc.transition(lines, _chart.transitionDuration())
	                .attr("x1", 1)
	                .attr("y1", function (d) {
	                    return scale(d);
	                })
	                .attr("x2", _chart.xAxisLength())
	                .attr("y2", function (d) {
	                    return scale(d);
	                });

	            // exit
	            lines.exit().remove();
	        }
	        else {
	            gridLineG.selectAll("line").remove();
	        }
	    };

	    _chart._yAxisX = function () {
	        return _chart.useRightYAxis() ? _chart.width() - _chart.margins().right : _chart.margins().left;
	    };


	    /**
	    #### .yAxisLabel([labelText, [, padding]])
	    Set or get the y axis label. If setting the label, you may optionally include additional padding
	    to the margin to make room for the label. By default the padded is set to 12 to accomodate the
	    text height.
	    **/
	    _chart.yAxisLabel = function (_, padding) {
	        if (!arguments.length) return _yAxisLabel;
	        _yAxisLabel = _;
	        _chart.margins().left -= _yAxisLabelPadding;
	        _yAxisLabelPadding = (padding === undefined) ? DEFAULT_AXIS_LABEL_PADDING : padding;
	        _chart.margins().left += _yAxisLabelPadding;
	        return _chart;
	    };

	    /**
	    #### .y([yScale])
	    Get or set the y scale. The y scale is typically automatically determined by the chart implementation.

	    **/
	    _chart.y = function (_) {
	        if (!arguments.length) return _y;
	        _y = _;
	        return _chart;
	    };

	    /**
	    #### .yAxis([yAxis])
	    Set or get the y axis used by the coordinate grid chart instance. This function is most useful
	    when y axis customization is required. The y axis in dc.js is simply an instance of a [d3 axis
	    object](https://github.com/mbostock/d3/wiki/SVG-Axes#wiki-_axis); therefore it supports any
	    valid d3 axis manipulation. **Caution**: The y axis is usually generated internally by dc;
	    resetting it may cause unexpected results.
	    ```js
	    // customize y axis tick format
	    chart.yAxis().tickFormat(function(v) {return v + "%";});
	    // customize y axis tick values
	    chart.yAxis().tickValues([0, 100, 200, 300]);
	    ```

	    **/
	    _chart.yAxis = function (y) {
	        if (!arguments.length) return _yAxis;
	        _yAxis = y;
	        return _chart;
	    };

	    /**
	    #### .elasticY([boolean])
	    Turn on/off elastic y axis behavior. If y axis elasticity is turned on, then the grid chart will
	    attempt to recalculate the y axis range whenever a redraw event is triggered.

	    **/
	    _chart.elasticY = function (_) {
	        if (!arguments.length) return _yElasticity;
	        _yElasticity = _;
	        return _chart;
	    };

	    /**
	    #### .renderHorizontalGridLines([boolean])
	    Turn on/off horizontal grid lines.

	    **/
	    _chart.renderHorizontalGridLines = function (_) {
	        if (!arguments.length) return _renderHorizontalGridLine;
	        _renderHorizontalGridLine = _;
	        return _chart;
	    };

	    /**
	    #### .renderVerticalGridLines([boolean])
	    Turn on/off vertical grid lines.

	    **/
	    _chart.renderVerticalGridLines = function (_) {
	        if (!arguments.length) return _renderVerticalGridLine;
	        _renderVerticalGridLine = _;
	        return _chart;
	    };

	    /**
	    #### .xAxisMin()
	    Calculates the minimum x value to display in the chart. Includes xAxisPadding if set.
	    **/
	    _chart.xAxisMin = function () {
	        var min = d3.min(_chart.data(), function (e) {
	            return _chart.keyAccessor()(e);
	        });
	        return dc.utils.subtract(min, _xAxisPadding);
	    };

	    /**
	    #### .xAxisMax()
	    Calculates the maximum x value to display in the chart. Includes xAxisPadding if set.
	    **/
	    _chart.xAxisMax = function () {
	        var max = d3.max(_chart.data(), function (e) {
	            return _chart.keyAccessor()(e);
	        });
	        return dc.utils.add(max, _xAxisPadding);
	    };

	    /**
	    #### .yAxisMin()
	    Calculates the minimum y value to display in the chart. Includes yAxisPadding if set.
	    **/
	    _chart.yAxisMin = function () {
	        var min = d3.min(_chart.data(), function (e) {
	            return _chart.valueAccessor()(e);
	        });
	        return dc.utils.subtract(min, _yAxisPadding);
	    };

	    /**
	    #### .yAxisMax()
	    Calculates the maximum y value to display in the chart. Includes yAxisPadding if set.
	    **/
	    _chart.yAxisMax = function () {
	        var max = d3.max(_chart.data(), function (e) {
	            return _chart.valueAccessor()(e);
	        });
	        return dc.utils.add(max, _yAxisPadding);
	    };

	    /**
	    #### .yAxisPadding([padding])
	    Set or get y axis padding for the elastic y axis. The padding will be added to the top of the y
	    axis if elasticY is turned on; otherwise it is ignored.

	    * padding can be an integer or percentage in string (e.g. "10%"). Padding can be applied to
	    number or date axes. When padding a date axis, an integer represents number of days being padded
	    and a percentage string will be treated the same as an integer.

	    **/
	    _chart.yAxisPadding = function (_) {
	        if (!arguments.length) return _yAxisPadding;
	        _yAxisPadding = _;
	        return _chart;
	    };

	    _chart.yAxisHeight = function () {
	        return _chart.effectiveHeight();
	    };

	    /**
	    #### .round([rounding function])
	    Set or get the rounding function used to quantize the selection when brushing is enabled.
	    ```js
	    // set x unit round to by month, this will make sure range selection brush will
	    // select whole months
	    chart.round(d3.time.month.round);
	    ```

	    **/
	    _chart.round = function (_) {
	        if (!arguments.length) return _round;
	        _round = _;
	        return _chart;
	    };

	    _chart._rangeBandPadding = function (_) {
	        if (!arguments.length) return _rangeBandPadding;
	        _rangeBandPadding = _;
	        return _chart;
	    };

	    _chart._outerRangeBandPadding = function (_) {
	        if (!arguments.length) return _outerRangeBandPadding;
	        _outerRangeBandPadding = _;
	        return _chart;
	    };

	    dc.override(_chart, "filter", function (_) {
	        if (!arguments.length) return _chart._filter();

	        _chart._filter(_);

	        if (_) {
	            _chart.brush().extent(_);
	        } else {
	            _chart.brush().clear();
	        }

	        return _chart;
	    });

	    _chart.brush = function (_) {
	        if (!arguments.length) return _brush;
	        _brush = _;
	        return _chart;
	    };

	    function brushHeight() {
	        return _chart._xAxisY() - _chart.margins().top;
	    }

	    _chart.renderBrush = function (g) {
	        if (_brushOn) {
	            _brush.on("brush", _chart._brushing);
	            _brush.on("brushstart", _chart._disableMouseZoom);
	            _brush.on("brushend", configureMouseZoom);

	            var gBrush = g.append("g")
	                .attr("class", "brush")
	                .attr("transform", "translate(" + _chart.margins().left + "," + _chart.margins().top + ")")
	                .call(_brush.x(_chart.x()));
	            _chart.setBrushY(gBrush);
	            _chart.setHandlePaths(gBrush);

	            if (_chart.hasFilter()) {
	                _chart.redrawBrush(g);
	            }
	        }
	    };

	    _chart.setHandlePaths = function (gBrush) {
	        gBrush.selectAll(".resize").append("path").attr("d", _chart.resizeHandlePath);
	    };

	    _chart.setBrushY = function(gBrush){
	        gBrush.selectAll("rect").attr("height", brushHeight());
	    };

	    _chart.extendBrush = function () {
	        var extent = _brush.extent();
	        if (_chart.round()) {
	            extent[0] = extent.map(_chart.round())[0];
	            extent[1] = extent.map(_chart.round())[1];

	            _g.select(".brush")
	                .call(_brush.extent(extent));
	        }
	        return extent;
	    };

	    _chart.brushIsEmpty = function (extent) {
	        return _brush.empty() || !extent || extent[1] <= extent[0];
	    };

	    _chart._brushing = function() {
	        var extent = _chart.extendBrush();

	        _chart.redrawBrush(_g);

	        if (_chart.brushIsEmpty(extent)) {
	            dc.events.trigger(function () {
	                _chart.filter(null);
	                _chart.redrawGroup();
	            }, dc.constants.EVENT_DELAY);
	        } else {
	            var rangedFilter = dc.filters.RangedFilter(extent[0], extent[1]);

	            dc.events.trigger(function () {
	                _chart.replaceFilter(rangedFilter);
	                _chart.redrawGroup();
	            }, dc.constants.EVENT_DELAY);
	        }
	    };

	    _chart.redrawBrush = function (g) {
	        if (_brushOn) {
	            if (_chart.filter() && _chart.brush().empty())
	                _chart.brush().extent(_chart.filter());

	            var gBrush = g.select("g.brush");
	            gBrush.call(_chart.brush().x(_chart.x()));
	            _chart.setBrushY(gBrush);
	        }

	        _chart.fadeDeselectedArea();
	    };

	    _chart.fadeDeselectedArea = function () {
	        // do nothing, sub-chart should override this function
	    };

	    // borrowed from Crossfilter example
	    _chart.resizeHandlePath = function (d) {
	        var e = +(d == "e"), x = e ? 1 : -1, y = brushHeight() / 3;
	        /*jshint -W014 */
	        return "M" + (0.5 * x) + "," + y
	            + "A6,6 0 0 " + e + " " + (6.5 * x) + "," + (y + 6)
	            + "V" + (2 * y - 6)
	            + "A6,6 0 0 " + e + " " + (0.5 * x) + "," + (2 * y)
	            + "Z"
	            + "M" + (2.5 * x) + "," + (y + 8)
	            + "V" + (2 * y - 8)
	            + "M" + (4.5 * x) + "," + (y + 8)
	            + "V" + (2 * y - 8);
	        /*jshint +W014 */
	    };

	    function getClipPathId() {
	        return _chart.anchorName() + "-clip";
	    }

	    /**
	    #### .clipPadding([padding])
	    Get or set the padding in pixels for the clip path. Once set padding will be applied evenly to
	    the top, left, right, and bottom when the clip path is generated. If set to zero, the clip area
	    will be exactly the chart body area minus the margins.  Default: 5

	    **/
	    _chart.clipPadding = function (p) {
	        if (!arguments.length) return _clipPadding;
	        _clipPadding = p;
	        return _chart;
	    };

	    function generateClipPath() {
	        var defs = dc.utils.appendOrSelect(_parent, "defs");

	        var chartBodyClip = dc.utils.appendOrSelect(defs, "clipPath").attr("id", getClipPathId());

	        var padding = _clipPadding * 2;

	        dc.utils.appendOrSelect(chartBodyClip, "rect")
	            .attr("width", _chart.xAxisLength() + padding)
	            .attr("height", _chart.yAxisHeight() + padding);
	    }

	    _chart._preprocessData = function() {};

	    _chart._doRender = function () {
	        _chart.resetSvg();

	        _chart._preprocessData();

	        _chart._generateG();
	        generateClipPath();

	        drawChart(true);

	        configureMouseZoom();

	        return _chart;
	    };

	    _chart._doRedraw = function () {
	        _chart._preprocessData();

	        drawChart(false);

	        return _chart;
	    };

	    function drawChart (render) {
	        if (_chart.isOrdinal())
	            _brushOn = false;

	        prepareXAxis(_chart.g());
	        _chart._prepareYAxis(_chart.g());

	        _chart.plotData();

	        if (_chart.elasticX() || _refocused || render)
	            _chart.renderXAxis(_chart.g());

	        if (_chart.elasticY() || render)
	            _chart.renderYAxis(_chart.g());

	        if (render)
	            _chart.renderBrush(_chart.g());
	        else
	            _chart.redrawBrush(_chart.g());
	    }

	    function configureMouseZoom () {
	        if (_mouseZoomable) {
	            _chart._enableMouseZoom();
	        }
	        else if (_hasBeenMouseZoomable) {
	            _chart._disableMouseZoom();
	        }
	    }

	    _chart._enableMouseZoom = function () {
	        _hasBeenMouseZoomable = true;
	        _zoom.x(_chart.x())
	            .scaleExtent(_zoomScale)
	            .size([_chart.width(),_chart.height()]);
	        _chart.root().call(_zoom);
	    };

	    _chart._disableMouseZoom = function () {
	        _chart.root().call(_nullZoom);
	    };

	    function zoomHandler() {
	        _refocused = true;
	        if (_zoomOutRestrict) {
	            _chart.x().domain(constrainRange(_chart.x().domain(), _xOriginalDomain));
	            if (_rangeChart) {
	                _chart.x().domain(constrainRange(_chart.x().domain(), _rangeChart.x().domain()));
	            }
	        }

	        var domain = _chart.x().domain();
	        var domFilter = dc.filters.RangedFilter(domain[0], domain[1]);

	        _chart.replaceFilter(domFilter);
	        _chart.rescale();
	        _chart.redraw();

	        if (_rangeChart && !rangesEqual(_chart.filter(), _rangeChart.filter())) {
	            dc.events.trigger( function () {
	                _rangeChart.replaceFilter(domFilter);
	                _rangeChart.redraw();
	            });
	        }

	        _chart._invokeZoomedListener();

	        dc.events.trigger(function () {
	            _chart.redrawGroup();
	        }, dc.constants.EVENT_DELAY);

	        _refocused = !rangesEqual(domain, _xOriginalDomain);
	    }

	    function constrainRange(range, constraint) {
	        var constrainedRange = [];
	        constrainedRange[0] = d3.max([range[0], constraint[0]]);
	        constrainedRange[1] = d3.min([range[1], constraint[1]]);
	        return constrainedRange;
	    }

	    /**
	    #### .focus([range])
	    Zoom this chart to focus on the given range. The given range should be an array containing only
	    2 elements (`[start, end]`) defining a range in the x domain. If the range is not given or set
	    to null, then the zoom will be reset. _For focus to work elasticX has to be turned off;
	    otherwise focus will be ignored._
	    ```js
	    chart.renderlet(function(chart){
	        // smooth the rendering through event throttling
	        dc.events.trigger(function(){
	            // focus some other chart to the range selected by user on this chart
	            someOtherChart.focus(chart.filter());
	        });
	    })
	    ```

	    **/
	    _chart.focus = function (range) {
	        if (hasRangeSelected(range))
	            _chart.x().domain(range);
	        else
	            _chart.x().domain(_xOriginalDomain);

	        _zoom.x(_chart.x());
	        zoomHandler();
	    };

	    _chart.refocused = function () {
	        return _refocused;
	    };

	    _chart.focusChart = function (c) {
	        if (!arguments.length) return _focusChart;
	        _focusChart = c;
	        _chart.on("filtered", function (chart) {
	            if (!chart.filter()) {
	                dc.events.trigger(function() {
	                    _focusChart.x().domain(_focusChart.xOriginalDomain());
	                });
	            } else if (!rangesEqual(chart.filter(), _focusChart.filter())) {
	                dc.events.trigger(function () {
	                    _focusChart.focus(chart.filter());
	                });
	            }
	        });
	        return _chart;
	    };

	    function rangesEqual(range1, range2) {
	        if (!range1 && !range2) {
	            return true;
	        }
	        else if (!range1 || !range2) {
	            return false;
	        }
	        else if (range1.length === 0 && range2.length === 0) {
	            return true;
	        }
	        else if (range1[0].valueOf() === range2[0].valueOf() &&
	            range1[1].valueOf() === range2[1].valueOf()) {
	            return true;
	        }
	        else return false;
	    }

	    /**
	    #### .brushOn([boolean])
	    Turn on/off the brush-based range filter. When brushing is on then user can drag the mouse
	    across a chart with a quantitative scale to perform range filtering based on the extent of the
	    brush, or click on the bars of an ordinal bar chart or slices of a pie chart to filter and
	    unfilter them. However turning on the brush filter will disable other interactive elements on
	    the chart such as highlighting, tool tips, and reference lines. Zooming will still be possible
	    if enabled, but only via scrolling (panning will be disabled.) Default: true

	    **/
	    _chart.brushOn = function (_) {
	        if (!arguments.length) return _brushOn;
	        _brushOn = _;
	        return _chart;
	    };

	    function hasRangeSelected(range) {
	        return range instanceof Array && range.length > 1;
	    }

	    return _chart;
	};

	/**
	## Stack Mixin

	Stack Mixin is an mixin that provides cross-chart support of stackability using d3.layout.stack.

	**/
	dc.stackMixin = function (_chart) {

	    var _stackLayout = d3.layout.stack()
	        .values(prepareValues);

	    var _stack = [];
	    var _titles = {};

	    var _hidableStacks = false;

	    function prepareValues(layer, layerIdx) {
	        var valAccessor = layer.accessor || _chart.valueAccessor();
	        layer.name = String(layer.name || layerIdx);
	        layer.values = layer.group.all().map(function(d,i) {
	            return {x: _chart.keyAccessor()(d,i),
	                    y: layer.hidden ? null : valAccessor(d,i),
	                    data: d,
	                    layer: layer.name,
	                    hidden: layer.hidden};
	        });

	        layer.values = layer.values.filter(domainFilter());
	        return layer.values;
	    }

	    function domainFilter() {
	        if (!_chart.x()) return d3.functor(true);
	        var xDomain = _chart.x().domain();
	        if (_chart.isOrdinal()) {
	            // TODO #416
	            //var domainSet = d3.set(xDomain);
	            return function(p) {
	                return true; //domainSet.has(p.x);
	            };
	        }
	        if (_chart.elasticX()) {
	            return function() { return true; };
	        }
	        return function(p) {
	            //return true;
	            return p.x >= xDomain[0] && p.x <= xDomain[xDomain.length-1];
	        };
	    }

	    /**
	    #### .stack(group[, name, accessor])
	    Stack a new crossfilter group onto this chart with an optional custom value accessor. All stacks
	    in the same chart will share the same key accessor and therefore the same set of keys.

	    For example, in a stacked bar chart, the bars of each stack will be positioned using the same set
	    of keys on the x axis, while stacked vertically. If name is specified then it will be used to
	    generate the legend label.
	    ```js
	    // stack group using default accessor
	    chart.stack(valueSumGroup)
	    // stack group using custom accessor
	    .stack(avgByDayGroup, function(d){return d.value.avgByDay;});
	    ```

	    **/
	    _chart.stack = function (group, name, accessor) {
	        if (!arguments.length) return _stack;

	        if (arguments.length <= 2)
	            accessor = name;

	        var layer = {group:group};
	        if (typeof name === 'string') layer.name = name;
	        if (typeof accessor === 'function') layer.accessor = accessor;
	        _stack.push(layer);

	        return _chart;
	    };

	    dc.override(_chart,'group', function (g,n,f) {
	        if (!arguments.length) return _chart._group();
	        _stack = [];
	        _titles = {};
	        _chart.stack(g,n);
	        if (f) _chart.valueAccessor(f);
	        return _chart._group(g,n);
	    });

	    /**
	    #### .hidableStacks([boolean])
	    Allow named stacks to be hidden or shown by clicking on legend items.
	    This does not affect the behavior of hideStack or showStack.

	    **/
	    _chart.hidableStacks = function(_) {
	        if (!arguments.length) return _hidableStacks;
	        _hidableStacks = _;
	        return _chart;
	    };

	    function findLayerByName(n) {
	        var i = _stack.map(dc.pluck('name')).indexOf(n);
	        return _stack[i];
	    }

	    /**
	    #### .hideStack(name)
	    Hide all stacks on the chart with the given name.
	    The chart must be re-rendered for this change to appear.

	    **/
	    _chart.hideStack = function (stackName) {
	        var layer = findLayerByName(stackName);
	        if (layer) layer.hidden = true;
	        return _chart;
	    };

	    /**
	    #### .showStack(name)
	    Show all stacks on the chart with the given name.
	    The chart must be re-rendered for this change to appear.

	    **/
	    _chart.showStack = function (stackName) {
	        var layer = findLayerByName(stackName);
	        if (layer) layer.hidden = false;
	        return _chart;
	    };

	    _chart.getValueAccessorByIndex = function (index) {
	        return _stack[index].accessor || _chart.valueAccessor();
	    };

	    _chart.yAxisMin = function () {
	        var min = d3.min(flattenStack(), function (p) {
	            return (p.y + p.y0 < p.y0) ? (p.y + p.y0) : p.y0;
	        });

	        return dc.utils.subtract(min, _chart.yAxisPadding());

	    };

	    _chart.yAxisMax = function () {
	        var max = d3.max(flattenStack(), function (p) {
	            return p.y + p.y0;
	        });

	        return dc.utils.add(max, _chart.yAxisPadding());
	    };

	    function flattenStack() {
	        return _chart.data().reduce(function(all,layer) {
	            return all.concat(layer.values);
	        },[]);
	    }

	    _chart.xAxisMin = function () {
	        var min = d3.min(flattenStack(), dc.pluck('x'));
	        return dc.utils.subtract(min, _chart.xAxisPadding());
	    };

	    _chart.xAxisMax = function () {
	        var max = d3.max(flattenStack(), dc.pluck('x'));
	        return dc.utils.add(max, _chart.xAxisPadding());
	    };

	    /**
	    #### .title([stackName], [titleFunction])
	    Set or get the title function. Chart class will use this function to render svg title (usually interpreted by browser
	    as tooltips) for each child element in the chart, i.e. a slice in a pie chart or a bubble in a bubble chart. Almost
	    every chart supports title function however in grid coordinate chart you need to turn off brush in order to use title
	    otherwise the brush layer will block tooltip trigger.

	    If the first argument is a stack name, the title function will get or set the title for that stack. If stackName
	    is not provided, the first stack is implied.
	    ```js
	    // set a title function on "first stack"
	    chart.title("first stack", function(d) { return d.key + ": " + d.value; });
	    // get a title function from "second stack"
	    var secondTitleFunction = chart.title("second stack");
	    );
	    ```
	    **/
	    dc.override(_chart, "title", function (stackName, titleAccessor) {
	        if (!stackName) return _chart._title();

	        if (typeof stackName === 'function') return _chart._title(stackName);
	        if (stackName == _chart._groupName && typeof titleAccessor === 'function')
	            return _chart._title(titleAccessor);

	        if (typeof titleAccessor !== 'function') return _titles[stackName] || _chart._title();

	        _titles[stackName] = titleAccessor;

	        return _chart;
	    });

	    /**
	     #### .stackLayout([layout])
	     Gets or sets the stack layout algorithm, which computes a baseline for each stack and
	     propagates it to the next.  The default is
	     [d3.layout.stack](https://github.com/mbostock/d3/wiki/Stack-Layout#stack).
	     **/
	    _chart.stackLayout = function (stack) {
	        if (!arguments.length) return _stackLayout;
	        _stackLayout = stack;
	        return _chart;
	    };

	    function visability(l) {
	        return !l.hidden;
	    }

	    _chart.data(function() {
	        var layers = _stack.filter(visability);
	        return layers.length ? _chart.stackLayout()(layers) : [];
	    });

	    _chart._ordinalXDomain = function () {
	        return flattenStack().map(dc.pluck('x'));
	    };

	    _chart.colorAccessor(function (d) {
	        var layer = this.layer || this.name || d.name || d.layer;
	        return layer;
	    });

	    _chart.legendables = function () {
	        return _stack.map(function (layer, i) {
	            return {chart:_chart, name:layer.name, hidden: layer.hidden || false, color:_chart.getColor.call(layer,layer.values,i)};
	        });
	    };

	    _chart.isLegendableHidden = function (d) {
	        var layer = findLayerByName(d.name);
	        return layer ? layer.hidden : false;
	    };

	    _chart.legendToggle = function (d) {
	        if(_hidableStacks) {
	            if (_chart.isLegendableHidden(d)) _chart.showStack(d.name);
	            else _chart.hideStack(d.name);
	            //_chart.redraw();
	            _chart.renderGroup();
	        }
	    };

	    return _chart;
	};

	/**
	## Cap Mixin

	Cap is a mixin that groups small data elements below a _cap_ into an *others* grouping for both the
	Row and Pie Charts.

	The top ordered elements in the group up to the cap amount will be kept in the chart, and the rest
	will be replaced with an *others* element, with value equal to the sum of the replaced values. The
	keys of the elements below the cap limit are recorded in order to filter by those keys when the
	*others* element is clicked.

	**/
	dc.capMixin = function (_chart) {

	    var _cap = Infinity;

	    var _othersLabel = "Others";

	    var _othersGrouper = function (topRows) {
	        var topRowsSum = d3.sum(topRows, _chart.valueAccessor()),
	            allRows = _chart.group().all(),
	            allRowsSum = d3.sum(allRows, _chart.valueAccessor()),
	            topKeys = topRows.map(_chart.keyAccessor()),
	            allKeys = allRows.map(_chart.keyAccessor()),
	            topSet = d3.set(topKeys),
	            others = allKeys.filter(function(d){return !topSet.has(d);});
	        if (allRowsSum > topRowsSum)
	            return topRows.concat([{"others": others, "key": _othersLabel, "value": allRowsSum - topRowsSum}]);
	        return topRows;
	    };

	    _chart.cappedKeyAccessor = function(d,i) {
	        if (d.others)
	            return d.key;
	        return _chart.keyAccessor()(d,i);
	    };

	    _chart.cappedValueAccessor = function(d,i) {
	        if (d.others)
	            return d.value;
	        return _chart.valueAccessor()(d,i);
	    };

	    _chart.data(function(group) {
	        if (_cap == Infinity) {
	            return _chart._computeOrderedGroups(group.all());
	        } else {
	            var topRows = group.top(_cap); // ordered by crossfilter group order (default value)
	            topRows = _chart._computeOrderedGroups(topRows); // re-order using ordering (default key)
	            if (_othersGrouper) return _othersGrouper(topRows);
	            return topRows;
	        }
	    });

	    /**
	    #### .cap([count])
	    Get or set the count of elements to that will be included in the cap.
	    **/
	    _chart.cap = function (_) {
	        if (!arguments.length) return _cap;
	        _cap = _;
	        return _chart;
	    };

	    /**
	    #### .othersLabel([label])
	    Get or set the label for *Others* slice when slices cap is specified. Default label is **Others**.
	    **/
	    _chart.othersLabel = function (_) {
	        if (!arguments.length) return _othersLabel;
	        _othersLabel = _;
	        return _chart;
	    };

	    /**
	    #### .othersGrouper([grouperFunction])
	    Get or set the grouper function that will perform the insertion of data for the *Others* slice
	    if the slices cap is specified. If set to a falsy value, no others will be added. By default the
	    grouper function computes the sum of all values below the cap.
	    ```js
	    chart.othersGrouper(function (data) {
	        // compute the value for others, presumably the sum of all values below the cap
	        var othersSum  = yourComputeOthersValueLogic(data)

	        // the keys are needed to properly filter when the others element is clicked
	        var othersKeys = yourComputeOthersKeysArrayLogic(data);

	        // add the others row to the dataset
	        data.push({"key": "Others", "value": othersSum, "others": othersKeys });

	        return data;
	    });
	    ```
	    **/
	    _chart.othersGrouper = function (_) {
	        if (!arguments.length) return _othersGrouper;
	        _othersGrouper = _;
	        return _chart;
	    };

	    dc.override(_chart, "onClick", function (d) {
	        if (d.others)
	            _chart.filter([d.others]);
	        _chart._onClick(d);
	    });

	    return _chart;
	};

	/**
	## Bubble Mixin

	Includes: [Color Mixin](#color-mixin)

	This Mixin provides reusable functionalities for any chart that needs to visualize data using bubbles.

	**/
	dc.bubbleMixin = function (_chart) {
	    var _maxBubbleRelativeSize = 0.3;
	    var _minRadiusWithLabel = 10;

	    _chart.BUBBLE_NODE_CLASS = "node";
	    _chart.BUBBLE_CLASS = "bubble";
	    _chart.MIN_RADIUS = 10;

	    _chart = dc.colorMixin(_chart);

	    _chart.renderLabel(true);
	    _chart.renderTitle(false);

	    _chart.data(function(group) {
	        return group.top(Infinity);
	    });

	    var _r = d3.scale.linear().domain([0, 100]);

	    var _rValueAccessor = function (d) {
	        return d.r;
	    };

	    /**
	    #### .r([bubbleRadiusScale])
	    Get or set the bubble radius scale. By default the bubble chart uses
	    `d3.scale.linear().domain([0, 100])` as its r scale .

	    **/
	    _chart.r = function (_) {
	        if (!arguments.length) return _r;
	        _r = _;
	        return _chart;
	    };

	    /**
	    #### .radiusValueAccessor([radiusValueAccessor])
	    Get or set the radius value accessor function. If set, the radius value accessor function will
	    be used to retrieve a data value for each bubble. The data retrieved then will be mapped using
	    the r scale to the actual bubble radius. This allows you to encode a data dimension using bubble
	    size.

	    **/
	    _chart.radiusValueAccessor = function (_) {
	        if (!arguments.length) return _rValueAccessor;
	        _rValueAccessor = _;
	        return _chart;
	    };

	    _chart.rMin = function () {
	        var min = d3.min(_chart.data(), function (e) {
	            return _chart.radiusValueAccessor()(e);
	        });
	        return min;
	    };

	    _chart.rMax = function () {
	        var max = d3.max(_chart.data(), function (e) {
	            return _chart.radiusValueAccessor()(e);
	        });
	        return max;
	    };

	    _chart.bubbleR = function (d) {
	        var value = _chart.radiusValueAccessor()(d);
	        var r = _chart.r()(value);
	        if (isNaN(r) || value <= 0)
	            r = 0;
	        return r;
	    };

	    var labelFunction = function (d) {
	        return _chart.label()(d);
	    };

	    var labelOpacity = function (d) {
	        return (_chart.bubbleR(d) > _minRadiusWithLabel) ? 1 : 0;
	    };

	    _chart._doRenderLabel = function (bubbleGEnter) {
	        if (_chart.renderLabel()) {
	            var label = bubbleGEnter.select("text");

	            if (label.empty()) {
	                label = bubbleGEnter.append("text")
	                    .attr("text-anchor", "middle")
	                    .attr("dy", ".3em")
	                    .on("click", _chart.onClick);
	            }

	            label
	                .attr("opacity", 0)
	                .text(labelFunction);
	            dc.transition(label, _chart.transitionDuration())
	                .attr("opacity", labelOpacity);
	        }
	    };

	    _chart.doUpdateLabels = function (bubbleGEnter) {
	        if (_chart.renderLabel()) {
	            var labels = bubbleGEnter.selectAll("text")
	                .text(labelFunction);
	            dc.transition(labels, _chart.transitionDuration())
	                .attr("opacity", labelOpacity);
	        }
	    };

	    var titleFunction = function (d) {
	        return _chart.title()(d);
	    };

	    _chart._doRenderTitles = function (g) {
	        if (_chart.renderTitle()) {
	            var title = g.select("title");

	            if (title.empty())
	                g.append("title").text(titleFunction);
	        }
	    };

	    _chart.doUpdateTitles = function (g) {
	        if (_chart.renderTitle()) {
	            g.selectAll("title").text(titleFunction);
	        }
	    };

	    /**
	    #### .minRadiusWithLabel([radius])
	    Get or set the minimum radius for label rendering. If a bubble's radius is less than this value
	    then no label will be rendered.  Default: 10

	    **/
	    _chart.minRadiusWithLabel = function (_) {
	        if (!arguments.length) return _minRadiusWithLabel;
	        _minRadiusWithLabel = _;
	        return _chart;
	    };

	    /**
	    #### .maxBubbleRelativeSize([relativeSize])
	    Get or set the maximum relative size of a bubble to the length of x axis. This value is useful
	    when the difference in radius between bubbles is too great. Default: 0.3

	    **/
	    _chart.maxBubbleRelativeSize = function (_) {
	        if (!arguments.length) return _maxBubbleRelativeSize;
	        _maxBubbleRelativeSize = _;
	        return _chart;
	    };

	    _chart.fadeDeselectedArea = function () {
	        if (_chart.hasFilter()) {
	            _chart.selectAll("g." + _chart.BUBBLE_NODE_CLASS).each(function (d) {
	                if (_chart.isSelectedNode(d)) {
	                    _chart.highlightSelected(this);
	                } else {
	                    _chart.fadeDeselected(this);
	                }
	            });
	        } else {
	            _chart.selectAll("g." + _chart.BUBBLE_NODE_CLASS).each(function (d) {
	                _chart.resetHighlight(this);
	            });
	        }
	    };

	    _chart.isSelectedNode = function (d) {
	        return _chart.hasFilter(d.key);
	    };

	    _chart.onClick = function (d) {
	        var filter = d.key;
	        dc.events.trigger(function () {
	            _chart.filter(filter);
	            _chart.redrawGroup();
	        });
	    };

	    return _chart;
	};

	/**
	## Hierarchy Mixin

	The Hierarchy Mixin provides support for hierarchical multi dimensional filtering. This means that we can use dimensions
	in hierarchichal or tree like fashion. Example uses for this would be the Sankey and the Treemap.

	**/

	dc.hierarchyMixin = function(_chart) {
		var _levels = [], _measureColumn, _filters = {};

	    var _filterHandler = function (dimension, filters) {
	        dimension.filter(null);

	        if (filters.length === 0)
	            dimension.filter(null);
	        else
	            dimension.filterFunction(function (d) {
	                for(var i = 0; i < filters.length; i++) {
	                    var filter = filters[i];
	                    if (filter.isFiltered && filter.isFiltered(d)) {
	                        return true;
	                    } else if (filter <= d && filter >= d) {
	                        return true;
	                    }
	                }
	                return false;
	            });

	        return filters;
	    };

	    /**
	    #### .hasFilter(columnName, filterValue)
	    Specify the dimension that goes along with the filter by providing columnName as the key corresponding to a key in your levels object.
	    **/
	    _chart.hasFilter = function (columnName, filterValue) {
	        if(!arguments.length) {
	            if(Object.keys(_filters).length === 0) {
	                return false;
	            }
	            else //check that the filterValues has any filter values added for any dimensions
	            {
	                return Object.keys(_filters).some(function(columnName) {
	                    var filterValues = _filters[columnName].filterValues;
	                    return filterValues.length > 0;
	                });
	            }
	        }

	        if(!filterValue) {
	            return _filters[columnName] && _filters[columnName].filterValues && !!_filters[columnName].filterValues.length;
	        }

	        return (_filters[columnName]) ? 
	                    _filters[columnName].filterValues.some(function(f) {return f === filterValue;}) : false;
	    };

	    function removeFilter(columnName, filterValue) {
	        var dimension = _chart.lookupDimension(columnName);
	        _filters[columnName].filterValues.forEach(function(f, index) {
	            if(f === filterValue) {
	                var removedFilter = _filters[columnName].filterValues.splice(index, 1);
	            }
	        });
	        applyFilters();
	        _chart._invokeFilteredListener(dimension);
	    }

	    function addFilter(columnName, filterValue) {
	        //important that this dimension is a function so it gets returned dynamically
	        var dimension = function() {return _chart.lookupDimension(columnName);};
	        if(!_filters[columnName]){
	            _filters[columnName] = {'dimension' : dimension, 'filterValues': []};
	        }
	        
	        _filters[columnName].filterValues.push(filterValue);

	        applyFilters();
	        _chart._invokeFilteredListener(dimension);
	    }

	    function resetFilters() {
	        _filters = {};
	        applyFilters();
	        _chart._invokeFilteredListener(null);
	    }

	    //Important function changes for looping through dimensions
	    //and applying the filter handler
	    function applyFilters() {
	        Object.keys(_filters).forEach(function(columnName) {
	            var filterValues = _filters[columnName].filterValues;
	            var keyDimension = _filters[columnName].dimension();
	            var fs = _filterHandler(keyDimension, filterValues);
	            _filters[columnName].filterValues = fs ? fs : filterValues;
	        });
	    }

	    _chart.replaceFilter = function(columnName, filterValue) {
	        _filters[columnName].filterValues = [];
	        _charts.filter(columnName, filterValue);
	    };

	    /**
	    #### .filter(columnName, filterValues)
	    Filter the chart by specifying the column name and filter values.
	    This differs from the normal chart.filter("value") api that comes with Base mixin.
	    Returns the _filters object containing all of the specified dimensions and filters.
	    ```js
	    //filter on a dimension with a string
	    chart.filter("csvColumnforRegion", "West");
	    ```js
	    **/
	    _chart.filter = function(columnName, filterValue) {
	        if(!arguments.length) return _filters;
	        if(_chart.hasFilter(columnName, filterValue)) {
	            removeFilter(columnName, filterValue);
	        }
	        else {
	            addFilter(columnName, filterValue);
	        }
	    };

	    _chart.filterAll = function(columnName) {
	        if (!arguments.length){
	            Object.keys(_filters).forEach(function(columnName) {
	                _filters[columnName].filterValues = [];
	                var keyDimension = _filters[columnName].dimension();
	                applyFilters();
	                _chart._invokeFilteredListener(keyDimension);
	            }); 
	        }
	        else {
	            _chart.filterAllForLevel(columnName);
	        }
	        
	        
	    };

	    _chart.filterAllForLevel = function(columnName) {
	        if(_filters[columnName]) {
	            _filters[columnName].filterValues = [];
	            var keyDimension = _filters[columnName].dimension;
	            applyFilters();
	            _chart._invokeFilteredListener(keyDimension);
	        }
	        
	    };

	    _chart.filters = function(columnName) {
	        if (!arguments.length) return _filters;
	        return _filters[columnName].filterValues;
	    };

	    _chart.lookupDimension = function(d) {
	        var dimension ='';
	        _levels.forEach(function(level) {
	            if(level.columnName === d) {
	                dimension = level.dimension;
	            }
	        });
	        return dimension;
	    };

	    _chart._mandatoryAttributes([]);

	    /**
	    #### .levels([{dimension: someDimension, columnName: "column"}]) 
	    Pass in an array of objects containing a dimension and corresponding column name
	    **/
	    _chart.levels = function(_) {
	        if(!arguments.length) return _levels;
	        _levels = _;
	        return _chart;
	    };

	    /**
	    #### .measureColumn([String]) 
	    Set the column name that contains the measure value for the chart. 
	    **/
	    _chart.measureColumn = function(_) {
	        if(!arguments.length) return _measureColumn;
	        _measureColumn = _;
	        return _chart;
	    };

	    _chart.initData = function () {
	        //do nothing in hierarchy mixin, should be overridden by sub-function
	        //The hierarchical data is not a good fit for crossfilter, so this function
	        //should be used to translate tabular crossfilter data into your own hierarchical data structure. 
	        return _chart;
	    };



		return _chart;
	};
	/**
	## Pie Chart

	Includes: [Cap Mixin](#cap-mixin), [Color Mixin](#color-mixin), [Base Mixin](#base-mixin)

	The pie chart implementation is usually used to visualize a small categorical distribution.  The pie
	chart uses keyAccessor to determine the slices, and valueAccessor to calculate the size of each
	slice relative to the sum of all values. Slices are ordered by `.ordering` which defaults to sorting
	by key.

	Examples:

	* [Nasdaq 100 Index](http://dc-js.github.com/dc.js/)

	#### dc.pieChart(parent[, chartGroup])
	Create a pie chart instance and attaches it to the given parent element.

	Parameters:

	* parent : string | node | selection - any valid
	 [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying
	 a dom block element such as a div; or a dom element or d3 selection.

	* chartGroup : string (optional) - name of the chart group this chart instance should be placed in.
	 Interaction with a chart will only trigger events and redraws within the chart's group.

	Returns:
	A newly created pie chart instance

	```js
	// create a pie chart under #chart-container1 element using the default global chart group
	var chart1 = dc.pieChart("#chart-container1");
	// create a pie chart under #chart-container2 element using chart group A
	var chart2 = dc.pieChart("#chart-container2", "chartGroupA");
	```

	**/
	dc.pieChart = function (parent, chartGroup) {
	    var DEFAULT_MIN_ANGLE_FOR_LABEL = 0.5;

	    var _sliceCssClass = "pie-slice";
	    var _emptyCssClass = "empty-chart";
	    var _emptyTitle = "empty";

	    var _radius,
	        _innerRadius = 0;

	    var _g;
	    
	    var _cx;

	    var _cy;

	    var _minAngleForLabel = DEFAULT_MIN_ANGLE_FOR_LABEL;

	    var _externalLabelRadius;

	    var _chart = dc.capMixin(dc.colorMixin(dc.baseMixin({})));

	    _chart.colorAccessor(_chart.cappedKeyAccessor);

	    _chart.title(function (d) {
	        return _chart.cappedKeyAccessor(d) + ": " + _chart.cappedValueAccessor(d);
	    });

	    /**
	    #### .slicesCap([cap])
	    Get or set the maximum number of slices the pie chart will generate. The top slices are determined by
	    value from high to low. Other slices exeeding the cap will be rolled up into one single *Others* slice.
	    The resulting data will still be sorted by .ordering (default by key).

	    **/
	    _chart.slicesCap = _chart.cap;

	    _chart.label(_chart.cappedKeyAccessor);
	    _chart.renderLabel(true);

	    _chart.transitionDuration(350);

	    _chart._doRender = function () {
	        _chart.resetSvg();

	        _g = _chart.svg()
	            .append("g")
	            .attr("transform", "translate(" + _chart.cx() + "," + _chart.cy() + ")");

	        drawChart();

	        return _chart;
	    };

	    function drawChart() {
	        // set radius on basis of chart dimension if missing
	        _radius = _radius ? _radius : d3.min([_chart.width(), _chart.height()]) /2;

	        var arc = buildArcs();

	        var pie = pieLayout();
	        var pieData;
	        // if we have data...
	        if(d3.sum(_chart.data(), _chart.valueAccessor())) {
	            pieData = pie(_chart.data());
	            _g.classed(_emptyCssClass, false);
	        } else {
	            // otherwise we'd be getting NaNs, so override
	            // note: abuse others for its ignoring the value accessor
	            pieData = pie([{key:_emptyTitle, value:1, others: [_emptyTitle]}]);
	            _g.classed(_emptyCssClass, true);
	        }

	        if (_g) {
	            var slices = _g.selectAll("g." + _sliceCssClass)
	                .data(pieData);

	            createElements(slices, arc, pieData);

	            updateElements(pieData, arc);

	            removeElements(slices);

	            highlightFilter();
	        }
	    }

	    function createElements(slices, arc, pieData) {
	        var slicesEnter = createSliceNodes(slices);

	        createSlicePath(slicesEnter, arc);

	        createTitles(slicesEnter);

	        createLabels(pieData, arc);
	    }

	    function createSliceNodes(slices) {
	        var slicesEnter = slices
	            .enter()
	            .append("g")
	            .attr("class", function (d, i) {
	                return _sliceCssClass + " _" + i;
	            });
	        return slicesEnter;
	    }

	    function createSlicePath(slicesEnter, arc) {
	        var slicePath = slicesEnter.append("path")
	            .attr("fill", fill)
	            .on("click", onClick)
	            .attr("d", function (d, i) {
	                return safeArc(d, i, arc);
	            });

	        dc.transition(slicePath, _chart.transitionDuration(), function (s) {
	            s.attrTween("d", tweenPie);
	        });
	    }

	    function createTitles(slicesEnter) {
	        if (_chart.renderTitle()) {
	            slicesEnter.append("title").text(function (d) {
	                return _chart.title()(d);
	            });
	        }
	    }

	    function positionLabels(labelsEnter, arc) {
	        dc.transition(labelsEnter, _chart.transitionDuration())
	            .attr("transform", function (d) {
	                return labelPosition(d, arc);
	            })
	            .attr("text-anchor", "middle")
	            .text(function (d) {
	                var data = d.data;
	                if (sliceHasNoData(data) || sliceTooSmall(d))
	                    return "";
	                return _chart.label()(d.data);
	            });
	    }

	    function createLabels(pieData, arc) {
	        if (_chart.renderLabel()) {
	            var labels = _g.selectAll("text." + _sliceCssClass)
	                .data(pieData);

	            labels.exit().remove();

	            var labelsEnter = labels
	                .enter()
	                .append("text")
	                .attr("class", function (d, i) {
	                    var classes = _sliceCssClass + " _" + i;
	                    if(_externalLabelRadius)
	                        classes += " external";
	                    return classes;
	                })
	                .on("click", onClick);
	            positionLabels(labelsEnter, arc);
	        }
	    }

	    function updateElements(pieData, arc) {
	        updateSlicePaths(pieData, arc);
	        updateLabels(pieData, arc);
	        updateTitles(pieData);
	    }

	    function updateSlicePaths(pieData, arc) {
	        var slicePaths = _g.selectAll("g." + _sliceCssClass)
	            .data(pieData)
	            .select("path")
	            .attr("d", function (d, i) {
	                return safeArc(d, i, arc);
	            });
	        dc.transition(slicePaths, _chart.transitionDuration(),
	            function (s) {
	                s.attrTween("d", tweenPie);
	            }).attr("fill", fill);
	    }

	    function updateLabels(pieData, arc) {
	        if (_chart.renderLabel()) {
	            var labels = _g.selectAll("text." + _sliceCssClass)
	                .data(pieData);
	            positionLabels(labels, arc);
	        }
	    }

	    function updateTitles(pieData) {
	        if (_chart.renderTitle()) {
	            _g.selectAll("g." + _sliceCssClass)
	                .data(pieData)
	                .select("title")
	                .text(function (d) {
	                    return _chart.title()(d.data);
	                });
	        }
	    }

	    function removeElements(slices) {
	        slices.exit().remove();
	    }

	    function highlightFilter() {
	        if (_chart.hasFilter()) {
	            _chart.selectAll("g." + _sliceCssClass).each(function (d) {
	                if (isSelectedSlice(d)) {
	                    _chart.highlightSelected(this);
	                } else {
	                    _chart.fadeDeselected(this);
	                }
	            });
	        } else {
	            _chart.selectAll("g." + _sliceCssClass).each(function (d) {
	                _chart.resetHighlight(this);
	            });
	        }
	    }

	    /**
	    #### .innerRadius([innerRadius])
	    Get or set the inner radius of the pie chart. If the inner radius is greater than 0px then the
	    pie chart will be rendered as a doughnut chart. Default inner radius is 0px.

	    **/
	    _chart.innerRadius = function (r) {
	        if (!arguments.length) return _innerRadius;
	        _innerRadius = r;
	        return _chart;
	    };

	    /**
	    #### .radius([radius])
	    Get or set the outer radius. Default radius is 90px.

	    **/
	    _chart.radius = function (r) {
	        if (!arguments.length) return _radius;
	        _radius = r;
	        return _chart;
	    };

	    /**
	    #### .cx([cx])
	    Get or set center x coordinate position. Default is center of svg.

	    **/
	    _chart.cx = function (cx) {
	        if (!arguments.length) return (_cx ||  _chart.width() / 2);
	        _cx = cx;
	        return _chart;
	    };

	    /**
	    #### .cy([cy])
	    Get or set center y coordinate position. Default is center of svg.

	    **/
	    _chart.cy = function (cy) {
	        if (!arguments.length) return (_cy ||  _chart.height() / 2);
	        _cy = cy;
	        return _chart;
	    };

	    function buildArcs() {
	        return d3.svg.arc().outerRadius(_radius).innerRadius(_innerRadius);
	    }

	    function isSelectedSlice(d) {
	        return _chart.hasFilter(_chart.cappedKeyAccessor(d.data));
	    }

	    _chart._doRedraw = function () {
	        drawChart();
	        return _chart;
	    };

	    /**
	    #### .minAngleForLabel([minAngle])
	    Get or set the minimal slice angle for label rendering. Any slice with a smaller angle will not
	    display a slice label.  Default min angle is 0.5.
	    **/
	    _chart.minAngleForLabel = function (_) {
	        if (!arguments.length) return _minAngleForLabel;
	        _minAngleForLabel = _;
	        return _chart;
	    };

	    function pieLayout() {
	        return d3.layout.pie().sort(null).value(_chart.cappedValueAccessor);
	    }

	    function sliceTooSmall(d) {
	        var angle = (d.endAngle - d.startAngle);
	        return isNaN(angle) || angle < _minAngleForLabel;
	    }

	    function sliceHasNoData(d) {
	        return _chart.cappedValueAccessor(d) === 0;
	    }

	    function tweenPie(b) {
	        b.innerRadius = _innerRadius;
	        var current = this._current;
	        if (isOffCanvas(current))
	            current = {startAngle: 0, endAngle: 0};
	        var i = d3.interpolate(current, b);
	        this._current = i(0);
	        return function (t) {
	            return safeArc(i(t), 0, buildArcs());
	        };
	    }

	    function isOffCanvas(current) {
	        return !current || isNaN(current.startAngle) || isNaN(current.endAngle);
	    }

	    function fill(d, i) {
	        return _chart.getColor(d.data, i);
	    }

	    function onClick(d, i) {
	        if (_g.attr("class") != _emptyCssClass)
	            _chart.onClick(d.data, i);
	    }

	    function safeArc(d, i, arc) {
	        var path = arc(d, i);
	        if (path.indexOf("NaN") >= 0)
	            path = "M0,0";
	        return path;
	    }

	    /**
	     #### .emptyTitle([title])
	     Title to use for the only slice when there is no data
	     */
	    _chart.emptyTitle = function(title) {
	        if (arguments.length === 0)
	            return _emptyTitle;
	        _emptyTitle = title;
	        return _chart;
	    };

	    /**
	     #### .externalLabels([radius])
	     Position slice labels offset from the outer edge of the chart

	     The given argument sets the radial offset.
	     */
	    _chart.externalLabels = function(radius) {
	        if (arguments.length === 0) {
	            return _externalLabelRadius;
	        } else if(radius) {
	            _externalLabelRadius = radius;
	        } else {
	            _externalLabelRadius = undefined;
	        }

	        return _chart;
	    };

	    function labelPosition(d, arc) {
	        var centroid;
	        if( _externalLabelRadius ) {
	            centroid = d3.svg.arc()
	                .outerRadius(_radius+_externalLabelRadius)
	                .innerRadius(_radius+_externalLabelRadius)
	                .centroid(d);
	        } else {
	            centroid = arc.centroid(d);
	        }
	        if (isNaN(centroid[0]) || isNaN(centroid[1])) {
	            return "translate(0,0)";
	        } else {
	            return "translate(" + centroid + ")";
	        }
	    }

	    _chart.legendables = function() {
	        return _chart.data().map(function (d, i) {
	            var legendable = { name: d.key, data: d.value, others: d.others, chart:_chart };
	            legendable.color = _chart.getColor(d,i);
	            return legendable;
	        });
	    };

	    _chart.legendHighlight = function(d) {
	        highlightSliceFromLegendable(d, true);
	    };

	    _chart.legendReset = function(d) {
	        highlightSliceFromLegendable(d, false);
	    };

	    _chart.legendToggle = function(d) {
	        _chart.onClick({ key: d.name, others: d.others });
	    };

	    function highlightSliceFromLegendable(legendable, highlighted) {
	        _chart.selectAll('g.pie-slice').each(function (d) {
	            if (legendable.name == d.data.key) {
	                d3.select(this).classed("highlight", highlighted);
	            }
	        });
	    }

	    return _chart.anchor(parent, chartGroup);
	};

	/**
	## Bar Chart

	Includes: [Stack Mixin](#stack Mixin), [Coordinate Grid Mixin](#coordinate-grid-mixin)

	Concrete bar chart/histogram implementation.

	Examples:

	* [Nasdaq 100 Index](http://dc-js.github.com/dc.js/)
	* [Canadian City Crime Stats](http://dc-js.github.com/dc.js/crime/index.html)

	#### dc.barChart(parent[, chartGroup])
	Create a bar chart instance and attach it to the given parent element.

	Parameters:
	* parent : string | node | selection | compositeChart - any valid
	 [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying
	 a dom block element such as a div; or a dom element or d3 selection.
	 If the bar chart is a sub-chart in a [Composite Chart](#composite-chart) then pass in the parent composite
	 chart instance.
	* chartGroup : string (optional) - name of the chart group this chart instance should be placed in.
	 Interaction with a chart will only trigger events and redraws within the chart's group.

	Returns:
	A newly created bar chart instance

	```js
	// create a bar chart under #chart-container1 element using the default global chart group
	var chart1 = dc.barChart("#chart-container1");
	// create a bar chart under #chart-container2 element using chart group A
	var chart2 = dc.barChart("#chart-container2", "chartGroupA");
	// create a sub-chart under a composite parent chart
	var chart3 = dc.barChart(compositeChart);
	```

	**/
	dc.barChart = function (parent, chartGroup) {
	    var MIN_BAR_WIDTH = 1;
	    var DEFAULT_GAP_BETWEEN_BARS = 2;

	    var _chart = dc.stackMixin(dc.coordinateGridMixin({}));

	    var _gap = DEFAULT_GAP_BETWEEN_BARS;
	    var _centerBar = false;
	    var _alwaysUseRounding = false;

	    var _barWidth;

	    dc.override(_chart, 'rescale', function () {
	        _chart._rescale();
	        _barWidth = undefined;
	    });

	    dc.override(_chart, 'render', function () {
	        if (_chart.round() && _centerBar && !_alwaysUseRounding) {
	            dc.logger.warn("By default, brush rounding is disabled if bars are centered. " +
	                         "See dc.js bar chart API documentation for details.");
	        }

	        _chart._render();
	    });

	    _chart.plotData = function () {
	        var layers = _chart.chartBodyG().selectAll("g.stack")
	            .data(_chart.data());

	        calculateBarWidth();

	        layers
	            .enter()
	            .append("g")
	            .attr("class", function (d, i) {
	                return "stack " + "_" + i;
	            });

	        layers.each(function (d, i) {
	            var layer = d3.select(this);

	            renderBars(layer, i, d);
	        });
	    };

	    function barHeight(d) {
	        return dc.utils.safeNumber(Math.abs(_chart.y()(d.y + d.y0) - _chart.y()(d.y0)));
	    }

	    function renderBars(layer, layerIndex, d) {
	        var bars = layer.selectAll("rect.bar")
	            .data(d.values, dc.pluck('x'));

	        var enter = bars.enter()
	            .append("rect")
	            .attr("class", "bar")
	            .attr("fill", dc.pluck('data',_chart.getColor))
	            .attr("height", 0);

	        if (_chart.renderTitle())
	            enter.append("title").text(dc.pluck('data',_chart.title(d.name)));

	        if (_chart.isOrdinal())
	            bars.on("click", onClick);

	        dc.transition(bars, _chart.transitionDuration())
	            .attr("x", function (d) {
	                var x = _chart.x()(d.x);
	                if (_centerBar) x -= _barWidth / 2;
	                if (_chart.isOrdinal() && _gap!==undefined) x += _gap/2;
	                return dc.utils.safeNumber(x);
	            })
	            .attr("y", function (d) {
	                var y = _chart.y()(d.y + d.y0);

	                if (d.y < 0)
	                    y -= barHeight(d);

	                return dc.utils.safeNumber(y);
	            })
	            .attr("width", _barWidth)
	            .attr("height", function (d) {
	                return barHeight(d);
	            })
	            .attr("fill", dc.pluck('data',_chart.getColor))
	            .select("title").text(dc.pluck('data',_chart.title(d.name)));

	        dc.transition(bars.exit(), _chart.transitionDuration())
	            .attr("height", 0)
	            .remove();
	    }

	    function calculateBarWidth() {
	        if (_barWidth === undefined) {
	            var numberOfBars = _chart.xUnitCount();

	            // please can't we always use rangeBands for bar charts?
	            if (_chart.isOrdinal() && _gap===undefined)
	                _barWidth = Math.floor(_chart.x().rangeBand());
	            else if (_gap)
	                _barWidth = Math.floor((_chart.xAxisLength() - (numberOfBars - 1) * _gap) / numberOfBars);
	            else
	                _barWidth = Math.floor(_chart.xAxisLength() / (1 + _chart.barPadding()) / numberOfBars);

	            if (_barWidth == Infinity || isNaN(_barWidth) || _barWidth < MIN_BAR_WIDTH)
	                _barWidth = MIN_BAR_WIDTH;
	        }
	    }

	    _chart.fadeDeselectedArea = function () {
	        var bars = _chart.chartBodyG().selectAll("rect.bar");
	        var extent = _chart.brush().extent();

	        if (_chart.isOrdinal()) {
	            if (_chart.hasFilter()) {
	                bars.classed(dc.constants.SELECTED_CLASS, function (d) {
	                    return _chart.hasFilter(d.x);
	                });
	                bars.classed(dc.constants.DESELECTED_CLASS, function (d) {
	                    return !_chart.hasFilter(d.x);
	                });
	            } else {
	                bars.classed(dc.constants.SELECTED_CLASS, false);
	                bars.classed(dc.constants.DESELECTED_CLASS, false);
	            }
	        } else {
	            if (!_chart.brushIsEmpty(extent)) {
	                var start = extent[0];
	                var end = extent[1];

	                bars.classed(dc.constants.DESELECTED_CLASS, function (d) {
	                    return d.x < start || d.x >= end;
	                });
	            } else {
	                bars.classed(dc.constants.DESELECTED_CLASS, false);
	            }
	        }
	    };

	    /**
	    #### .centerBar(boolean)
	    Whether the bar chart will render each bar centered around the data position on x axis. Default: false

	    **/
	    _chart.centerBar = function (_) {
	        if (!arguments.length) return _centerBar;
	        _centerBar = _;
	        return _chart;
	    };

	    function onClick(d) {
	        _chart.onClick(d.data);
	    }

	    /**
	    #### .barPadding([padding])
	    Get or set the spacing between bars as a fraction of bar size. Valid values are between 0-1.
	    Setting this value will also remove any previously set `gap`. See the
	    [d3 docs](https://github.com/mbostock/d3/wiki/Ordinal-Scales#wiki-ordinal_rangeBands)
	    for a visual description of how the padding is applied.
	    **/
	    _chart.barPadding = function (_) {
	        if (!arguments.length) return _chart._rangeBandPadding();
	        _chart._rangeBandPadding(_);
	        _gap = undefined;
	        return _chart;
	    };

	    _chart._useOuterPadding = function() {
	        return _gap===undefined;
	    };

	    /**
	    #### .outerPadding([padding])
	    Get or set the outer padding on an ordinal bar chart. This setting has no effect on non-ordinal charts.
	    Will pad the width by `padding * barWidth` on each side of the chart.

	    Default: 0.5
	    **/
	    _chart.outerPadding = _chart._outerRangeBandPadding;

	    /**
	     #### .gap(gapBetweenBars)
	     Manually set fixed gap (in px) between bars instead of relying on the default auto-generated
	     gap.  By default the bar chart implementation will calculate and set the gap automatically
	     based on the number of data points and the length of the x axis.

	    **/
	    _chart.gap = function (_) {
	        if (!arguments.length) return _gap;
	        _gap = _;
	        return _chart;
	    };

	    _chart.extendBrush = function () {
	        var extent = _chart.brush().extent();
	        if (_chart.round() && (!_centerBar || _alwaysUseRounding)) {
	            extent[0] = extent.map(_chart.round())[0];
	            extent[1] = extent.map(_chart.round())[1];

	            _chart.chartBodyG().select(".brush")
	                .call(_chart.brush().extent(extent));
	        }

	        return extent;
	    };

	    /**
	    #### .alwaysUseRounding([boolean])
	    Set or get whether rounding is enabled when bars are centered.  Default: false.  If false, using
	    rounding with centered bars will result in a warning and rounding will be ignored.  This flag
	    has no effect if bars are not centered.

	    When using standard d3.js rounding methods, the brush often doesn't align correctly with
	    centered bars since the bars are offset.  The rounding function must add an offset to
	    compensate, such as in the following example.
	    ```js
	    chart.round(function(n) {return Math.floor(n)+0.5});
	    ```
	    **/
	    _chart.alwaysUseRounding = function (_) {
	        if (!arguments.length) return _alwaysUseRounding;
	        _alwaysUseRounding = _;
	        return _chart;
	    };

	    function colorFilter(color,inv) {
	        return function() {
	            var item = d3.select(this);
	            var match = item.attr('fill') == color;
	            return inv ? !match : match;
	        };
	    }

	    _chart.legendHighlight = function (d) {
	        if(!_chart.isLegendableHidden(d)) {
	            _chart.g().selectAll('rect.bar')
	                .classed('highlight', colorFilter(d.color))
	                .classed('fadeout', colorFilter(d.color,true));
	        }
	    };

	    _chart.legendReset = function () {
	        _chart.g().selectAll('rect.bar')
	            .classed('highlight', false)
	            .classed('fadeout', false);
	    };

	    dc.override(_chart, "xAxisMax", function() {
	        var max = this._xAxisMax();
	        if('resolution' in _chart.xUnits()) {
	            var res = _chart.xUnits().resolution;
	            max += res;
	        }
	        return max;
	    });

	    return _chart.anchor(parent, chartGroup);
	};

	/**
	## Line Chart

	Includes [Stack Mixin](#stack-mixin), [Coordinate Grid Mixin](#coordinate-grid-mixin)

	Concrete line/area chart implementation.

	Examples:
	* [Nasdaq 100 Index](http://dc-js.github.com/dc.js/)
	* [Canadian City Crime Stats](http://dc-js.github.com/dc.js/crime/index.html)

	#### dc.lineChart(parent[, chartGroup])
	Create a line chart instance and attach it to the given parent element.

	Parameters:

	* parent : string | node | selection | compositeChart - any valid
	 [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying
	 a dom block element such as a div; or a dom element or d3 selection.
	 If the line chart is a sub-chart in a [Composite Chart](#composite-chart) then pass in the parent composite
	 chart instance.

	* chartGroup : string (optional) - name of the chart group this chart instance should be placed in.
	 Interaction with a chart will only trigger events and redraws within the chart's group.

	Returns:
	A newly created line chart instance

	```js
	// create a line chart under #chart-container1 element using the default global chart group
	var chart1 = dc.lineChart("#chart-container1");
	// create a line chart under #chart-container2 element using chart group A
	var chart2 = dc.lineChart("#chart-container2", "chartGroupA");
	// create a sub-chart under a composite parent chart
	var chart3 = dc.lineChart(compositeChart);
	```

	**/
	dc.lineChart = function (parent, chartGroup) {
	    var DEFAULT_DOT_RADIUS = 5;
	    var TOOLTIP_G_CLASS = "dc-tooltip";
	    var DOT_CIRCLE_CLASS = "dot";
	    var Y_AXIS_REF_LINE_CLASS = "yRef";
	    var X_AXIS_REF_LINE_CLASS = "xRef";
	    var DEFAULT_DOT_OPACITY = 1e-6;

	    var _chart = dc.stackMixin(dc.coordinateGridMixin({}));
	    var _renderArea = false;
	    var _dotRadius = DEFAULT_DOT_RADIUS;
	    var _dataPointRadius = null;
	    var _dataPointFillOpacity = DEFAULT_DOT_OPACITY;
	    var _dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;
	    var _interpolate = 'linear';
	    var _tension = 0.7;
	    var _defined;
	    var _dashStyle;

	    _chart.transitionDuration(500);
	    _chart._rangeBandPadding(1);

	    _chart.plotData = function () {
	        var chartBody = _chart.chartBodyG();
	        var layersList = chartBody.selectAll("g.stack-list");

	        if (layersList.empty()) layersList = chartBody.append("g").attr("class", "stack-list");

	        var layers = layersList.selectAll("g.stack").data(_chart.data());

	        var layersEnter = layers
	            .enter()
	            .append("g")
	            .attr("class", function (d, i) {
	                return "stack " + "_" + i;
	            });

	        drawLine(layersEnter, layers);

	        drawArea(layersEnter, layers);

	        drawDots(chartBody, layers);
	    };

	    /**
	     #### .interpolate([value])
	     Gets or sets the interpolator to use for lines drawn, by string name, allowing e.g. step
	     functions, splines, and cubic interpolation.  This is passed to
	     [d3.svg.line.interpolate](https://github.com/mbostock/d3/wiki/SVG-Shapes#line_interpolate) and
	     [d3.svg.area.interpolate](https://github.com/mbostock/d3/wiki/SVG-Shapes#area_interpolate),
	     where you can find a complete list of valid arguments
	     **/
	    _chart.interpolate = function(_){
	        if (!arguments.length) return _interpolate;
	        _interpolate = _;
	        return _chart;
	    };

	    /**
	     #### .tension([value]) Gets or sets the tension to use for lines drawn, in the range 0 to 1.
	     This parameter further customizes the interpolation behavior.  It is passed to
	     [d3.svg.line.tension](https://github.com/mbostock/d3/wiki/SVG-Shapes#line_tension) and
	     [d3.svg.area.tension](https://github.com/mbostock/d3/wiki/SVG-Shapes#area_tension).  Default:
	     0.7
	     **/
	    _chart.tension = function(_){
	        if (!arguments.length) return _tension;
	        _tension = _;
	        return _chart;
	    };

	    /**
	     #### .defined([value])
	     Gets or sets a function that will determine discontinuities in the line which should be
	     skipped: the path will be broken into separate subpaths if some points are undefined.
	     This function is passed to
	     [d3.svg.line.defined](https://github.com/mbostock/d3/wiki/SVG-Shapes#line_defined)

	     Note: crossfilter will sometimes coerce nulls to 0, so you may need to carefully write
	     custom reduce functions to get this to work, depending on your data. See
	     https://github.com/dc-js/dc.js/issues/615#issuecomment-49089248
	     **/
	    _chart.defined = function(_){
	        if (!arguments.length) return _defined;
	        _defined = _;
	        return _chart;
	    };

	    /**
	    #### .dashStyle([array])
	    Set the line's d3 dashstyle. This value becomes the "stroke-dasharray" of line. Defaults to empty
	    array (solid line).
	     ```js
	     // create a Dash Dot Dot Dot
	     chart.dashStyle([3,1,1,1]);
	     ```
	    **/
	    _chart.dashStyle = function (_) {
	        if (!arguments.length) return _dashStyle;
	        _dashStyle = _;
	        return _chart;
	    };

	    /**
	    #### .renderArea([boolean])
	    Get or set render area flag. If the flag is set to true then the chart will render the area
	    beneath each line and the line chart effectively becomes an area chart.

	    **/
	    _chart.renderArea = function (_) {
	        if (!arguments.length) return _renderArea;
	        _renderArea = _;
	        return _chart;
	    };

	    function colors(d, i) {
	        return _chart.getColor.call(d,d.values,i);
	    }

	    function drawLine(layersEnter, layers) {
	        var line = d3.svg.line()
	            .x(function (d) {
	                return _chart.x()(d.x);
	            })
	            .y(function (d) {
	                return _chart.y()(d.y + d.y0);
	            })
	            .interpolate(_interpolate)
	            .tension(_tension);
	        if (_defined)
	            line.defined(_defined);

	        var path = layersEnter.append("path")
	            .attr("class", "line")
	            .attr("stroke", colors);
	        if (_dashStyle)
	            path.attr("stroke-dasharray", _dashStyle);

	        dc.transition(layers.select("path.line"), _chart.transitionDuration())
	            //.ease("linear")
	            .attr("stroke", colors)
	            .attr("d", function (d) {
	                return safeD(line(d.values));
	            });
	    }

	    function drawArea(layersEnter, layers) {
	        if (_renderArea) {
	            var area = d3.svg.area()
	                .x(function (d) {
	                    return _chart.x()(d.x);
	                })
	                .y(function (d) {
	                    return _chart.y()(d.y + d.y0);
	                })
	                .y0(function (d) {
	                    return _chart.y()(d.y0);
	                })
	                .interpolate(_interpolate)
	                .tension(_tension);
	            if (_defined)
	                area.defined(_defined);

	            layersEnter.append("path")
	                .attr("class", "area")
	                .attr("fill", colors)
	                .attr("d", function (d) {
	                    return safeD(area(d.values));
	                });

	            dc.transition(layers.select("path.area"), _chart.transitionDuration())
	                //.ease("linear")
	                .attr("fill", colors)
	                .attr("d", function (d) {
	                    return safeD(area(d.values));
	                });
	        }
	    }

	    function safeD(d){
	        return (!d || d.indexOf("NaN") >= 0) ? "M0,0" : d;
	    }

	    function drawDots(chartBody, layers) {
	        if (!_chart.brushOn()) {
	            var tooltipListClass = TOOLTIP_G_CLASS + "-list";
	            var tooltips = chartBody.select("g." + tooltipListClass);

	            if (tooltips.empty()) tooltips = chartBody.append("g").attr("class", tooltipListClass);

	            layers.each(function (d, layerIndex) {
	                var points = d.values;
	                if (_defined) points = points.filter(_defined);

	                var g = tooltips.select("g." + TOOLTIP_G_CLASS + "._" + layerIndex);
	                if (g.empty()) g = tooltips.append("g").attr("class", TOOLTIP_G_CLASS + " _" + layerIndex);

	                createRefLines(g);

	                var dots = g.selectAll("circle." + DOT_CIRCLE_CLASS)
	                    .data(points,dc.pluck('x'));

	                dots.enter()
	                    .append("circle")
	                    .attr("class", DOT_CIRCLE_CLASS)
	                    .attr("r", getDotRadius())
	                    .attr("fill", _chart.getColor)
	                    .style("fill-opacity", _dataPointFillOpacity)
	                    .style("stroke-opacity", _dataPointStrokeOpacity)
	                    .on("mousemove", function (d) {
	                        var dot = d3.select(this);
	                        showDot(dot);
	                        showRefLines(dot, g);
	                    })
	                    .on("mouseout", function (d) {
	                        var dot = d3.select(this);
	                        hideDot(dot);
	                        hideRefLines(g);
	                    })
	                    .append("title").text(dc.pluck('data', _chart.title(d.name)));

	                dots.attr("cx", function (d) {
	                        return dc.utils.safeNumber(_chart.x()(d.x));
	                    })
	                    .attr("cy", function (d) {
	                        return dc.utils.safeNumber(_chart.y()(d.y + d.y0));
	                    })
	                    .attr("fill", _chart.getColor)
	                    .select("title").text(dc.pluck('data', _chart.title(d.name)));

	                dots.exit().remove();
	            });
	        }
	    }

	    function createRefLines(g) {
	        var yRefLine = g.select("path." + Y_AXIS_REF_LINE_CLASS).empty() ? g.append("path").attr("class", Y_AXIS_REF_LINE_CLASS) : g.select("path." + Y_AXIS_REF_LINE_CLASS);
	        yRefLine.style("display", "none").attr("stroke-dasharray", "5,5");

	        var xRefLine = g.select("path." + X_AXIS_REF_LINE_CLASS).empty() ? g.append("path").attr("class", X_AXIS_REF_LINE_CLASS) : g.select("path." + X_AXIS_REF_LINE_CLASS);
	        xRefLine.style("display", "none").attr("stroke-dasharray", "5,5");
	    }

	    function showDot(dot) {
	        dot.style("fill-opacity", 0.8);
	        dot.style("stroke-opacity", 0.8);
	        dot.attr("r", _dotRadius);
	        return dot;
	    }

	    function showRefLines(dot, g) {
	        var x = dot.attr("cx");
	        var y = dot.attr("cy");
	        var yAxisX = (_chart._yAxisX() - _chart.margins().left);
	        var yAxisRefPathD = "M" + yAxisX + " " + y + "L" + (x) + " " + (y);
	        var xAxisRefPathD = "M" + x + " " + _chart.yAxisHeight() + "L" + x + " " + y;
	        g.select("path." + Y_AXIS_REF_LINE_CLASS).style("display", "").attr("d", yAxisRefPathD);
	        g.select("path." + X_AXIS_REF_LINE_CLASS).style("display", "").attr("d", xAxisRefPathD);
	    }

	    function getDotRadius() {
	        return _dataPointRadius || _dotRadius;
	    }

	    function hideDot(dot) {
	        dot.style("fill-opacity", _dataPointFillOpacity)
	            .style("stroke-opacity", _dataPointStrokeOpacity)
	            .attr("r", getDotRadius());
	    }

	    function hideRefLines(g) {
	        g.select("path." + Y_AXIS_REF_LINE_CLASS).style("display", "none");
	        g.select("path." + X_AXIS_REF_LINE_CLASS).style("display", "none");
	    }

	    /**
	    #### .dotRadius([dotRadius])
	    Get or set the radius (in px) for dots displayed on the data points. Default dot radius is 5.
	    **/
	    _chart.dotRadius = function (_) {
	        if (!arguments.length) return _dotRadius;
	        _dotRadius = _;
	        return _chart;
	    };

	    /**
	    #### .renderDataPoints([options])
	    Always show individual dots for each datapoint.

	    Options, if given, is an object that can contain the following:

	    * fillOpacity (default 0.8)
	    * strokeOpacity (default 0.8)
	    * radius (default 2)

	    If `options` is falsy, it disables data point rendering.

	    If no `options` are provided, the current `options` values are instead returned.

	    Example:
	    ```
	    chart.renderDataPoints({radius: 2, fillOpacity: 0.8, strokeOpacity: 0.8})
	    ```
	    **/
	    _chart.renderDataPoints = function (options) {
	        if (!arguments.length) {
	            return {
	                fillOpacity: _dataPointFillOpacity,
	                strokeOpacity: _dataPointStrokeOpacity,
	                radius: _dataPointRadius
	            };
	        } else if (!options) {
	            _dataPointFillOpacity = DEFAULT_DOT_OPACITY;
	            _dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;
	            _dataPointRadius = null;
	        } else {
	            _dataPointFillOpacity = options.fillOpacity || 0.8;
	            _dataPointStrokeOpacity = options.strokeOpacity || 0.8;
	            _dataPointRadius = options.radius || 2;
	        }
	        return _chart;
	    };

	    function colorFilter(color, dashstyle, inv) {
	        return function() {
	            var item = d3.select(this);
	            var match = (item.attr('stroke') == color && item.attr("stroke-dasharray") == ((dashstyle instanceof Array) ? dashstyle.join(",") : null) )|| item.attr('fill') == color;
	            return inv ? !match : match;
	        };
	    }

	    _chart.legendHighlight = function (d) {
	        if(!_chart.isLegendableHidden(d)) {
	            _chart.g().selectAll('path.line, path.area')
	                .classed('highlight', colorFilter(d.color, d.dashstyle))
	                .classed('fadeout', colorFilter(d.color, d.dashstyle, true));
	        }
	    };

	    _chart.legendReset = function () {
	        _chart.g().selectAll('path.line, path.area')
	            .classed('highlight', false)
	            .classed('fadeout', false);
	    };

	    dc.override(_chart,'legendables', function() {
	        var legendables = _chart._legendables();
	        if (!_dashStyle) return legendables;
	        return legendables.map(function(l) {
	            l.dashstyle = _dashStyle;
	            return l;
	        });
	    });

	    return _chart.anchor(parent, chartGroup);
	};

	/**
	## Data Count Widget

	Includes: [Base Mixin](#base-mixin)

	The data count widget is a simple widget designed to display the number of records selected by the
	current filters out of the total number of records in the data set. Once created the data count widget
	will automatically update the text content of the following elements under the parent element.

	* ".total-count" - total number of records
	* ".filter-count" - number of records matched by the current filters

	Examples:

	* [Nasdaq 100 Index](http://dc-js.github.com/dc.js/)

	#### dc.dataCount(parent[, chartGroup])
	Create a data count widget and attach it to the given parent element.

	Parameters:

	* parent : string | node | selection - any valid
	 [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying
	 a dom block element such as a div; or a dom element or d3 selection.
	* chartGroup : string (optional) - name of the chart group this widget should be placed in.
	 The data count widget will only react to filter changes in the chart group.

	Returns:
	A newly created data count widget instance

	#### .dimension(allData) - **mandatory**
	For the data count widget the only valid dimension is the entire data set.

	#### .group(groupAll) - **mandatory**
	For the data count widget the only valid group is the group returned by `dimension.groupAll()`.

	```js
	var ndx = crossfilter(data);
	var all = ndx.groupAll();

	dc.dataCount(".dc-data-count")
	    .dimension(ndx)
	    .group(all);
	```

	**/
	dc.dataCount = function(parent, chartGroup) {
	    var SPAN_CLASS = 'data-count-display';
	    var _formatNumber = d3.format(",d");
	    var _chart = dc.baseMixin({});
	    var _html = {some:"",all:""};

	    /**
	     #### html([object])
	     Gets or sets an optional object specifying HTML templates to use depending how many items are
	     selected. The text `%total-count` will replaced with the total number of records, and the text
	     `%filter-count` will be replaced with the number of selected records.
	     - all: HTML template to use if all items are selected
	     - some: HTML template to use if not all items are selected

	     ```js
	     counter.html({
	         some: "%filter-count out of %total-count records selected",
	         all: "All records selected. Click on charts to apply filters"
	     })
	     ```
	     **/
	    _chart.html = function(s) {
	        if (!arguments.length) return _html;
	        if(s.all)
	            _html.all = s.all;
	        if(s.some)
	            _html.some = s.some;
	        return _chart;
	    };

	    _chart._doRender = function() {
	        var tot = _chart.dimension().size(),
	            val = _chart.group().value();
	        var all = _formatNumber(tot);
	        var selected = _formatNumber(val);

	        if((tot===val)&&(_html.all!=="")) {
	            _chart.root().html(_html.all.replace('%total-count',all).replace('%filter-count',selected));
	        }
	        else if(_html.some!=="") {
	            _chart.root().html(_html.some.replace('%total-count',all).replace('%filter-count',selected));
	        } else {
	            _chart.selectAll(".total-count").text(all);
	            _chart.selectAll(".filter-count").text(selected);
	        }
	        return _chart;
	    };

	    _chart._doRedraw = function(){
	        return _chart._doRender();
	    };

	    return _chart.anchor(parent, chartGroup);
	};

	/**
	## Data Table Widget

	Includes: [Base Mixin](#base-mixin)

	The data table is a simple widget designed to list crossfilter focused data set (rows being
	filtered) in a good old tabular fashion.

	Examples:
	* [Nasdaq 100 Index](http://dc-js.github.com/dc.js/)

	#### dc.dataTable(parent[, chartGroup])
	Create a data table widget instance and attach it to the given parent element.

	Parameters:
	* parent : string | node | selection - any valid
	 [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying
	 a dom block element such as a div; or a dom element or d3 selection.

	* chartGroup : string (optional) - name of the chart group this chart instance should be placed in.
	 Interaction with a chart will only trigger events and redraws within the chart's group.

	Returns:
	A newly created data table widget instance

	**/
	dc.dataTable = function(parent, chartGroup) {
	    var LABEL_CSS_CLASS = "dc-table-label";
	    var ROW_CSS_CLASS = "dc-table-row";
	    var COLUMN_CSS_CLASS = "dc-table-column";
	    var GROUP_CSS_CLASS = "dc-table-group";

	    var _chart = dc.baseMixin({});

	    var _size = 25;
	    var _columns = [];
	    var _sortBy = function(d) {
	        return d;
	    };
	    var _order = d3.ascending;

	    _chart._doRender = function() {
	        _chart.selectAll("tbody").remove();

	        renderRows(renderGroups());

	        return _chart;
	    };

	    function renderGroups() {
	        var groups = _chart.root().selectAll("tbody")
	            .data(nestEntries(), function(d) {
	                return _chart.keyAccessor()(d);
	            });

	        var rowGroup = groups
	            .enter()
	            .append("tbody");

	        rowGroup
	            .append("tr")
	            .attr("class", GROUP_CSS_CLASS)
	                .append("td")
	                .attr("class", LABEL_CSS_CLASS)
	                .attr("colspan", _columns.length)
	                .html(function(d) {
	                    return _chart.keyAccessor()(d);
	                });

	        groups.exit().remove();

	        return rowGroup;
	    }

	    function nestEntries() {
	        var entries = _chart.dimension().top(_size);

	        return d3.nest()
	            .key(_chart.group())
	            .sortKeys(_order)
	            .entries(entries.sort(function(a, b){
	                return _order(_sortBy(a), _sortBy(b));
	            }));
	    }

	    function renderRows(groups) {
	        var rows = groups.order()
	            .selectAll("tr." + ROW_CSS_CLASS)
	            .data(function(d) {
	                return d.values;
	            });

	        var rowEnter = rows.enter()
	            .append("tr")
	            .attr("class", ROW_CSS_CLASS);

	        _columns.forEach(function(f,i) {
	            rowEnter.append("td")
	                .attr("class", COLUMN_CSS_CLASS + " _" + i)
	                .html(f);
	        });

	        rows.exit().remove();

	        return rows;
	    }

	    _chart._doRedraw = function() {
	        return _chart._doRender();
	    };

	    /**
	    #### .size([size])
	    Get or set the table size which determines the number of rows displayed by the widget.

	    **/
	    _chart.size = function(s) {
	        if (!arguments.length) return _size;
	        _size = s;
	        return _chart;
	    };

	    /**
	    #### .columns([columnFunctionArray])
	    Get or set column functions. The data table widget uses an array of functions to generate dynamic
	    columns. Column functions are simple javascript functions with only one input argument d which
	    represents a row in the data set, and the return value of these functions will be used directly
	    to generate table content for the cells.

	    ```js
	        chart.columns([
	            function(d) {
	                return d.date;
	            },
	            function(d) {
	                return d.open;
	            },
	            function(d) {
	                return d.close;
	            },
	            function(d) {
	                return numberFormat(d.close - d.open);
	            },
	            function(d) {
	                return d.volume;
	            }
	        ]);
	    ```

	    **/
	    _chart.columns = function(_) {
	        if (!arguments.length) return _columns;
	        _columns = _;
	        return _chart;
	    };

	    /**
	    #### .sortBy([sortByFunction])
	    Get or set sort-by function. This function works as a value accessor at row level and returns a
	    particular field to be sorted by. Default value: identity function

	    ```js
	       chart.sortBy(function(d) {
	            return d.date;
	        });
	    ```

	    **/
	    _chart.sortBy = function(_) {
	        if (!arguments.length) return _sortBy;
	        _sortBy = _;
	        return _chart;
	    };

	    /**
	    #### .order([order])
	    Get or set sort order. Default value: ``` d3.ascending ```

	    ```js
	        chart.order(d3.descending);
	    ```

	    **/
	    _chart.order = function(_) {
	        if (!arguments.length) return _order;
	        _order = _;
	        return _chart;
	    };

	    return _chart.anchor(parent, chartGroup);
	};

	/**
	 ## Data Grid Widget

	 Includes: [Base Mixin](#base-mixin)

	 Data grid is a simple widget designed to list the filtered records, providing
	 a simple way to define how the items are displayed.

	 Examples:
	 * [List of members of the european parliament](http://europarl.me/dc.js/web/ep/index.html)

	 #### dc.dataGrid(parent[, chartGroup])
	 Create a data grid widget instance and attach it to the given parent element.

	Parameters:
	* parent : string | node | selection - any valid
	 [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying
	 a dom block element such as a div; or a dom element or d3 selection.

	* chartGroup : string (optional) - name of the chart group this chart instance should be placed in.
	 Interaction with a chart will only trigger events and redraws within the chart's group.

	Returns:
	A newly created data grid widget instance

	 **/
	dc.dataGrid = function(parent, chartGroup) {
	    var LABEL_CSS_CLASS = "dc-grid-label";
	    var ITEM_CSS_CLASS = "dc-grid-item";
	    var GROUP_CSS_CLASS = "dc-grid-group";
	    var GRID_CSS_CLASS = "dc-grid-top";

	    var _chart = dc.baseMixin({});

	    var _size = 999; // shouldn't be needed, but you might
	    var _html = function (d) { return "you need to provide an html() handling param:  " + JSON.stringify(d); };
	    var _sortBy = function(d) {
	        return d;
	    };
	    var _order = d3.ascending;

	    var _htmlGroup = function (d) {
	        return "<div class='"+GROUP_CSS_CLASS+"'><h1 class='"+LABEL_CSS_CLASS+"'>"+
	            _chart.keyAccessor()(d)+"</h1></div>";
	    };

	    _chart._doRender = function() {
	        _chart.selectAll("div."+ GRID_CSS_CLASS).remove();

	        renderItems(renderGroups());

	        return _chart;
	    };

	    function renderGroups() {
	        var groups = _chart.root().selectAll("div."+ GRID_CSS_CLASS)
	                .data(nestEntries(), function(d) {
	                    return _chart.keyAccessor()(d);
	                });

	        var itemGroup = groups
	                .enter()
	                .append("div")
	                .attr("class", GRID_CSS_CLASS);

	        if (_htmlGroup) {
	            itemGroup
	                .html(function(d) {
	                    return _htmlGroup(d);
	                });
	        }

	        groups.exit().remove();
	        return itemGroup;
	    }

	    function nestEntries() {
	        var entries = _chart.dimension().top(_size);

	        return d3.nest()
	            .key(_chart.group())
	            .sortKeys(_order)
	            .entries(entries.sort(function(a, b){
	                return _order(_sortBy(a), _sortBy(b));
	            }));
	    }

	    function renderItems(groups) {
	        var items = groups.order()
	                .selectAll("div." + ITEM_CSS_CLASS)
	                .data(function(d) {
	                    return d.values;
	                });

	        items.enter()
	            .append("div")
	            .attr("class", ITEM_CSS_CLASS)
	            .html(function(d) {
	                return _html(d);
	            });

	        items.exit().remove();

	        return items;
	    }

	    _chart._doRedraw = function() {
	        return _chart._doRender();
	    };

	    /**
	     #### .size([size])
	     Get or set the grid size which determines the number of items displayed by the widget.

	     **/
	    _chart.size = function(s) {
	        if (!arguments.length) return _size;
	        _size = s;
	        return _chart;
	    };

	    /**
	     #### .html( function (data) { return "<html>"; })
	     Get or set the function that formats an item. The data grid widget uses a
	     function to generate dynamic html. Use your favourite templating engine or
	     generate the string directly.
	     ```js
	     chart.html(function (d) { return "<div class='item "+data.exampleCategory+"'>"+data.exampleString+"</div>";});
	     ```

	     **/
	    _chart.html = function(_) {
	        if (!arguments.length) return _html;
	        _html = _;
	        return _chart;
	    };


	    /**
	     #### .htmlGroup( function (data) { return "<html>"; })
	     Get or set the function that formats a group label.
	     ```js
	     chart.htmlGroup (function (d) { return "<h2>".d.key . "with " . d.values.length ." items</h2>"});
	     ```

	     **/
	    _chart.htmlGroup = function(_) {
	        if (!arguments.length) return _htmlGroup;
	        _htmlGroup = _;
	        return _chart;
	    };

	    /**
	     #### .sortBy([sortByFunction])
	     Get or set sort-by function. This function works as a value accessor at the item
	     level and returns a particular field to be sorted.
	     by. Default: identity function

	     ```js
	     chart.sortBy(function(d) {
	         return d.date;
	     });
	     ```

	     **/
	    _chart.sortBy = function(_) {
	        if (!arguments.length) return _sortBy;
	        _sortBy = _;
	        return _chart;
	    };

	    /**
	     #### .order([order])
	     Get or set sort order function. Default value: ``` d3.ascending ```

	     ```js
	     chart.order(d3.descending);
	     ```

	     **/
	    _chart.order = function(_) {
	        if (!arguments.length) return _order;
	        _order = _;
	        return _chart;
	    };

	    return _chart.anchor(parent, chartGroup);
	};

	/**
	## Bubble Chart

	Includes: [Bubble Mixin](#bubble-mixin), [Coordinate Grid Mixin](#coordinate-grid-mixin)

	A concrete implementation of a general purpose bubble chart that allows data visualization using the
	following dimensions:

	* x axis position
	* y axis position
	* bubble radius
	* color

	Examples:
	* [Nasdaq 100 Index](http://dc-js.github.com/dc.js/)
	* [US Venture Capital Landscape 2011](http://dc-js.github.com/dc.js/vc/index.html)

	#### dc.bubbleChart(parent[, chartGroup])
	Create a bubble chart instance and attach it to the given parent element.

	Parameters:
	* parent : string | node | selection | compositeChart - any valid
	 [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying
	 a dom block element such as a div; or a dom element or d3 selection.
	* chartGroup : string (optional) - name of the chart group this chart instance should be placed in.
	 Interaction with a chart will only trigger events and redraws within the chart's group.

	Returns:
	A newly created bubble chart instance

	```js
	// create a bubble chart under #chart-container1 element using the default global chart group
	var bubbleChart1 = dc.bubbleChart("#chart-container1");
	// create a bubble chart under #chart-container2 element using chart group A
	var bubbleChart2 = dc.bubbleChart("#chart-container2", "chartGroupA");
	```

	**/
	dc.bubbleChart = function(parent, chartGroup) {
	    var _chart = dc.bubbleMixin(dc.coordinateGridMixin({}));

	    var _elasticRadius = false;

	    _chart.transitionDuration(750);

	    var bubbleLocator = function(d) {
	        return "translate(" + (bubbleX(d)) + "," + (bubbleY(d)) + ")";
	    };

	    /**
	    #### .elasticRadius([boolean])
	    Turn on or off the elastic bubble radius feature, or return the value of the flag. If this
	    feature is turned on, then bubble radii will be automatically rescaled to fit the chart better.

	    **/
	    _chart.elasticRadius = function(_) {
	        if (!arguments.length) return _elasticRadius;
	        _elasticRadius = _;
	        return _chart;
	    };

	    _chart.plotData = function() {
	        if (_elasticRadius)
	            _chart.r().domain([_chart.rMin(), _chart.rMax()]);

	        _chart.r().range([_chart.MIN_RADIUS, _chart.xAxisLength() * _chart.maxBubbleRelativeSize()]);

	        var bubbleG = _chart.chartBodyG().selectAll("g." + _chart.BUBBLE_NODE_CLASS)
	            .data(_chart.data(), function (d) { return d.key; });

	        renderNodes(bubbleG);

	        updateNodes(bubbleG);

	        removeNodes(bubbleG);

	        _chart.fadeDeselectedArea();
	    };

	    function renderNodes(bubbleG) {
	        var bubbleGEnter = bubbleG.enter().append("g");

	        bubbleGEnter
	            .attr("class", _chart.BUBBLE_NODE_CLASS)
	            .attr("transform", bubbleLocator)
	            .append("circle").attr("class", function(d, i) {
	                return _chart.BUBBLE_CLASS + " _" + i;
	            })
	            .on("click", _chart.onClick)
	            .attr("fill", _chart.getColor)
	            .attr("r", 0);
	        dc.transition(bubbleG, _chart.transitionDuration())
	            .selectAll("circle." + _chart.BUBBLE_CLASS)
	            .attr("r", function(d) {
	                return _chart.bubbleR(d);
	            })
	            .attr("opacity", function(d) {
	                return (_chart.bubbleR(d) > 0) ? 1 : 0;
	            });

	        _chart._doRenderLabel(bubbleGEnter);

	        _chart._doRenderTitles(bubbleGEnter);
	    }

	    function updateNodes(bubbleG) {
	        dc.transition(bubbleG, _chart.transitionDuration())
	            .attr("transform", bubbleLocator)
	            .selectAll("circle." + _chart.BUBBLE_CLASS)
	            .attr("fill", _chart.getColor)
	            .attr("r", function(d) {
	                return _chart.bubbleR(d);
	            })
	            .attr("opacity", function(d) {
	                return (_chart.bubbleR(d) > 0) ? 1 : 0;
	            });

	        _chart.doUpdateLabels(bubbleG);
	        _chart.doUpdateTitles(bubbleG);
	    }

	    function removeNodes(bubbleG) {
	        bubbleG.exit().remove();
	    }

	    function bubbleX(d) {
	        var x = _chart.x()(_chart.keyAccessor()(d));
	        if (isNaN(x))
	            x = 0;
	        return x;
	    }

	    function bubbleY(d) {
	        var y = _chart.y()(_chart.valueAccessor()(d));
	        if (isNaN(y))
	            y = 0;
	        return y;
	    }

	    _chart.renderBrush = function(g) {
	        // override default x axis brush from parent chart
	    };

	    _chart.redrawBrush = function(g) {
	        // override default x axis brush from parent chart
	        _chart.fadeDeselectedArea();
	    };

	    return _chart.anchor(parent, chartGroup);
	};

	/**
	## Composite Chart

	Includes: [Coordinate Grid Mixin](#coordinate-grid-mixin)

	Composite charts are a special kind of chart that render multiple charts on the same Coordinate
	Grid. You can overlay (compose) different bar/line/area charts in a single composite chart to
	achieve some quite flexible charting effects.

	#### dc.compositeChart(parent[, chartGroup])
	Create a composite chart instance and attach it to the given parent element.

	Parameters:
	* parent : string | node | selection - any valid
	 [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying
	 a dom block element such as a div; or a dom element or d3 selection.
	* chartGroup : string (optional) - name of the chart group this chart instance should be placed in.
	 Interaction with a chart will only trigger events and redraws within the chart's group.

	Returns:
	A newly created composite chart instance

	```js
	// create a composite chart under #chart-container1 element using the default global chart group
	var compositeChart1 = dc.compositeChart("#chart-container1");
	// create a composite chart under #chart-container2 element using chart group A
	var compositeChart2 = dc.compositeChart("#chart-container2", "chartGroupA");
	```

	**/
	dc.compositeChart = function (parent, chartGroup) {

	    var SUB_CHART_CLASS = "sub";
	    var DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING = 12;

	    var _chart = dc.coordinateGridMixin({});
	    var _children = [];

	    var _childOptions = {};

	    var _shareColors = false,
	        _shareTitle = true;

	    var _rightYAxis = d3.svg.axis(),
	        _rightYAxisLabel = 0,
	        _rightYAxisLabelPadding = DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING,
	        _rightY,
	        _rightAxisGridLines = false;

	    _chart._mandatoryAttributes([]);
	    _chart.transitionDuration(500);

	    dc.override(_chart, "_generateG", function () {
	        var g = this.__generateG();

	        for (var i = 0; i < _children.length; ++i) {
	            var child = _children[i];

	            generateChildG(child, i);

	            if (!child.dimension()) child.dimension(_chart.dimension());
	            if (!child.group()) child.group(_chart.group());

	            child.chartGroup(_chart.chartGroup());
	            child.svg(_chart.svg());
	            child.xUnits(_chart.xUnits());
	            child.transitionDuration(_chart.transitionDuration());
	            child.brushOn(_chart.brushOn());
	        }

	        return g;
	    });

	    _chart._brushing = function () {
	        var extent = _chart.extendBrush();
	        var brushIsEmpty = _chart.brushIsEmpty(extent);

	        for (var i = 0; i < _children.length; ++i) {
	            _children[i].filter(null);
	            if (!brushIsEmpty) _children[i].filter(extent);
	        }
	    };

	    _chart._prepareYAxis = function () {
	        if (leftYAxisChildren().length !== 0) { prepareLeftYAxis(); }
	        if (rightYAxisChildren().length !== 0) { prepareRightYAxis(); }

	        if (leftYAxisChildren().length > 0 && !_rightAxisGridLines) {
	            _chart._renderHorizontalGridLinesForAxis(_chart.g(), _chart.y(), _chart.yAxis());
	        }
	        else if (rightYAxisChildren().length > 0) {
	            _chart._renderHorizontalGridLinesForAxis(_chart.g(), _rightY, _rightYAxis);
	        }
	    };

	    _chart.renderYAxis = function () {
	        if (leftYAxisChildren().length !== 0) {
	            _chart.renderYAxisAt("y", _chart.yAxis(), _chart.margins().left);
	            _chart.renderYAxisLabel("y", _chart.yAxisLabel(), -90);
	        }

	        if (rightYAxisChildren().length !== 0) {
	            _chart.renderYAxisAt("yr", _chart.rightYAxis(), _chart.width() - _chart.margins().right);
	            _chart.renderYAxisLabel("yr", _chart.rightYAxisLabel(), 90, _chart.width() - _rightYAxisLabelPadding);
	        }
	    };

	    function prepareRightYAxis() {
	        if (_chart.rightY() === undefined || _chart.elasticY()) {
	            _chart.rightY(d3.scale.linear());
	            _chart.rightY().domain([rightYAxisMin(), rightYAxisMax()]).rangeRound([_chart.yAxisHeight(), 0]);
	        }

	        _chart.rightY().range([_chart.yAxisHeight(), 0]);
	        _chart.rightYAxis(_chart.rightYAxis().scale(_chart.rightY()));

	        _chart.rightYAxis().orient("right");
	    }

	    function prepareLeftYAxis() {
	        if (_chart.y() === undefined || _chart.elasticY()) {
	            _chart.y(d3.scale.linear());
	            _chart.y().domain([yAxisMin(), yAxisMax()]).rangeRound([_chart.yAxisHeight(), 0]);
	        }

	        _chart.y().range([_chart.yAxisHeight(), 0]);
	        _chart.yAxis(_chart.yAxis().scale(_chart.y()));

	        _chart.yAxis().orient("left");
	    }

	    function generateChildG(child, i) {
	        child._generateG(_chart.g());
	        child.g().attr("class", SUB_CHART_CLASS + " _" + i);
	    }

	    _chart.plotData = function () {
	        for (var i = 0; i < _children.length; ++i) {
	            var child = _children[i];

	            if (!child.g()) {
	                generateChildG(child, i);
	            }

	            if (_shareColors) {
	                child.colors(_chart.colors());
	            }

	            child.x(_chart.x());

	            child.xAxis(_chart.xAxis());

	            if (child.useRightYAxis()) {
	                child.y(_chart.rightY());
	                child.yAxis(_chart.rightYAxis());
	            }
	            else {
	                child.y(_chart.y());
	                child.yAxis(_chart.yAxis());
	            }

	            child.plotData();

	            child._activateRenderlets();
	        }
	    };

	    /**
	    #### .useRightAxisGridLines(bool)
	    Get or set whether to draw gridlines from the right y axis.  Drawing from the left y axis is the
	    default behavior. This option is only respected when subcharts with both left and right y-axes
	    are present.
	    **/
	    _chart.useRightAxisGridLines = function(_) {
	        if (!arguments) return _rightAxisGridLines;

	        _rightAxisGridLines = _;
	        return _chart;
	    };

	    /**
	    #### .childOptions({object})
	    Get or set chart-specific options for all child charts. This is equivalent to calling `.options`
	    on each child chart.
	    **/
	    _chart.childOptions = function (_) {
	        if(!arguments.length) return _childOptions;
	        _childOptions = _;
	        _children.forEach(function(child){
	            child.options(_childOptions);
	        });
	        return _chart;
	    };

	    _chart.fadeDeselectedArea = function () {
	        for (var i = 0; i < _children.length; ++i) {
	            var child = _children[i];
	            child.brush(_chart.brush());
	            child.fadeDeselectedArea();
	        }
	    };

	    /**
	    #### .rightYAxisLabel([labelText])
	    Set or get the right y axis label.
	    **/
	    _chart.rightYAxisLabel = function (_, padding) {
	        if (!arguments.length) return _rightYAxisLabel;
	        _rightYAxisLabel = _;
	        _chart.margins().right -= _rightYAxisLabelPadding;
	        _rightYAxisLabelPadding = (padding === undefined) ? DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING : padding;
	        _chart.margins().right += _rightYAxisLabelPadding;
	        return _chart;
	    };

	    /**
	    #### .compose(subChartArray)
	    Combine the given charts into one single composite coordinate grid chart.

	    ```js
	    // compose the given charts in the array into one single composite chart
	    moveChart.compose([
	        // when creating sub-chart you need to pass in the parent chart
	        dc.lineChart(moveChart)
	            .group(indexAvgByMonthGroup) // if group is missing then parent's group will be used
	            .valueAccessor(function(d){return d.value.avg;})
	            // most of the normal functions will continue to work in a composed chart
	            .renderArea(true)
	            .stack(monthlyMoveGroup, function(d){return d.value;})
	            .title(function(d){
	                var value = d.value.avg?d.value.avg:d.value;
	                if(isNaN(value)) value = 0;
	                return dateFormat(d.key) + "\n" + numberFormat(value);
	            }),
	        dc.barChart(moveChart)
	            .group(volumeByMonthGroup)
	            .centerBar(true)
	    ]);
	    ```

	    **/
	    _chart.compose = function (charts) {
	        _children = charts;
	        _children.forEach(function(child) {
	            child.height(_chart.height());
	            child.width(_chart.width());
	            child.margins(_chart.margins());

	            if (_shareTitle) child.title(_chart.title());

	            child.options(_childOptions);
	        });
	        return _chart;
	    };

	    /**
	     #### .children()
	     Returns the child charts which are composed into the composite chart.
	     **/

	    _chart.children = function () {
	        return _children;
	    };

	    /**
	    #### .shareColors([boolean])
	    Get or set color sharing for the chart. If set, the `.colors()` value from this chart
	    will be shared with composed children. Additionally if the child chart implements
	    Stackable and has not set a custom .colorAccessor, then it will generate a color
	    specific to its order in the composition.
	    **/
	    _chart.shareColors = function (_) {
	        if (!arguments.length) return _shareColors;
	        _shareColors = _;
	        return _chart;
	    };

	    /**
	    #### .shareTitle([[boolean])
	    Get or set title sharing for the chart. If set, the `.title()` value from this chart will be
	    shared with composed children. Default value is true.
	    **/
	    _chart.shareTitle = function (_) {
	        if (!arguments.length) return _shareTitle;
	        _shareTitle = _;
	        return _chart;
	    };

	    /**
	    #### .rightY([yScale])
	    Get or set the y scale for the right axis. The right y scale is typically automatically
	    generated by the chart implementation.

	    **/
	    _chart.rightY = function (_) {
	        if (!arguments.length) return _rightY;
	        _rightY = _;
	        return _chart;
	    };

	    function leftYAxisChildren() {
	        return _children.filter(function (child) {
	            return !child.useRightYAxis();
	        });
	    }

	    function rightYAxisChildren() {
	        return _children.filter(function (child) {
	            return child.useRightYAxis();
	        });
	    }

	    function getYAxisMin(charts) {
	        return charts.map(function(c) {
	            return c.yAxisMin();
	        });
	    }

	    delete _chart.yAxisMin;
	    function yAxisMin() {
	        return d3.min(getYAxisMin(leftYAxisChildren()));
	    }

	    function rightYAxisMin() {
	        return d3.min(getYAxisMin(rightYAxisChildren()));
	    }

	    function getYAxisMax(charts) {
	        return charts.map(function(c) {
	            return c.yAxisMax();
	        });
	    }

	    delete _chart.yAxisMax;
	    function yAxisMax() {
	        return dc.utils.add(d3.max(getYAxisMax(leftYAxisChildren())), _chart.yAxisPadding());
	    }

	    function rightYAxisMax() {
	        return dc.utils.add(d3.max(getYAxisMax(rightYAxisChildren())), _chart.yAxisPadding());
	    }

	    function getAllXAxisMinFromChildCharts() {
	        return _children.map(function(c) {
	            return c.xAxisMin();
	        });
	    }

	    dc.override(_chart, 'xAxisMin',function () {
	        return dc.utils.subtract(d3.min(getAllXAxisMinFromChildCharts()), _chart.xAxisPadding());
	    });

	    function getAllXAxisMaxFromChildCharts() {
	        return _children.map(function(c) {
	            return c.xAxisMax();
	        });
	    }

	    dc.override(_chart, 'xAxisMax',function () {
	        return dc.utils.add(d3.max(getAllXAxisMaxFromChildCharts()), _chart.xAxisPadding());
	    });

	    _chart.legendables = function () {
	        return _children.reduce(function(items,child) {
	            if (_shareColors) child.colors(_chart.colors());
	            items.push.apply(items, child.legendables());
	            return items;
	        },[]);
	    };

	    _chart.legendHighlight = function (d) {
	        for (var j = 0; j < _children.length; ++j) {
	            var child = _children[j];
	            child.legendHighlight(d);
	        }
	    };

	    _chart.legendReset = function (d) {
	        for (var j = 0; j < _children.length; ++j) {
	            var child = _children[j];
	            child.legendReset(d);
	        }
	    };

	    _chart.legendToggle = function (d) {
	        console.log("composite should not be getting legendToggle itself");
	    };

	    /**
	    #### .rightYAxis([yAxis])
	    Set or get the right y axis used by the composite chart. This function is most useful when y
	    axis customization is required. The y axis in dc.js is an instance of a [d3 axis
	    object](https://github.com/mbostock/d3/wiki/SVG-Axes#wiki-_axis) therefore it supports any valid
	    d3 axis manipulation. **Caution**: The y axis is usually generated internally by dc;
	    resetting it may cause unexpected results.
	    ```js
	    // customize y axis tick format
	    chart.rightYAxis().tickFormat(function(v) {return v + "%";});
	    // customize y axis tick values
	    chart.rightYAxis().tickValues([0, 100, 200, 300]);
	    ```

	    **/
	    _chart.rightYAxis = function (rightYAxis) {
	        if (!arguments.length) return _rightYAxis;
	        _rightYAxis = rightYAxis;
	        return _chart;
	    };

	    return _chart.anchor(parent, chartGroup);
	};

	/**
	 ## Series Chart

	 Includes: [Composite Chart](#composite chart)

	 A series chart is a chart that shows multiple series of data overlaid on one chart, where the
	 series is specified in the data. It is a specialization of Composite Chart and inherits all
	 composite features other than recomposing the chart.

	 #### dc.seriesChart(parent[, chartGroup])
	 Create a series chart instance and attach it to the given parent element.

	 Parameters:
	* parent : string | node | selection - any valid
	 [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying
	 a dom block element such as a div; or a dom element or d3 selection.

	* chartGroup : string (optional) - name of the chart group this chart instance should be placed in.
	 Interaction with a chart will only trigger events and redraws within the chart's group.

	 Returns:
	 A newly created series chart instance

	 ```js
	 // create a series chart under #chart-container1 element using the default global chart group
	 var seriesChart1 = dc.seriesChart("#chart-container1");
	 // create a series chart under #chart-container2 element using chart group A
	 var seriesChart2 = dc.seriesChart("#chart-container2", "chartGroupA");
	 ```

	 **/
	dc.seriesChart = function (parent, chartGroup) {
	    var _chart = dc.compositeChart(parent, chartGroup);

	    var _charts = {};
	    var _chartFunction = dc.lineChart;
	    var _seriesAccessor;
	    var _seriesSort = d3.ascending;
	    var _valueSort = keySort;

	    _chart._mandatoryAttributes().push('seriesAccessor','chart');
	    _chart.shareColors(true);

	    function keySort(a,b) {
	        return d3.ascending(_chart.keyAccessor()(a), _chart.keyAccessor()(b));
	    }

	    _chart._preprocessData = function () {
	        var keep = [];
	        var children_changed;
	        var nester = d3.nest().key(_seriesAccessor);
	        if(_seriesSort)
	            nester.sortKeys(_seriesSort);
	        if(_valueSort)
	            nester.sortValues(_valueSort);
	        var nesting = nester.entries(_chart.data());
	        var children =
	            nesting.map(function(sub,i) {
	                var subChart = _charts[sub.key] || _chartFunction.call(_chart,_chart,chartGroup,sub.key,i);
	                if(!_charts[sub.key])
	                    children_changed = true;
	                _charts[sub.key] = subChart;
	                keep.push(sub.key);
	                return subChart
	                    .dimension(_chart.dimension())
	                    .group({all:d3.functor(sub.values)}, sub.key)
	                    .keyAccessor(_chart.keyAccessor())
	                    .valueAccessor(_chart.valueAccessor())
	                    .brushOn(_chart.brushOn());
	            });
	        // this works around the fact compositeChart doesn't really
	        // have a removal interface
	        Object.keys(_charts)
	            .filter(function(c) {return keep.indexOf(c) === -1;})
	            .forEach(function(c) {
	                clearChart(c);
	                children_changed = true;
	            });
	        _chart._compose(children);
	        if(children_changed && _chart.legend())
	            _chart.legend().render();
	    };

	    function clearChart(c) {
	        if(_charts[c].g())
	            _charts[c].g().remove();
	        delete _charts[c];
	    }

	    function resetChildren() {
	        Object.keys(_charts).map(clearChart);
	        _charts = {};
	    }

	    /**
	     #### .chart([function])
	     Get or set the chart function, which generates the child charts.  Default: dc.lineChart

	     ```
	     // put interpolation on the line charts used for the series
	     chart.chart(function(c) { return dc.lineChart(c).interpolate('basis'); })
	     // do a scatter series chart
	     chart.chart(dc.scatterPlot)
	     ```

	     **/
	    _chart.chart = function(_) {
	        if (!arguments.length) return _chartFunction;
	        _chartFunction = _;
	        resetChildren();
	        return _chart;
	    };

	    /**
	     #### .seriesAccessor([accessor])
	     Get or set accessor function for the displayed series. Given a datum, this function
	     should return the series that datum belongs to.
	     **/
	    _chart.seriesAccessor = function(_) {
	        if (!arguments.length) return _seriesAccessor;
	        _seriesAccessor = _;
	        resetChildren();
	        return _chart;
	    };

	    /**
	     #### .seriesSort([sortFunction])
	     Get or set a function to sort the list of series by, given series values.

	     Example:
	     ```
	     chart.seriesSort(d3.descending);
	     ```
	     **/
	    _chart.seriesSort = function(_) {
	        if (!arguments.length) return _seriesSort;
	        _seriesSort = _;
	        resetChildren();
	        return _chart;
	    };

	    /**
	     #### .valueSort([sortFunction])
	     Get or set a function to sort each series values by. By default this is the key accessor which,
	     for example, will ensure a lineChart series connects its points in increasing key/x order,
	     rather than haphazardly.
	    **/
	    _chart.valueSort = function(_) {
	        if (!arguments.length) return _valueSort;
	        _valueSort = _;
	        resetChildren();
	        return _chart;
	    };

	    // make compose private
	    _chart._compose = _chart.compose;
	    delete _chart.compose;

	    return _chart;
	};

	/**
	## Geo Choropleth Chart
	Includes: [Color Mixin](#color-mixin), [Base Mixin](#base-mixin)

	The geo choropleth chart is designed as an easy way to create a crossfilter driven choropleth map
	from GeoJson data. This chart implementation was inspired by [the great d3 choropleth
	example](http://bl.ocks.org/4060606).

	Examples:
	* [US Venture Capital Landscape 2011](http://dc-js.github.com/dc.js/vc/index.html)
	#### dc.geoChoroplethChart(parent[, chartGroup])
	Create a choropleth chart instance and attach it to the given parent element.

	Parameters:
	* parent : string | node | selection - any valid
	 [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying
	 a dom block element such as a div; or a dom element or d3 selection.

	* chartGroup : string (optional) - name of the chart group this chart instance should be placed in.
	 Interaction with a chart will only trigger events and redraws within the chart's group.

	Returns:
	A newly created choropleth chart instance

	```js
	// create a choropleth chart under '#us-chart' element using the default global chart group
	var chart1 = dc.geoChoroplethChart('#us-chart');
	// create a choropleth chart under '#us-chart2' element using chart group A
	var chart2 = dc.compositeChart('#us-chart2', 'chartGroupA');
	```

	**/
	dc.geoChoroplethChart = function (parent, chartGroup) {
	    var _chart = dc.colorMixin(dc.baseMixin({}));

	    _chart.colorAccessor(function (d) {
	        return d || 0;
	    });

	    var _geoPath = d3.geo.path();
	    var _projectionFlag;

	    var _geoJsons = [];

	    var _zoom;
	    var _scaleExtent = [1,50];
	    var _zoomed = zoomed;
	    var _zoomButtonClass = "zoomButton";
	    var _resetZoomButtonClass = "resetZoomButton";
	    var _enableZoom = false;
	    var _afterZoom;
	    var _g;

	    _chart._doRender = function () { 
	        _chart.resetSvg();
	        _g = _chart.svg().append('g');
	        for (var layerIndex = 0; layerIndex < _geoJsons.length; ++layerIndex) {
	            var states = _g.append('g')
	                .attr('class', 'layer' + layerIndex);

	            var regionG = states.selectAll('g.' + geoJson(layerIndex).name)
	                .data(geoJson(layerIndex).data)
	                .enter()
	                .append('g')
	                .attr('class', geoJson(layerIndex).name);

	            regionG
	                .append('path')
	                .attr('fill', 'white')
	                .attr('d', _geoPath);

	            regionG.append('title');

	            plotData(layerIndex);
	        }
	        _projectionFlag = false;

	        if (_enableZoom){
	            _zoom = d3.behavior.zoom()
	                .scaleExtent(_scaleExtent)
	                .on("zoom", _zoomed);   
	            _chart.svg().call(_zoom);
	            setupZoomControls(); 
	        }
	    };

	    /**
	     #### .enableZoom(boolean)
	     Set or get zoom enable value. Default value is false. Set enableZoom(true) to enable built in zoom features. 
	     Includes basic d3.zoom scroll zoom, and click-drag panning, as well as button controls for 
	     "+" (zoom in), "-" (zoom out) and "Reset Zoom". 

	     By default, the "+/-" controls will render in to "#zoomButton", while the reset button will render in to
	     "#resetZoomButton". These value can be over-ridden in the methods below.

	    **/
	    _chart.enableZoom = function(_){
	        if (!arguments.length) return _enableZoom;
	        _enableZoom = _;
	        return _chart;
	    };

	    /**
	     #### .afterZoom([function])
	     Set or get the function that will execute after zoom. Your afterZoom function should take two parameters (mapGroupD3Node, scaleNumber)
	     These values can be used inside your function to dynamically alter styles of map features as zooming occurs. 

	     For example: 
	     Fading labels in/out as zoom occurs, scaling line weight with zoom level, etc.

	    **/
	    _chart.afterZoom = function(_){
	        if (!arguments.length) return _afterZoom;
	        _afterZoom = _;
	        return _chart;
	    };

	    function plotData(layerIndex) {
	        var data = generateLayeredData();

	        if (isDataLayer(layerIndex)) {
	            var regionG = renderRegionG(layerIndex);

	            renderPaths(regionG, layerIndex, data);

	            renderTitle(regionG, layerIndex, data);
	        }
	    }

	    function generateLayeredData() {
	        var data = {};
	        var groupAll = _chart.data();
	        for (var i = 0; i < groupAll.length; ++i) {
	            data[_chart.keyAccessor()(groupAll[i])] = _chart.valueAccessor()(groupAll[i]);
	        }
	        return data;
	    }

	    function isDataLayer(layerIndex) {
	        return geoJson(layerIndex).keyAccessor;
	    }

	    function renderRegionG(layerIndex) {
	        var regionG = _g
	            .selectAll(layerSelector(layerIndex))
	            .classed('selected', function (d) {
	                return isSelected(layerIndex, d);
	            })
	            .classed('deselected', function (d) {
	                return isDeselected(layerIndex, d);
	            })
	            .attr('class', function (d) {
	                var layerNameClass = geoJson(layerIndex).name;
	                var regionClass = dc.utils.nameToId(geoJson(layerIndex).keyAccessor(d));
	                var baseClasses = layerNameClass + ' ' + regionClass;
	                if (isSelected(layerIndex, d)) {
	                    baseClasses += ' selected';
	                }
	                if (isDeselected(layerIndex, d)) {
	                    baseClasses += ' deselected';
	                }
	                return baseClasses;
	            });
	        return regionG;
	    }

	    function layerSelector(layerIndex) {
	        return 'g.layer' + layerIndex + ' g.' + geoJson(layerIndex).name;
	    }

	    function isSelected(layerIndex, d) {
	        return _chart.hasFilter() && _chart.hasFilter(getKey(layerIndex, d));
	    }

	    function isDeselected(layerIndex, d) {
	        return _chart.hasFilter() && !_chart.hasFilter(getKey(layerIndex, d));
	    }

	    function getKey(layerIndex, d) {
	        return geoJson(layerIndex).keyAccessor(d);
	    }

	    function geoJson(index) {
	        return _geoJsons[index];
	    }

	    function renderPaths(regionG, layerIndex, data) {
	        var paths = regionG
	            .select('path')
	            .attr('fill', function () {
	                var currentFill = d3.select(this).attr('fill');
	                if (currentFill) {
	                    return currentFill;
	                }
	                return 'none';
	            })
	            .on('click', function (d) {
	                if(d3.event.defaultPrevented) 
	                    return;
	                else 
	                    return _chart.onClick(d, layerIndex);
	            });

	        dc.transition(paths, _chart.transitionDuration()).attr('fill', function (d, i) {
	            return _chart.getColor(data[geoJson(layerIndex).keyAccessor(d)], i);
	        });
	    }

	    _chart.onClick = function (d, layerIndex) {
	        var selectedRegion = geoJson(layerIndex).keyAccessor(d);
	        dc.events.trigger(function () {
	            _chart.filter(selectedRegion);
	            _chart.redrawGroup();
	        });
	    };

	    function renderTitle(regionG, layerIndex, data) {
	        if (_chart.renderTitle()) {
	            regionG.selectAll('title').text(function (d) {
	                var key = getKey(layerIndex, d);
	                var value = data[key];
	                return _chart.title()({key: key, value: value});
	            });
	        }
	    }

	    _chart._doRedraw = function () {
	        for (var layerIndex = 0; layerIndex < _geoJsons.length; ++layerIndex) {
	            plotData(layerIndex);
	            if (_projectionFlag) {
	                _g.selectAll('g.' + geoJson(layerIndex).name + ' path').attr('d', _geoPath);
	            }
	        }
	        _projectionFlag = false;
	    };

	    /**
	    #### .overlayGeoJson(json, name, keyAccessor) - **mandatory**
	    Use this function to insert a new GeoJson map layer. This function can be invoked multiple times
	    if you have multiple GeoJson data layers to render on top of each other. If you overlay multiple
	    layers with the same name the new overlay will override the existing one.

	    Parameters:
	    * json - GeoJson feed
	    * name - name of the layer
	    * keyAccessor - accessor function used to extract 'key' from the GeoJson data. The key extracted by
	    this function should match the keys returned by the crossfilter groups.

	    ```js
	    // insert a layer for rendering US states
	    chart.overlayGeoJson(statesJson.features, 'state', function(d) {
	        return d.properties.name;
	    });
	    ```

	    **/
	    _chart.overlayGeoJson = function (json, name, keyAccessor) {
	        for (var i = 0; i < _geoJsons.length; ++i) {
	            if (_geoJsons[i].name === name) {
	                _geoJsons[i].data = json;
	                _geoJsons[i].keyAccessor = keyAccessor;
	                return _chart;
	            }
	        }
	        _geoJsons.push({name: name, data: json, keyAccessor: keyAccessor});
	        return _chart;
	    };

	    /**
	    #### .projection(projection)
	    Set custom geo projection function. See the available [d3 geo projection
	    functions](https://github.com/mbostock/d3/wiki/Geo-Projections).  Default value: albersUsa.

	    **/
	    _chart.projection = function (projection) {
	        _geoPath.projection(projection);
	        _projectionFlag = true;
	        return _chart;
	    };

	    /**
	    #### .geoJsons()
	    Returns all GeoJson layers currently registered with this chart. The returned array is a
	    reference to this chart's internal data structure, so any modification to this array will also
	    modify this chart's internal registration.

	    Returns an array of objects containing fields {name, data, accessor}

	    **/
	    _chart.geoJsons = function () {
	        return _geoJsons;
	    };

	    /**
	    #### .geoPath()
	    Returns the [d3.geo.path](https://github.com/mbostock/d3/wiki/Geo-Paths#path) object used to
	    render the projection and features.  Can be useful for figuring out the bounding box of the
	    feature set and thus a way to calculate scale and translation for the projection.

	    **/
	    _chart.geoPath = function () {
	        return _geoPath;
	    };

	    /**
	    #### .removeGeoJson(name)
	    Remove a GeoJson layer from this chart by name

	    **/
	    _chart.removeGeoJson = function (name) {
	        var geoJsons = [];

	        for (var i = 0; i < _geoJsons.length; ++i) {
	            var layer = _geoJsons[i];
	            if (layer.name !== name) {
	                geoJsons.push(layer);
	            }
	        }

	        _geoJsons = geoJsons;

	        return _chart;
	    };

	    function setupZoomControls() {

	        _chart.select('.'+_zoomButtonClass).html('');
	        
	        var container = _chart.select('.'+_zoomButtonClass)
	            .append('div')
	            .classed("dc-zoom-button", true);

	        var inButton = container.append('div')
	            .classed("in", true)
	            .text('+');
	        var outButton = container.append('div')
	            .classed("out", true)
	            .text('-');

	        var resetButton = _chart.select('.'+_resetZoomButtonClass).html('');

	        resetButton = _chart.select('.'+_resetZoomButtonClass)
	            .append('div')
	            .classed("dc-zoom-reset", true)
	            .text("Reset Zoom")
	            .on("click", function(){  
	                resetZoom();
	                _afterZoom(_g, 1);
	            });

	        inButton.on("click", function() {
	            if(_zoom.scale()*2 > _zoom.scaleExtent()[1]){
	            }else{
	                parametricZoom(_zoom.scale()*2);
	            }
	        });
	        outButton.on("click", function() {
	            if(_zoom.scale()/2 < _zoom.scaleExtent()[0]){
	                resetZoom();
	            }else{
	                parametricZoom(_zoom.scale()/2);
	            }
	        });
	    }


	    function zoomed() {
	        var s;
	        var t;
	        var ox = _chart.width() / 2 - 50,
	            oy = _chart.width() / 2;

	        if(d3.event){
	            s = d3.event.scale;
	            t = d3.event.translate;
	        }else{
	            s= _zoom.scale();
	            t= _zoom.translate();
	        }
	        
	        t[0] = Math.min((_chart.width() / 2 - ox - 100) * (s - 1), Math.max((_chart.width() / 2 + ox) * (1 - s), t[0]));
	        t[1] = Math.min((_chart.height() / 2 - oy + 200) * (s - 1), Math.max((_chart.height() / 2 + oy - 175)  * (1 - s), t[1]));
	        _zoom.translate(t);
	        _g.attr("transform",
	            "translate(" + t + ")" +
	            "scale(" + s + ")"
	        );

	        if (_afterZoom){
	            _afterZoom(_g, s);
	        }
	        /*
	        // Zoom dependent fading of labels and lines
	        g.select(".state-boundaries").style("stroke-width", 1.75 / s + "px");
	        g.select(".district-boundaries").style("stroke-width", .75 / s + "px");
	        g.selectAll(".stateLabel").style("opacity", 1.75 - s);
	        g.selectAll(".districtLabel").attr("font-size", 1/(s+1) + "em").style("opacity", -2 + s);
	        */
	    }
	    function interpolateZoom (translate, scale) {
	        var self = this;
	        return d3.transition().duration(350).tween("zoom", function () {
	            var iTranslate = d3.interpolate(_zoom.translate(), translate),
	                iScale = d3.interpolate(_zoom.scale(), scale);
	            return function (t) {
	                _zoom
	                    .scale(iScale(t))
	                    .translate(iTranslate(t));
	                zoomed();
	            };
	        });
	    }
	    function parametricZoom(pScale) {
	        var translate = _zoom.translate(),
	            translate0 = [],
	            l = [],
	            view = {x: translate[0], y: translate[1], k: _zoom.scale()},
	            extent = _zoom.scaleExtent(),
	            center = [_chart.width() / 2, _chart.height() / 2],
	            target_zoom = pScale,
	            s = pScale,
	            ox = _chart.width() / 2 - 50,
	            oy = _chart.width() / 2;
	        d3.event.preventDefault();
	        if (target_zoom < extent[0] || target_zoom > extent[1]) { return false; }
	        translate0 = [(center[0] - view.x) / view.k, (center[1] - view.y) / view.k];
	        view.k = target_zoom;
	        l = [translate0[0] * view.k + view.x, translate0[1] * view.k + view.y];
	        view.x += center[0] - l[0];
	        view.y += center[1] - l[1];
	        interpolateZoom([view.x, view.y], view.k);
	    }

	    function resetZoom() {
	        _zoom.scale(1);
	        _zoom.translate([0,0]);
	        _g.transition().duration(500).attr('transform', 'translate(0,0)scale(1)');  
	    }

	    return _chart.anchor(parent, chartGroup);
	};

	/**
	## Bubble Overlay Chart

	Includes: [Bubble Mixin](#bubble-mixin), [Base Mixin](#base-mixin)

	The bubble overlay chart is quite different from the typical bubble chart. With the bubble overlay
	chart you can arbitrarily place bubbles on an existing svg or bitmap image, thus changing the
	typical x and y positioning while retaining the capability to visualize data using bubble radius
	and coloring.

	Examples:
	* [Canadian City Crime Stats](http://dc-js.github.com/dc.js/crime/index.html)

	#### dc.bubbleOverlay(parent[, chartGroup])
	Create a bubble overlay chart instance and attach it to the given parent element.

	Parameters:
	* parent : string | node | selection - any valid
	 [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying
	 a dom block element such as a div; or a dom element or d3 selection.
	 off-screen. Typically this element should also be the parent of the underlying image.
	* chartGroup : string (optional) - name of the chart group this chart instance should be placed in.
	 Interaction with a chart will only trigger events and redraws within the chart's group.

	Returns:
	A newly created bubble overlay chart instance

	```js
	// create a bubble overlay chart on top of the "#chart-container1 svg" element using the default global chart group
	var bubbleChart1 = dc.bubbleOverlayChart("#chart-container1").svg(d3.select("#chart-container1 svg"));
	// create a bubble overlay chart on top of the "#chart-container2 svg" element using chart group A
	var bubbleChart2 = dc.compositeChart("#chart-container2", "chartGroupA").svg(d3.select("#chart-container2 svg"));
	```

	#### .svg(imageElement) - **mandatory**
	Set the underlying svg image element. Unlike other dc charts this chart will not generate a svg
	element; therefore the bubble overlay chart will not work if this function is not invoked. If the
	underlying image is a bitmap, then an empty svg will need to be created on top of the image.

	```js
	// set up underlying svg element
	chart.svg(d3.select("#chart svg"));
	```

	**/
	dc.bubbleOverlay = function(root, chartGroup) {
	    var BUBBLE_OVERLAY_CLASS = "bubble-overlay";
	    var BUBBLE_NODE_CLASS = "node";
	    var BUBBLE_CLASS = "bubble";

	    var _chart = dc.bubbleMixin(dc.baseMixin({}));
	    var _g;
	    var _points = [];

	    _chart.transitionDuration(750);

	    _chart.radiusValueAccessor(function(d) {
	        return d.value;
	    });

	    /**
	    #### .point(name, x, y) - **mandatory**
	    Set up a data point on the overlay. The name of a data point should match a specific "key" among
	    data groups generated using keyAccessor.  If a match is found (point name <-> data group key)
	    then a bubble will be generated at the position specified by the function. x and y
	    value specified here are relative to the underlying svg.

	    **/
	    _chart.point = function(name, x, y) {
	        _points.push({name: name, x: x, y: y});
	        return _chart;
	    };

	    _chart._doRender = function() {
	        _g = initOverlayG();

	        _chart.r().range([_chart.MIN_RADIUS, _chart.width() * _chart.maxBubbleRelativeSize()]);

	        initializeBubbles();

	        _chart.fadeDeselectedArea();

	        return _chart;
	    };

	    function initOverlayG() {
	        _g = _chart.select("g." + BUBBLE_OVERLAY_CLASS);
	        if (_g.empty())
	            _g = _chart.svg().append("g").attr("class", BUBBLE_OVERLAY_CLASS);
	        return _g;
	    }

	    function initializeBubbles() {
	        var data = mapData();

	        _points.forEach(function(point) {
	            var nodeG = getNodeG(point, data);

	            var circle = nodeG.select("circle." + BUBBLE_CLASS);

	            if (circle.empty())
	                circle = nodeG.append("circle")
	                    .attr("class", BUBBLE_CLASS)
	                    .attr("r", 0)
	                    .attr("fill", _chart.getColor)
	                    .on("click", _chart.onClick);

	            dc.transition(circle, _chart.transitionDuration())
	                .attr("r", function(d) {
	                    return _chart.bubbleR(d);
	                });

	            _chart._doRenderLabel(nodeG);

	            _chart._doRenderTitles(nodeG);
	        });
	    }

	    function mapData() {
	        var data = {};
	        _chart.data().forEach(function(datum) {
	            data[_chart.keyAccessor()(datum)] = datum;
	        });
	        return data;
	    }

	    function getNodeG(point, data) {
	        var bubbleNodeClass = BUBBLE_NODE_CLASS + " " + dc.utils.nameToId(point.name);

	        var nodeG = _g.select("g." + dc.utils.nameToId(point.name));

	        if (nodeG.empty()) {
	            nodeG = _g.append("g")
	                .attr("class", bubbleNodeClass)
	                .attr("transform", "translate(" + point.x + "," + point.y + ")");
	        }

	        nodeG.datum(data[point.name]);

	        return nodeG;
	    }

	    _chart._doRedraw = function() {
	        updateBubbles();

	        _chart.fadeDeselectedArea();

	        return _chart;
	    };

	    function updateBubbles() {
	        var data = mapData();

	        _points.forEach(function(point) {
	            var nodeG = getNodeG(point, data);

	            var circle = nodeG.select("circle." + BUBBLE_CLASS);

	            dc.transition(circle, _chart.transitionDuration())
	                .attr("r", function(d) {
	                    return _chart.bubbleR(d);
	                })
	                .attr("fill", _chart.getColor);

	            _chart.doUpdateLabels(nodeG);

	            _chart.doUpdateTitles(nodeG);
	        });
	    }

	    _chart.debug = function(flag) {
	        if(flag){
	            var debugG = _chart.select("g." + dc.constants.DEBUG_GROUP_CLASS);

	            if(debugG.empty())
	                debugG = _chart.svg()
	                    .append("g")
	                    .attr("class", dc.constants.DEBUG_GROUP_CLASS);

	            var debugText = debugG.append("text")
	                .attr("x", 10)
	                .attr("y", 20);

	            debugG
	                .append("rect")
	                .attr("width", _chart.width())
	                .attr("height", _chart.height())
	                .on("mousemove", function() {
	                    var position = d3.mouse(debugG.node());
	                    var msg = position[0] + ", " + position[1];
	                    debugText.text(msg);
	                });
	        }else{
	            _chart.selectAll(".debug").remove();
	        }

	        return _chart;
	    };

	    _chart.anchor(root, chartGroup);

	    return _chart;
	};

	/**
	## Row Chart

	Includes: [Cap Mixin](#cap-mixin), [Margin Mixin](#margin-mixin), [Color Mixin](#color-mixin), [Base Mixin](#base-mixin)

	Concrete row chart implementation.

	#### dc.rowChart(parent[, chartGroup])
	Create a row chart instance and attach it to the given parent element.

	Parameters:

	* parent : string | node | selection - any valid
	 [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying
	 a dom block element such as a div; or a dom element or d3 selection.

	* chartGroup : string (optional) - name of the chart group this chart instance should be placed in.
	 Interaction with a chart will only trigger events and redraws within the chart's group.

	Returns:
	A newly created row chart instance

	```js
	// create a row chart under #chart-container1 element using the default global chart group
	var chart1 = dc.rowChart("#chart-container1");
	// create a row chart under #chart-container2 element using chart group A
	var chart2 = dc.rowChart("#chart-container2", "chartGroupA");
	```

	**/
	dc.rowChart = function (parent, chartGroup) {

	    var _g;

	    var _labelOffsetX = 10;
	    var _labelOffsetY = 15;
	    var _titleLabelOffsetX = 2;

	    var _gap = 5;

	    var _fixedBarHeight = false;
	    var _rowCssClass = "row";
	    var _titleRowCssClass = "titlerow";
	    var _renderTitleLabel = false;

	    var _chart = dc.capMixin(dc.marginMixin(dc.colorMixin(dc.baseMixin({}))));

	    var _x;

	    var _elasticX;

	    var _xAxis = d3.svg.axis().orient("bottom");

	    var _rowData;

	    _chart.rowsCap = _chart.cap;

	    function calculateAxisScale() {
	        if (!_x || _elasticX) {
	            var extent = d3.extent(_rowData, _chart.cappedValueAccessor);
	            if (extent[0] > 0) extent[0] = 0;
	            _x = d3.scale.linear().domain(extent)
	                .range([0, _chart.effectiveWidth()]);
	        }
	        _xAxis.scale(_x);
	    }

	    function drawAxis() {
	        var axisG = _g.select("g.axis");

	        calculateAxisScale();

	        if (axisG.empty())
	            axisG = _g.append("g").attr("class", "axis")
	                .attr("transform", "translate(0, " + _chart.effectiveHeight() + ")");

	        dc.transition(axisG, _chart.transitionDuration())
	            .call(_xAxis);
	    }

	    _chart._doRender = function () {
	        _chart.resetSvg();

	        _g = _chart.svg()
	            .append("g")
	            .attr("transform", "translate(" + _chart.margins().left + "," + _chart.margins().top + ")");

	        drawChart();

	        return _chart;
	    };

	    _chart.title(function (d) {
	        return _chart.cappedKeyAccessor(d) + ": " + _chart.cappedValueAccessor(d);
	    });

	    _chart.label(_chart.cappedKeyAccessor);

	    /**
	     #### .x([scale])
	     Gets or sets the x scale. The x scale can be any d3
	     [quantitive scale](https://github.com/mbostock/d3/wiki/Quantitative-Scales)
	     **/
	    _chart.x = function(x){
	        if(!arguments.length) return _x;
	        _x = x;
	        return _chart;
	    };

	    function drawGridLines() {
	        _g.selectAll("g.tick")
	            .select("line.grid-line")
	            .remove();

	        _g.selectAll("g.tick")
	            .append("line")
	            .attr("class", "grid-line")
	            .attr("x1", 0)
	            .attr("y1", 0)
	            .attr("x2", 0)
	            .attr("y2", function () {
	                return -_chart.effectiveHeight();
	            });
	    }

	    function drawChart() {
	        _rowData = _chart.data();

	        drawAxis();
	        drawGridLines();

	        var rows = _g.selectAll("g." + _rowCssClass)
	            .data(_rowData);

	        createElements(rows);
	        removeElements(rows);
	        updateElements(rows);
	    }

	    function createElements(rows) {
	        var rowEnter = rows.enter()
	            .append("g")
	            .attr("class", function (d, i) {
	                return _rowCssClass + " _" + i;
	            });

	        rowEnter.append("rect").attr("width", 0);

	        createLabels(rowEnter);
	        updateLabels(rows);
	    }

	    function removeElements(rows) {
	        rows.exit().remove();
	    }

	    function rootValue() {
	        var root = _x(0);
	        return root === -Infinity ? _x(1) : root;
	    }

	    function updateElements(rows) {
	        var n = _rowData.length;

	        var height;
	        if (!_fixedBarHeight) height = (_chart.effectiveHeight() - (n + 1) * _gap) / n;
	            else height = _fixedBarHeight;

	        var rect = rows.attr("transform",function (d, i) {
	                return "translate(0," + ((i + 1) * _gap + i * height) + ")";
	            }).select("rect")
	            .attr("height", height)
	            .attr("fill", _chart.getColor)
	            .on("click", onClick)
	            .classed("deselected", function (d) {
	                return (_chart.hasFilter()) ? !isSelectedRow(d) : false;
	            })
	            .classed("selected", function (d) {
	                return (_chart.hasFilter()) ? isSelectedRow(d) : false;
	            });

	        dc.transition(rect, _chart.transitionDuration())
	            .attr("width", function (d) {
	                return Math.abs(rootValue() - _x(_chart.valueAccessor()(d)));
	            })
	            .attr("transform", translateX);

	        createTitles(rows);
	        updateLabels(rows);
	    }

	    function createTitles(rows) {
	        if (_chart.renderTitle()) {
	            rows.selectAll("title").remove();
	            rows.append("title").text(_chart.title());
	        }
	    }

	    function createLabels(rowEnter) {
	        if (_chart.renderLabel()) {
	            rowEnter.append("text")
	                .on("click", onClick);
	        }
	        if (_chart.renderTitleLabel()) {
	            rowEnter.append("text")
	                .attr("class", _titleRowCssClass)
	                .on("click", onClick);
	        }
	    }

	    function updateLabels(rows) {
	        if (_chart.renderLabel()) {
	            var lab = rows.select("text")
	                .attr("x", _labelOffsetX)
	                .attr("y", _labelOffsetY)
	                .on("click", onClick)
	                .attr("class", function (d, i) {
	                    return _rowCssClass + " _" + i;
	                })
	                .text(function (d) {
	                    return _chart.label()(d);
	                });
	            dc.transition(lab, _chart.transitionDuration())
	                .attr("transform", translateX);
	        }
	        if (_chart.renderTitleLabel()) {
	            var titlelab = rows.select("." + _titleRowCssClass)
	                    .attr("x", _chart.effectiveWidth() - _titleLabelOffsetX)
	                    .attr("y", _labelOffsetY)
	                    .attr("text-anchor", "end")
	                    .on("click", onClick)
	                    .attr("class", function (d, i) {
	                        return _titleRowCssClass + " _" + i ;
	                    })
	                    .text(function (d) {
	                        return _chart.title()(d);
	                    });
	            dc.transition(titlelab, _chart.transitionDuration())
	                .attr("transform", translateX);
	        }
	    }

	    /**
	    #### .renderTitleLabel(boolean)
	    Turn on/off Title label rendering (values) using SVG style of text-anchor 'end'

	    **/
	    _chart.renderTitleLabel = function (_) {
	        if (!arguments.length) return _renderTitleLabel;
	        _renderTitleLabel = _;
	        return _chart;
	    };

	    function onClick(d) {
	        _chart.onClick(d);
	    }

	    function translateX(d) {
	        var x = _x(_chart.cappedValueAccessor(d)),
	            x0 = rootValue(),
	            s = x > x0 ? x0 : x;
	        return "translate("+s+",0)";
	    }

	    _chart._doRedraw = function () {
	        drawChart();
	        return _chart;
	    };

	    /**
	    #### .xAxis()
	    Get the x axis for the row chart instance.  Note: not settable for row charts.
	    See the [d3 axis object](https://github.com/mbostock/d3/wiki/SVG-Axes#wiki-axis) documention for more information.
	    ```js
	    // customize x axis tick format
	    chart.xAxis().tickFormat(function(v) {return v + "%";});
	    // customize x axis tick values
	    chart.xAxis().tickValues([0, 100, 200, 300]);
	    ```

	    **/
	    _chart.xAxis = function () {
	        return _xAxis;
	    };

	    /**
	    #### .fixedBarHeight([height])
	    Get or set the fixed bar height. Default is [false] which will auto-scale bars.
	    For example, if you want to fix the height for a specific number of bars (useful in TopN charts)
	    you could fix height as follows (where count = total number of bars in your TopN and gap is your vertical gap space).
	    ```js
	     chart.fixedBarHeight( chartheight - (count + 1) * gap / count);
	    ```
	    **/
	    _chart.fixedBarHeight = function (g) {
	        if (!arguments.length) return _fixedBarHeight;
	        _fixedBarHeight = g;
	        return _chart;
	    };

	    /**
	    #### .gap([gap])
	    Get or set the vertical gap space between rows on a particular row chart instance. Default gap is 5px;

	    **/
	    _chart.gap = function (g) {
	        if (!arguments.length) return _gap;
	        _gap = g;
	        return _chart;
	    };

	    /**
	    #### .elasticX([boolean])
	    Get or set the elasticity on x axis. If this attribute is set to true, then the x axis will rescle to auto-fit the data
	    range when filtered.

	    **/
	    _chart.elasticX = function (_) {
	        if (!arguments.length) return _elasticX;
	        _elasticX = _;
	        return _chart;
	    };

	    /**
	    #### .labelOffsetX([x])
	    Get or set the x offset (horizontal space to the top left corner of a row) for labels on a particular row chart. Default x offset is 10px;

	    **/
	    _chart.labelOffsetX = function (o) {
	        if (!arguments.length) return _labelOffsetX;
	        _labelOffsetX = o;
	        return _chart;
	    };

	    /**
	    #### .labelOffsetY([y])
	    Get or set the y offset (vertical space to the top left corner of a row) for labels on a particular row chart. Default y offset is 15px;

	    **/
	    _chart.labelOffsetY = function (o) {
	        if (!arguments.length) return _labelOffsetY;
	        _labelOffsetY = o;
	        return _chart;
	    };

	    /**
	    #### .titleLabelOffsetx([x])
	    Get of set the x offset (horizontal space between right edge of row and right edge or text.   Default x offset is 2px;

	    **/
	    _chart.titleLabelOffsetX = function (o) {
	        if (!arguments.length) return _titleLabelOffsetX;
	        _titleLabelOffsetX = o;
	        return _chart;
	    };

	    function isSelectedRow (d) {
	        return _chart.hasFilter(_chart.cappedKeyAccessor(d));
	    }

	    return _chart.anchor(parent, chartGroup);
	};

	/**
	## Legend
	Legend is a attachable widget that can be added to other dc charts to render horizontal legend
	labels.

	```js
	chart.legend(dc.legend().x(400).y(10).itemHeight(13).gap(5))
	```

	Examples:
	* [Nasdaq 100 Index](http://dc-js.github.com/dc.js/)
	* [Canadian City Crime Stats](http://dc-js.github.com/dc.js/crime/index.html)

	**/
	dc.legend = function () {
	    var LABEL_GAP = 2;

	    var _legend = {},
	        _parent,
	        _x = 0,
	        _y = 0,
	        _itemHeight = 12,
	        _gap = 5,
	        _horizontal = false,
	        _legendWidth = 560,
	        _itemWidth = 70;

	    var _g;

	    _legend.parent = function (p) {
	        if (!arguments.length) return _parent;
	        _parent = p;
	        return _legend;
	    };

	    _legend.render = function () {
	        _parent.svg().select("g.dc-legend").remove();
	        _g = _parent.svg().append("g")
	            .attr("class", "dc-legend")
	            .attr("transform", "translate(" + _x + "," + _y + ")");
	        var legendables = _parent.legendables();

	        var itemEnter = _g.selectAll('g.dc-legend-item')
	            .data(legendables)
	            .enter()
	            .append("g")
	            .attr("class", "dc-legend-item")
	            .on("mouseover", function(d) {
	                _parent.legendHighlight(d);
	            })
	            .on("mouseout", function (d) {
	                _parent.legendReset(d);
	            })
	            .on("click", function (d) {
	                d.chart.legendToggle(d);
	            });

	        _g.selectAll('g.dc-legend-item')
	            .classed("fadeout", function(d) {
	                return d.chart.isLegendableHidden(d);
	            });

	        if (legendables.some(dc.pluck('dashstyle'))) {
	            itemEnter
	                .append("line")
	                .attr("x1", 0)
	                .attr("y1", _itemHeight / 2)
	                .attr("x2", _itemHeight)
	                .attr("y2", _itemHeight / 2)
	                .attr("stroke-width", 2)
	                .attr("stroke-dasharray", dc.pluck('dashstyle'))
	                .attr("stroke", dc.pluck('color'));
	        } else {
	            itemEnter
	                .append("rect")
	                .attr("width", _itemHeight)
	                .attr("height", _itemHeight)
	                .attr("fill", function(d){return d?d.color:"blue";});
	        }

	        itemEnter.append("text")
	                .text(dc.pluck('name'))
	                .attr("x", _itemHeight + LABEL_GAP)
	                .attr("y", function(){return _itemHeight / 2 + (this.clientHeight?this.clientHeight:13) / 2 - 2;});

	        var _cumulativeLegendTextWidth = 0;
	        var row = 0;
	        itemEnter.attr("transform", function(d, i) {
	            if(_horizontal) {
	                var translateBy = "translate(" + _cumulativeLegendTextWidth + "," + row * legendItemHeight() + ")";
	                if ((_cumulativeLegendTextWidth + _itemWidth) >= _legendWidth) {
	                    ++row ;
	                    _cumulativeLegendTextWidth = 0 ;
	                } else {
	                    _cumulativeLegendTextWidth += _itemWidth;
	                }
	                return translateBy;
	            }
	            else {
	                return "translate(0," + i * legendItemHeight() + ")";
	            }
	        });
	    };

	    function legendItemHeight() {
	        return _gap + _itemHeight;
	    }

	    /**
	    #### .x([value])
	    Set or get x coordinate for legend widget. Default: 0.
	    **/
	    _legend.x = function (x) {
	        if (!arguments.length) return _x;
	        _x = x;
	        return _legend;
	    };

	    /**
	    #### .y([value])
	    Set or get y coordinate for legend widget. Default: 0.
	    **/
	    _legend.y = function (y) {
	        if (!arguments.length) return _y;
	        _y = y;
	        return _legend;
	    };

	    /**
	    #### .gap([value])
	    Set or get gap between legend items. Default: 5.
	    **/
	    _legend.gap = function (gap) {
	        if (!arguments.length) return _gap;
	        _gap = gap;
	        return _legend;
	    };

	    /**
	    #### .itemHeight([value])
	    Set or get legend item height. Default: 12.
	    **/
	    _legend.itemHeight = function (h) {
	        if (!arguments.length) return _itemHeight;
	        _itemHeight = h;
	        return _legend;
	    };

	    /**
	    #### .horizontal([boolean])
	    Position legend horizontally instead of vertically
	    **/
	    _legend.horizontal = function(_) {
	        if (!arguments.length) return _horizontal;
	        _horizontal = _;
	        return _legend;
	    };

	    /**
	    #### .legendWidth([value])
	    Maximum width for horizontal legend. Default: 560.
	    **/
	    _legend.legendWidth = function(_) {
	        if (!arguments.length) return _legendWidth;
	        _legendWidth = _;
	        return _legend;
	    };

	    /**
	    #### .itemWidth([value])
	    legendItem width for horizontal legend. Default: 70.
	    **/
	    _legend.itemWidth = function(_) {
	        if (!arguments.length) return _itemWidth;
	        _itemWidth = _;
	        return _legend;
	    };

	    return _legend;
	};

	/**
	## Scatter Plot

	Includes: [Coordinate Grid Mixin](#coordinate-grid-mixin)

	A scatter plot chart

	#### dc.scatterPlot(parent[, chartGroup])
	Create a scatter plot instance and attach it to the given parent element.

	Parameters:

	* parent : string | node | selection | compositeChart - any valid
	 [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying
	 a dom block element such as a div; or a dom element or d3 selection.
	 If the scatter plot is a sub-chart in a [Composite Chart](#composite-chart) then pass in the parent composite
	 chart instance.

	* chartGroup : string (optional) - name of the chart group this chart instance should be placed in.
	 Interaction with a chart will only trigger events and redraws within the chart's group.

	Returns:
	A newly created scatter plot instance

	```js
	// create a scatter plot under #chart-container1 element using the default global chart group
	var chart1 = dc.scatterPlot("#chart-container1");
	// create a scatter plot under #chart-container2 element using chart group A
	var chart2 = dc.scatterPlot("#chart-container2", "chartGroupA");
	// create a sub-chart under a composite parent chart
	var chart3 = dc.scatterPlot(compositeChart);
	```

	 **/
	dc.scatterPlot = function (parent, chartGroup) {
	    var _chart = dc.coordinateGridMixin({});
	    var _symbol = d3.svg.symbol();

	    var originalKeyAccessor = _chart.keyAccessor();
	    _chart.keyAccessor(function (d) { return originalKeyAccessor(d)[0]; });
	    _chart.valueAccessor(function (d) { return originalKeyAccessor(d)[1]; });
	    _chart.colorAccessor(function (d) { return _chart._groupName; });

	    var _locator = function (d) {
	        return "translate(" + _chart.x()(_chart.keyAccessor()(d)) + "," +
	                              _chart.y()(_chart.valueAccessor()(d)) + ")";
	    };

	    var _symbolSize = 3;
	    var _highlightedSize = 5;
	    var _hiddenSize = 0;

	    _symbol.size(function(d) {
	        if(d.value === 0)
	            return _hiddenSize;
	        else if(this.filtered)
	            return Math.pow(_highlightedSize, 2);
	        else
	            return Math.pow(_symbolSize, 2);
	    });

	    dc.override(_chart, "_filter", function(filter) {
	        if (!arguments.length) return _chart.__filter();

	        return _chart.__filter(dc.filters.RangedTwoDimensionalFilter(filter));
	    });

	    _chart.plotData = function () {
	        var symbols = _chart.chartBodyG().selectAll("path.symbol")
	            .data(_chart.data());

	        symbols
	            .enter()
	        .append("path")
	            .attr("class", "symbol")
	            .attr("opacity", 0)
	            .attr("fill", _chart.getColor)
	            .attr("transform", _locator);

	        dc.transition(symbols, _chart.transitionDuration())
	            .attr("opacity", function(d) { return d.value ? 1 : 0; })
	            .attr("fill", _chart.getColor)
	            .attr("transform", _locator)
	            .attr("d", _symbol);

	        dc.transition(symbols.exit(), _chart.transitionDuration())
	            .attr("opacity", 0).remove();
	    };

	    /**
	    #### .symbol([type])
	    Get or set the symbol type used for each point. By default the symbol is a circle. See the D3
	    [docs](https://github.com/mbostock/d3/wiki/SVG-Shapes#wiki-symbol_type) for acceptable types.
	    Type can be a constant or an accessor.

	    **/
	    _chart.symbol = function(type) {
	        if(!arguments.length) return _symbol.type();
	        _symbol.type(type);
	        return _chart;
	    };

	    /**
	    #### .symbolSize([radius])
	    Set or get radius for symbols. Default: 3.

	    **/
	    _chart.symbolSize = function(s){
	        if(!arguments.length) return _symbolSize;
	        _symbolSize = s;
	        return _chart;
	    };

	    /**
	    #### .highlightedSize([radius])
	    Set or get radius for highlighted symbols. Default: 4.

	    **/
	    _chart.highlightedSize = function(s){
	        if(!arguments.length) return _highlightedSize;
	        _highlightedSize = s;
	        return _chart;
	    };

	    /**
	    #### .hiddenSize([radius])
	    Set or get radius for symbols when the group is empty. Default: 0.

	    **/
	    _chart.hiddenSize = function(s){
	        if(!arguments.length) return _hiddenSize;
	        _hiddenSize = s;
	        return _chart;
	    };

	    _chart.legendables = function () {
	        return [{chart: _chart, name: _chart._groupName, color: _chart.getColor()}];
	    };

	    _chart.legendHighlight = function (d) {
	        resizeSymbolsWhere(function (symbol) {
	            return symbol.attr('fill') == d.color;
	        }, _highlightedSize);
	        _chart.selectAll('.chart-body path.symbol').filter(function () {
	            return d3.select(this).attr('fill') != d.color;
	        }).classed('fadeout', true);
	    };

	    _chart.legendReset = function (d) {
	        resizeSymbolsWhere(function (symbol) {
	            return symbol.attr('fill') == d.color;
	        }, _symbolSize);
	        _chart.selectAll('.chart-body path.symbol').filter(function () {
	            return d3.select(this).attr('fill') != d.color;
	        }).classed('fadeout', false);
	    };

	    function resizeSymbolsWhere(condition, size) {
	        var symbols = _chart.selectAll('.chart-body path.symbol').filter(function (d) {
	            return condition(d3.select(this));
	        });
	        var oldSize = _symbol.size();
	        _symbol.size(Math.pow(size, 2));
	        dc.transition(symbols, _chart.transitionDuration()).attr("d", _symbol);
	        _symbol.size(oldSize);
	    }

	    _chart.setHandlePaths = function () {
	        // no handle paths for poly-brushes
	    };

	    _chart.extendBrush = function () {
	        var extent = _chart.brush().extent();
	        if (_chart.round()) {
	            extent[0] = extent[0].map(_chart.round());
	            extent[1] = extent[1].map(_chart.round());

	            _chart.g().select(".brush")
	                .call(_chart.brush().extent(extent));
	        }
	        return extent;
	    };

	    _chart.brushIsEmpty = function (extent) {
	        return _chart.brush().empty() || !extent || extent[0][0] >= extent[1][0] || extent[0][1] >= extent[1][1];
	    };

	    function resizeFiltered(filter) {
	        var symbols = _chart.selectAll('.chart-body path.symbol').each(function (d) {
	            this.filtered = filter && filter.isFiltered(d.key);
	        });

	        dc.transition(symbols, _chart.transitionDuration()).attr("d", _symbol);
	    }

	    _chart._brushing = function () {
	        var extent = _chart.extendBrush();

	        _chart.redrawBrush(_chart.g());

	        if (_chart.brushIsEmpty(extent)) {
	            dc.events.trigger(function () {
	                _chart.filter(null);
	                _chart.redrawGroup();
	            });

	            resizeFiltered(false);

	        } else {
	            var ranged2DFilter = dc.filters.RangedTwoDimensionalFilter(extent);
	            dc.events.trigger(function () {
	                _chart.filter(null);
	                _chart.filter(ranged2DFilter);
	                _chart.redrawGroup();
	            }, dc.constants.EVENT_DELAY);

	            resizeFiltered(ranged2DFilter);
	        }
	    };

	    _chart.setBrushY = function (gBrush) {
	        gBrush.call(_chart.brush().y(_chart.y()));
	    };

	    return _chart.anchor(parent, chartGroup);
	};

	/**
	## Number Display Widget

	Includes: [Base Mixin](#base-mixin)

	A display of a single numeric value.

	Examples:

	* [Test Example](http://dc-js.github.io/dc.js/examples/number.html)

	#### dc.numberDisplay(parent[, chartGroup])
	Create a Number Display instance and attach it to the given parent element.

	Unlike other charts, you do not need to set a dimension. Instead a group object must be provided and
	a valueAccessor that returns a single value.

	Parameters:

	* parent : string | node | selection - any valid
	 [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying
	 a dom block element such as a div; or a dom element or d3 selection.
	* chartGroup : string (optional) - name of the chart group this chart instance should be placed in.
	 The number display widget will only react to filter changes in the chart group.

	Returns:
	A newly created number display instance

	```js
	// create a number display under #chart-container1 element using the default global chart group
	var display1 = dc.numberDisplay("#chart-container1");
	```

	**/
	dc.numberDisplay = function (parent, chartGroup) {
	    var SPAN_CLASS = 'number-display';
	    var _formatNumber = d3.format(".2s");
	    var _chart = dc.baseMixin({});
	    var _html = {one:"",some:"",none:""};

	    // dimension not required
	    _chart._mandatoryAttributes(['group']);

	    /**
	    #### .html([object])
	     Gets or sets an optional object specifying HTML templates to use depending on the number
	     displayed.  The text `%number` will be replaced with the current value.
	     - one: HTML template to use if the number is 1
	     - zero: HTML template to use if the number is 0
	     - some: HTML template to use otherwise

	     ```js
	     numberWidget.html({
	         one:"%number record",
	         some:"%number records",
	         none:"no records"})
	     ```
	    **/

	    _chart.html = function(s) {
	        if (!arguments.length) return _html;
	        if(s.none)
	            _html.none = s.none;//if none available
	        else if(s.one)
	            _html.none = s.one;//if none not available use one
	        else if(s.some)
	            _html.none = s.some;//if none and one not available use some
	        if(s.one)
	            _html.one = s.one;//if one available
	        else if(s.some)
	            _html.one = s.some;//if one not available use some
	        if(s.some)
	            _html.some = s.some;//if some available
	        else if(s.one)
	            _html.some = s.one;//if some not available use one
	        return _chart;
	    };

	    /**
	    #### .value()
	    Calculate and return the underlying value of the display
	    **/

	    _chart.value = function () {
	        return _chart.data();
	    };

	    _chart.data(function (group) {
	        var valObj = group.value ? group.value() : group.top(1)[0];
	        return _chart.valueAccessor()(valObj);
	    });

	    _chart.transitionDuration(250); // good default

	    _chart._doRender = function () {
	        var newValue = _chart.value(),
	            span     = _chart.selectAll("."+SPAN_CLASS);

	        if(span.empty())
	            span = span.data([0])
	                .enter()
	                .append("span")
	                .attr("class", SPAN_CLASS);

	        span.transition()
	            .duration(_chart.transitionDuration())
	            .ease('quad-out-in')
	            .tween("text", function () {
	                var interp = d3.interpolateNumber(this.lastValue || 0, newValue);
	                this.lastValue = newValue;
	                return function (t) {
	                    var html = null, num = _chart.formatNumber()(interp(t));
	                    if(newValue===0 && (_html.none!==""))
	                        html = _html.none;
	                    else if(newValue===1 &&(_html.one!==""))
	                        html = _html.one;
	                    else if(_html.some!=="")
	                        html = _html.some;
	                    this.innerHTML = html ? html.replace("%number", num) : num;
	                };
	            });
	    };

	    _chart._doRedraw = function(){
	        return _chart._doRender();
	    };

	    /**
	    #### .formatNumber([formatter])
	    Get or set a function to format the value for the display. By default `d3.format(".2s");` is used.

	    **/
	    _chart.formatNumber = function (_) {
	        if (!arguments.length) return _formatNumber;
	        _formatNumber = _;
	        return _chart;
	    };

	    return _chart.anchor(parent, chartGroup);
	};

	/**
	 ## Heat Map

	 Includes: [Color Mixin](#color-mixin), [Margin Mixin](#margin-mixin), [Base Mixin](#base-mixin)

	 A heat map is matrix that represents the values of two dimensions of data using colors.

	 #### dc.heatMap(parent[, chartGroup])
	 Create a heat map instance and attach it to the given parent element.

	 Parameters:
	* parent : string | node | selection - any valid
	 [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying
	 a dom block element such as a div; or a dom element or d3 selection.

	* chartGroup : string (optional) - name of the chart group this chart instance should be placed in.
	 Interaction with a chart will only trigger events and redraws within the chart's group.

	 Returns:
	 A newly created heat map instance

	 ```js
	 // create a heat map under #chart-container1 element using the default global chart group
	 var heatMap1 = dc.heatMap("#chart-container1");
	 // create a heat map under #chart-container2 element using chart group A
	 var heatMap2 = dc.heatMap("#chart-container2", "chartGroupA");
	 ```

	 **/
	dc.heatMap = function (parent, chartGroup) {

	    var DEFAULT_BORDER_RADIUS = 6.75;

	    var _chartBody;

	    var _cols;
	    var _rows;
	    var _xBorderRadius = DEFAULT_BORDER_RADIUS;
	    var _yBorderRadius = DEFAULT_BORDER_RADIUS;

	    var _chart = dc.colorMixin(dc.marginMixin(dc.baseMixin({})));
	    _chart._mandatoryAttributes(['group']);
	    _chart.title(_chart.colorAccessor());

	    var _xAxisOnClick = function (d) { filterAxis(0, d); };
	    var _yAxisOnClick = function (d) { filterAxis(1, d); };
	    var _boxOnClick = function (d) {
	        var filter = d.key;
	        dc.events.trigger(function() {
	            _chart.filter(filter);
	            _chart.redrawGroup();
	        });
	    };

	    function filterAxis(axis, value) {
	        var cellsOnAxis = _chart.selectAll(".box-group").filter( function (d) {
	            return d.key[axis] == value;
	        });
	        var unfilteredCellsOnAxis = cellsOnAxis.filter( function (d) {
	            return !_chart.hasFilter(d.key);
	        });
	        dc.events.trigger(function() {
	            if(unfilteredCellsOnAxis.empty()) {
	                cellsOnAxis.each( function (d) {
	                    _chart.filter(d.key);
	                });
	            } else {
	                unfilteredCellsOnAxis.each( function (d) {
	                    _chart.filter(d.key);
	                });
	            }
	            _chart.redrawGroup();
	        });
	    }

	    dc.override(_chart, "filter", function(filter) {
	        if (!arguments.length) return _chart._filter();

	        return _chart._filter(dc.filters.TwoDimensionalFilter(filter));
	    });

	    function uniq(d,i,a) {
	        return !i || a[i-1] != d;
	    }

	    /**
	     #### .rows([values])
	     Gets or sets the values used to create the rows of the heatmap, as an array. By default, all
	     the values will be fetched from the data using the value accessor, and they will be sorted in
	     ascending order.
	     **/

	    _chart.rows = function (_) {
	        if (arguments.length) {
	            _rows = _;
	            return _chart;
	        }
	        if (_rows) return _rows;
	        var rowValues = _chart.data().map(_chart.valueAccessor());
	        rowValues.sort(d3.ascending);
	        return d3.scale.ordinal().domain(rowValues.filter(uniq));
	    };

	    /**
	     #### .cols([keys])
	     Gets or sets the keys used to create the columns of the heatmap, as an array. By default, all
	     the values will be fetched from the data using the key accessor, and they will be sorted in
	     ascending order.
	     **/
	    _chart.cols = function (_) {
	        if (arguments.length) {
	            _cols = _;
	            return _chart;
	        }
	        if (_cols) return _cols;
	        var colValues = _chart.data().map(_chart.keyAccessor());
	        colValues.sort(d3.ascending);
	        return d3.scale.ordinal().domain(colValues.filter(uniq));
	    };

	    _chart._doRender = function () {
	        _chart.resetSvg();

	        _chartBody = _chart.svg()
	          .append("g")
	          .attr("class", "heatmap")
	          .attr("transform", "translate(" + _chart.margins().left + "," + _chart.margins().top + ")");

	        return _chart._doRedraw();
	    };

	    _chart._doRedraw = function () {
	        var rows = _chart.rows(),
	            cols = _chart.cols(),
	            rowCount = rows.domain().length,
	            colCount = cols.domain().length,
	            boxWidth = Math.floor(_chart.effectiveWidth() / colCount),
	            boxHeight = Math.floor(_chart.effectiveHeight() / rowCount);

	        cols.rangeRoundBands([0, _chart.effectiveWidth()]);
	        rows.rangeRoundBands([_chart.effectiveHeight(), 0]);

	        var boxes = _chartBody.selectAll("g.box-group").data(_chart.data(), function(d,i) {
	            return _chart.keyAccessor()(d,i) + '\0' + _chart.valueAccessor()(d,i);
	        });
	        var gEnter = boxes.enter().append("g")
	            .attr("class", "box-group");

	        gEnter.append("rect")
	            .attr("class","heat-box")
	            .attr("fill", "white")
	            .on("click", _chart.boxOnClick());

	        gEnter.append("title")
	            .text(_chart.title());

	        dc.transition(boxes.selectAll("rect"), _chart.transitionDuration())
	            .attr("x", function(d,i) { return cols(_chart.keyAccessor()(d,i)); })
	            .attr("y", function(d,i) { return rows(_chart.valueAccessor()(d,i)); })
	            .attr("rx", _xBorderRadius)
	            .attr("ry", _yBorderRadius)
	            .attr("fill", _chart.getColor)
	            .attr("width", boxWidth)
	            .attr("height", boxHeight);

	        boxes.exit().remove();

	        var gCols = _chartBody.selectAll("g.cols");
	        if (gCols.empty())
	            gCols = _chartBody.append("g").attr("class", "cols axis");
	        var gColsText = gCols.selectAll('text').data(cols.domain());
	        gColsText.enter().append("text")
	              .attr("x", function(d) { return cols(d) + boxWidth/2; })
	              .style("text-anchor", "middle")
	              .attr("y", _chart.effectiveHeight())
	              .attr("dy", 12)
	              .on("click", _chart.xAxisOnClick())
	              .text(function(d) { return d; });
	        dc.transition(gColsText, _chart.transitionDuration())
	               .text(function(d) { return d; })
	               .attr("x", function(d) { return cols(d) + boxWidth/2; });
	        gColsText.exit().remove();
	        var gRows = _chartBody.selectAll("g.rows");
	        if (gRows.empty())
	            gRows = _chartBody.append("g").attr("class", "rows axis");
	        var gRowsText = gRows.selectAll('text').data(rows.domain());
	        gRowsText.enter().append("text")
	              .attr("dy", 6)
	              .style("text-anchor", "end")
	              .attr("x", 0)
	              .attr("dx", -2)
	              .on("click", _chart.yAxisOnClick())
	              .text(function(d) { return d; });
	        dc.transition(gRowsText, _chart.transitionDuration())
	              .text(function(d) { return d; })
	              .attr("y", function(d) { return rows(d) + boxHeight/2; });
	        gRowsText.exit().remove();

	        if (_chart.hasFilter()) {
	            _chart.selectAll("g.box-group").each(function (d) {
	                if (_chart.isSelectedNode(d)) {
	                    _chart.highlightSelected(this);
	                } else {
	                    _chart.fadeDeselected(this);
	                }
	            });
	        } else {
	            _chart.selectAll("g.box-group").each(function () {
	                _chart.resetHighlight(this);
	            });
	        }
	        return _chart;
	    };
	    /**
	     #### .boxOnClick([handler])
	     Gets or sets the handler that fires when an individual cell is clicked in the heatmap.
	     By default, filtering of the cell will be toggled.
	     **/
	    _chart.boxOnClick = function (f) {
	        if (!arguments.length) return _boxOnClick;
	        _boxOnClick = f;
	        return _chart;
	    };

	    /**
	     #### .xAxisOnClick([handler])
	     Gets or sets the handler that fires when a column tick is clicked in the x axis.
	     By default, if any cells in the column are unselected, the whole column will be selected,
	     otherwise the whole column will be unselected.
	     **/
	    _chart.xAxisOnClick = function (f) {
	        if (!arguments.length) return _xAxisOnClick;
	        _xAxisOnClick = f;
	        return _chart;
	    };

	    /**
	     #### .yAxisOnClick([handler])
	     Gets or sets the handler that fires when a row tick is clicked in the y axis.
	     By default, if any cells in the row are unselected, the whole row will be selected,
	     otherwise the whole row will be unselected.
	     **/
	    _chart.yAxisOnClick = function (f) {
	        if (!arguments.length) return _yAxisOnClick;
	        _yAxisOnClick = f;
	        return _chart;
	    };

	    /**
	     #### .xBorderRadius([value])
	     Gets or sets the X border radius.  Set to 0 to get full rectangles.  Default: 6.75
	     */
	    _chart.xBorderRadius = function (d) {
	        if (!arguments.length) return _xBorderRadius;
	        _xBorderRadius = d;
	        return _chart;
	    };

	    /**
	     #### .xBorderRadius([value])
	     Gets or sets the Y border radius.  Set to 0 to get full rectangles.  Default: 6.75
	     */
	    _chart.yBorderRadius = function (d) {
	        if (!arguments.length) return _yBorderRadius;
	        _yBorderRadius = d;
	        return _chart;
	    };

	    _chart.isSelectedNode = function (d) {
	        return _chart.hasFilter(d.key);
	    };

	    return _chart.anchor(parent, chartGroup);
	};

	// https://github.com/d3/d3-plugins/blob/master/box/box.js
	(function() {

	// Inspired by http://informationandvisualization.de/blog/box-plot
	d3.box = function() {
	  var width = 1,
	      height = 1,
	      duration = 0,
	      domain = null,
	      value = Number,
	      whiskers = boxWhiskers,
	      quartiles = boxQuartiles,
	      tickFormat = null;

	  // For each small multiple…
	  function box(g) {
	    g.each(function(d, i) {
	      d = d.map(value).sort(d3.ascending);
	      var g = d3.select(this),
	          n = d.length,
	          min = d[0],
	          max = d[n - 1];

	      // Compute quartiles. Must return exactly 3 elements.
	      var quartileData = d.quartiles = quartiles(d);

	      // Compute whiskers. Must return exactly 2 elements, or null.
	      var whiskerIndices = whiskers && whiskers.call(this, d, i),
	          whiskerData = whiskerIndices && whiskerIndices.map(function(i) { return d[i]; });

	      // Compute outliers. If no whiskers are specified, all data are "outliers".
	      // We compute the outliers as indices, so that we can join across transitions!
	      var outlierIndices = whiskerIndices
	          ? d3.range(0, whiskerIndices[0]).concat(d3.range(whiskerIndices[1] + 1, n))
	          : d3.range(n);

	      // Compute the new x-scale.
	      var x1 = d3.scale.linear()
	          .domain(domain && domain.call(this, d, i) || [min, max])
	          .range([height, 0]);

	      // Retrieve the old x-scale, if this is an update.
	      var x0 = this.__chart__ || d3.scale.linear()
	          .domain([0, Infinity])
	          .range(x1.range());

	      // Stash the new scale.
	      this.__chart__ = x1;

	      // Note: the box, median, and box tick elements are fixed in number,
	      // so we only have to handle enter and update. In contrast, the outliers
	      // and other elements are variable, so we need to exit them! Variable
	      // elements also fade in and out.

	      // Update center line: the vertical line spanning the whiskers.
	      var center = g.selectAll("line.center")
	          .data(whiskerData ? [whiskerData] : []);

	      center.enter().insert("line", "rect")
	          .attr("class", "center")
	          .attr("x1", width / 2)
	          .attr("y1", function(d) { return x0(d[0]); })
	          .attr("x2", width / 2)
	          .attr("y2", function(d) { return x0(d[1]); })
	          .style("opacity", 1e-6)
	        .transition()
	          .duration(duration)
	          .style("opacity", 1)
	          .attr("y1", function(d) { return x1(d[0]); })
	          .attr("y2", function(d) { return x1(d[1]); });

	      center.transition()
	          .duration(duration)
	          .style("opacity", 1)
	          .attr("y1", function(d) { return x1(d[0]); })
	          .attr("y2", function(d) { return x1(d[1]); });

	      center.exit().transition()
	          .duration(duration)
	          .style("opacity", 1e-6)
	          .attr("y1", function(d) { return x1(d[0]); })
	          .attr("y2", function(d) { return x1(d[1]); })
	          .remove();

	      // Update innerquartile box.
	      var box = g.selectAll("rect.box")
	          .data([quartileData]);

	      box.enter().append("rect")
	          .attr("class", "box")
	          .attr("x", 0)
	          .attr("y", function(d) { return x0(d[2]); })
	          .attr("width", width)
	          .attr("height", function(d) { return x0(d[0]) - x0(d[2]); })
	        .transition()
	          .duration(duration)
	          .attr("y", function(d) { return x1(d[2]); })
	          .attr("height", function(d) { return x1(d[0]) - x1(d[2]); });

	      box.transition()
	          .duration(duration)
	          .attr("y", function(d) { return x1(d[2]); })
	          .attr("height", function(d) { return x1(d[0]) - x1(d[2]); });

	      // Update median line.
	      var medianLine = g.selectAll("line.median")
	          .data([quartileData[1]]);

	      medianLine.enter().append("line")
	          .attr("class", "median")
	          .attr("x1", 0)
	          .attr("y1", x0)
	          .attr("x2", width)
	          .attr("y2", x0)
	        .transition()
	          .duration(duration)
	          .attr("y1", x1)
	          .attr("y2", x1);

	      medianLine.transition()
	          .duration(duration)
	          .attr("y1", x1)
	          .attr("y2", x1);

	      // Update whiskers.
	      var whisker = g.selectAll("line.whisker")
	          .data(whiskerData || []);

	      whisker.enter().insert("line", "circle, text")
	          .attr("class", "whisker")
	          .attr("x1", 0)
	          .attr("y1", x0)
	          .attr("x2", width)
	          .attr("y2", x0)
	          .style("opacity", 1e-6)
	        .transition()
	          .duration(duration)
	          .attr("y1", x1)
	          .attr("y2", x1)
	          .style("opacity", 1);

	      whisker.transition()
	          .duration(duration)
	          .attr("y1", x1)
	          .attr("y2", x1)
	          .style("opacity", 1);

	      whisker.exit().transition()
	          .duration(duration)
	          .attr("y1", x1)
	          .attr("y2", x1)
	          .style("opacity", 1e-6)
	          .remove();

	      // Update outliers.
	      var outlier = g.selectAll("circle.outlier")
	          .data(outlierIndices, Number);

	      outlier.enter().insert("circle", "text")
	          .attr("class", "outlier")
	          .attr("r", 5)
	          .attr("cx", width / 2)
	          .attr("cy", function(i) { return x0(d[i]); })
	          .style("opacity", 1e-6)
	        .transition()
	          .duration(duration)
	          .attr("cy", function(i) { return x1(d[i]); })
	          .style("opacity", 1);

	      outlier.transition()
	          .duration(duration)
	          .attr("cy", function(i) { return x1(d[i]); })
	          .style("opacity", 1);

	      outlier.exit().transition()
	          .duration(duration)
	          .attr("cy", function(i) { return x1(d[i]); })
	          .style("opacity", 1e-6)
	          .remove();

	      // Compute the tick format.
	      var format = tickFormat || x1.tickFormat(8);

	      // Update box ticks.
	      var boxTick = g.selectAll("text.box")
	          .data(quartileData);

	      boxTick.enter().append("text")
	          .attr("class", "box")
	          .attr("dy", ".3em")
	          .attr("dx", function(d, i) { return i & 1 ? 6 : -6; })
	          .attr("x", function(d, i) { return i & 1 ? width : 0; })
	          .attr("y", x0)
	          .attr("text-anchor", function(d, i) { return i & 1 ? "start" : "end"; })
	          .text(format)
	        .transition()
	          .duration(duration)
	          .attr("y", x1);

	      boxTick.transition()
	          .duration(duration)
	          .text(format)
	          .attr("y", x1);

	      // Update whisker ticks. These are handled separately from the box
	      // ticks because they may or may not exist, and we want don't want
	      // to join box ticks pre-transition with whisker ticks post-.
	      var whiskerTick = g.selectAll("text.whisker")
	          .data(whiskerData || []);

	      whiskerTick.enter().append("text")
	          .attr("class", "whisker")
	          .attr("dy", ".3em")
	          .attr("dx", 6)
	          .attr("x", width)
	          .attr("y", x0)
	          .text(format)
	          .style("opacity", 1e-6)
	        .transition()
	          .duration(duration)
	          .attr("y", x1)
	          .style("opacity", 1);

	      whiskerTick.transition()
	          .duration(duration)
	          .text(format)
	          .attr("y", x1)
	          .style("opacity", 1);

	      whiskerTick.exit().transition()
	          .duration(duration)
	          .attr("y", x1)
	          .style("opacity", 1e-6)
	          .remove();
	    });
	    d3.timer.flush();
	  }

	  box.width = function(x) {
	    if (!arguments.length) return width;
	    width = x;
	    return box;
	  };

	  box.height = function(x) {
	    if (!arguments.length) return height;
	    height = x;
	    return box;
	  };

	  box.tickFormat = function(x) {
	    if (!arguments.length) return tickFormat;
	    tickFormat = x;
	    return box;
	  };

	  box.duration = function(x) {
	    if (!arguments.length) return duration;
	    duration = x;
	    return box;
	  };

	  box.domain = function(x) {
	    if (!arguments.length) return domain;
	    domain = x == null ? x : d3.functor(x);
	    return box;
	  };

	  box.value = function(x) {
	    if (!arguments.length) return value;
	    value = x;
	    return box;
	  };

	  box.whiskers = function(x) {
	    if (!arguments.length) return whiskers;
	    whiskers = x;
	    return box;
	  };

	  box.quartiles = function(x) {
	    if (!arguments.length) return quartiles;
	    quartiles = x;
	    return box;
	  };

	  return box;
	};

	function boxWhiskers(d) {
	  return [0, d.length - 1];
	}

	function boxQuartiles(d) {
	  return [
	    d3.quantile(d, .25),
	    d3.quantile(d, .5),
	    d3.quantile(d, .75)
	  ];
	}

	})();

	/**
	 ## Box Plot

	 Includes: [Coordinate Grid Mixin](#coordinate-grid-mixin)

	 A box plot is a chart that depicts numerical data via their quartile ranges.

	 #### dc.boxPlot(parent[, chartGroup])
	 Create a box plot instance and attach it to the given parent element.

	 Parameters:
	 * parent : string | node | selection - any valid
	 [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) representing
	 a dom block element such as a div; or a dom element or d3 selection.
	* chartGroup : string (optional) - name of the chart group this chart instance should be placed in.
	 Interaction with a chart will only trigger events and redraws within the chart's group.

	 Returns:
	 A newly created box plot instance

	 ```js
	 // create a box plot under #chart-container1 element using the default global chart group
	 var boxPlot1 = dc.boxPlot("#chart-container1");
	 // create a box plot under #chart-container2 element using chart group A
	 var boxPlot2 = dc.boxPlot("#chart-container2", "chartGroupA");
	 ```

	 **/
	dc.boxPlot = function (parent, chartGroup) {
	    var _chart = dc.coordinateGridMixin({});

	    var _whisker_iqr_factor = 1.5;
	    var _whiskers_iqr = default_whiskers_iqr;
	    var _whiskers = _whiskers_iqr(_whisker_iqr_factor);

	    var _box = d3.box();
	    var _tickFormat = null;

	    var _boxWidth = function (innerChartWidth, xUnits) {
	        if (_chart.isOrdinal())
	            return _chart.x().rangeBand();
	        else
	            return innerChartWidth / (1 + _chart.boxPadding()) / xUnits;
	    };

	    // default padding to handle min/max whisker text
	    _chart.yAxisPadding(12);

	    // default to ordinal
	    _chart.x(d3.scale.ordinal());
	    _chart.xUnits(dc.units.ordinal);

	    // valueAccessor should return an array of values that can be coerced into numbers
	    // or if data is overloaded for a static array of arrays, it should be `Number`.
	    // Empty arrays are not included.
	    _chart.data(function(group) {
	        return group.all().map(function (d) {
	            d.map = function(accessor) { return accessor.call(d,d); };
	            return d;
	        }).filter(function (d) {
	            var values = _chart.valueAccessor()(d);
	            return values.length !== 0;
	        });
	    });

	    /**
	    #### .boxPadding([padding])
	    Get or set the spacing between boxes as a fraction of box size. Valid values are within 0-1.
	    See the [d3 docs](https://github.com/mbostock/d3/wiki/Ordinal-Scales#wiki-ordinal_rangeBands)
	    for a visual description of how the padding is applied.

	    Default: 0.8
	    **/
	    _chart.boxPadding = _chart._rangeBandPadding;
	    _chart.boxPadding(0.8);

	    /**
	    #### .outerPadding([padding])
	    Get or set the outer padding on an ordinal box chart. This setting has no effect on non-ordinal charts
	    or on charts with a custom `.boxWidth`. Will pad the width by `padding * barWidth` on each side of the chart.

	    Default: 0.5
	    **/
	    _chart.outerPadding = _chart._outerRangeBandPadding;
	    _chart.outerPadding(0.5);

	    /**
	     #### .boxWidth(width || function(innerChartWidth, xUnits) { ... })
	     Get or set the numerical width of the boxplot box. The width may also be a function taking as
	     parameters the chart width excluding the right and left margins, as well as the number of x
	     units.
	     **/
	    _chart.boxWidth = function(_) {
	        if (!arguments.length) return _boxWidth;
	        _boxWidth = d3.functor(_);
	        return _chart;
	    };

	    var boxTransform = function (d, i) {
	        var xOffset = _chart.x()(_chart.keyAccessor()(d,i));
	        return "translate(" + xOffset + ",0)";
	    };

	    _chart._preprocessData = function () {
	        if (_chart.elasticX()) {
	            _chart.x().domain([]);
	        }
	    };

	    _chart.plotData = function () {
	        var _calculatedBoxWidth = _boxWidth(_chart.effectiveWidth(), _chart.xUnitCount());

	        _box.whiskers(_whiskers)
	            .width(_calculatedBoxWidth)
	            .height(_chart.effectiveHeight())
	            .value(_chart.valueAccessor())
	            .domain(_chart.y().domain())
	            .duration(_chart.transitionDuration())
	            .tickFormat(_tickFormat);

	        var boxesG = _chart.chartBodyG().selectAll('g.box').data(_chart.data(), function (d) { return d.key; });

	        renderBoxes(boxesG);
	        updateBoxes(boxesG);
	        removeBoxes(boxesG);

	        _chart.fadeDeselectedArea();
	    };

	    function renderBoxes(boxesG) {
	        var boxesGEnter = boxesG.enter().append("g");

	        boxesGEnter
	            .attr("class", "box")
	            .attr("transform", boxTransform)
	            .call(_box)
	            .on("click", function(d) {
	                _chart.filter(d.key);
	                _chart.redrawGroup();
	            });
	    }

	    function updateBoxes(boxesG) {
	        dc.transition(boxesG, _chart.transitionDuration())
	            .attr("transform", boxTransform)
	            .call(_box)
	            .each(function() {
	                d3.select(this).select('rect.box').attr("fill", _chart.getColor);
	            });
	    }

	    function removeBoxes(boxesG) {
	        boxesG.exit().remove().call(_box);
	    }

	    _chart.fadeDeselectedArea = function () {
	        if (_chart.hasFilter()) {
	            _chart.g().selectAll("g.box").each(function (d) {
	                if (_chart.isSelectedNode(d)) {
	                    _chart.highlightSelected(this);
	                } else {
	                    _chart.fadeDeselected(this);
	                }
	            });
	        } else {
	            _chart.g().selectAll("g.box").each(function () {
	                _chart.resetHighlight(this);
	            });
	        }
	    };

	    _chart.isSelectedNode = function (d) {
	        return _chart.hasFilter(d.key);
	    };

	    _chart.yAxisMin = function () {
	        var min = d3.min(_chart.data(), function (e) {
	            return d3.min(_chart.valueAccessor()(e));
	        });
	        return dc.utils.subtract(min, _chart.yAxisPadding());
	    };

	    _chart.yAxisMax = function () {
	        var max = d3.max(_chart.data(), function (e) {
	            return d3.max(_chart.valueAccessor()(e));
	        });
	        return dc.utils.add(max, _chart.yAxisPadding());
	    };

	    /**
	     #### .tickFormat()
	     Set the numerical format of the boxplot median, whiskers and quartile labels. Defaults to
	     integer formatting.
	     ```js
	     // format ticks to 2 decimal places
	     chart.tickFormat(d3.format(".2f"));
	     ```
	     **/
	    _chart.tickFormat = function(x) {
	        if (!arguments.length) return _tickFormat;
	        _tickFormat = x;
	        return _chart;
	    };

	    // Returns a function to compute the interquartile range.
	    function default_whiskers_iqr(k) {
	        return function (d) {
	            var q1 = d.quartiles[0],
	                q3 = d.quartiles[2],
	                iqr = (q3 - q1) * k,
	                i = -1,
	                j = d.length;
	            while (d[++i] < q1 - iqr);
	            while (d[--j] > q3 + iqr);
	            return [i, j];
	        };
	    }

	    return _chart.anchor(parent, chartGroup);
	};

	/**
	## Bar Gauge

	Includes: [Base Mixin](#base-mixin)

	The Bar Gauge is a way to see data displacement based on a total capacity. An example would be showing how each country's population compares to the largest country's population in the world.

	#### dc.barGauge(parent[, chartGroup])
	Parameters:
	* parent : string | node | selection - any valid
	 [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying
	 a dom block element such as a div; or a dom element or d3 selection.

	* chartGroup : string (optional) - name of the chart group this chart instance should be placed in.
	 Interaction with a chart will only trigger events and redraws within the chart's group.

	 Returns:
	A newly created choropleth chart instance

	```js
	totalFundingBar = dc.barGauge("#total-funding-gauge")
	                                .height(150)
	                                .width(300)
	                                .margins({top: 5, right: 5, bottom: 5, left: 5}) //margins are good for positioning
	                                .group(totalFundingGroup)
	                                .dimension(countryDimension)
	                                .valueAccessor(function(d){return d;})
	                                .totalCapacity(maxCountryValue)
	                                .orientation('horizontal') //vertical still needs work
	                                .gap(5)
	                                .drawScale(true); //draw the scale around the gauge
	```
	**/
	dc.barGauge = function (parent, chartGroup) {

	    var _chart = dc.marginMixin(dc.baseMixin({}));
	    var _filledValue,
	        _oldValue,
	        _totalCapacity,
	        _orientation = 'horizontal', _usePercentageForLengthCalc = false,
	        _gap = 0,
	        _height = null, _width = null,
	        _xAxis = d3.svg.axis().orient("bottom"), _x, _g,
	        _drawScale = false, _markers,
	        _markerPadding = {top:5,right:5,bottom:5,left:5},
	        _markerFormat = d3.format(".0f"), _tickFormat = d3.format(",.0f"),
	        _markerTitle = function(marker) {
	            var title = "";
	            if(marker.member) {
	                title = title + marker.member + ": ";
	            }
	            return title + _markerFormat(marker.value);
	        },
	        _defaultMarkerHeight = 40, _defaultMarkerWidth = 20, _defaultToolTips = true;

	    //dimension is not required because this comp onent only has one dimension
	    _chart._mandatoryAttributes (['group']);

	    _chart.transitionDuration(700); // good default

	    //Calculate the scale for the axis. Only for x axis as of now.
	    function calculateAxisScale() {
	        var extent = [0, _chart.totalCapacity()];
	        //_x lets us use d3 to scale the real input value to the output value
	        _x = d3.scale.linear().domain(extent)
	            .range([0, _chart.effectiveWidth()]);
	        _xAxis.scale(_x);
	        _xAxis.tickFormat(_tickFormat);
	    }

	    //draw the axis based on the scale
	    function drawAxis() {
	        var axisG = _g.select("g.axis");

	        calculateAxisScale();

	        axisG = _g.append("g").attr("class", "axis")
	            .attr("transform", "translate(0, " + _chart.effectiveHeight()+ ")");
	        dc.transition(axisG, _chart.transitionDuration())
	            .call(_xAxis);
	    }

	    //draw the tick markers on the scale.
	    function drawGridLines() {
	        _g.selectAll("g.tick")
	            .select("line.grid-line")
	            .remove();

	        _g.selectAll("g.tick")
	            .append("line")
	            .attr("class", "grid-line")
	            .attr("x1", 0)
	            .attr("y1", 0)
	            .attr("x2", 0)
	            .attr("y2", function() {
	                return -_chart.effectiveHeight();
	            });
	    }

	    _chart.value = function() {
	        return _chart.data();
	    };

	    _chart.data(function(group) {
	        var valObj = group.value ? group.value() : group.top(1)[0];
	        return _chart.valueAccessor()(valObj);

	    });

	    /**
	        #### .orientation(string)
	        Set the orientation of the bar 'horizontal' or 'vertical'. Only horizontal is fully working at this time. 
	    **/
	    _chart.orientation = function(_) {
	        if(!arguments.length) return _orientation;
	        _orientation = _;
	        return _chart;
	    };


	    /**
	        #### .usePercentageLength(Boolean)
	        Set the calculation for the length, and filled length to use percentages, not exact values. The
	        svg will be set so its long side is 100% of the parent container. 
	        This can be useful for when we want the length of the bar to fill up its parent element, 
	        but do not know the size of the parent element. Defaults to false.
	    **/
	    _chart.usePercentageLength = function(_) {
	        if(!arguments.length) return _usePercentageForLengthCalc;
	        _usePercentageForLengthCalc = _;
	        return _chart;
	    };
	    /**
	        #### .gap(number)
	        Get or set the gap between the bar and the scale. Default gap is 5px.
	    **/
	    _chart.gap = function (_) {
	        if (!arguments.length) return _gap;
	        _gap = _;
	        return _chart;
	    };

	    /**
	        #### .markerPadding(Object)
	        Pad the space around marker text. Defaults to 5px.
	    **/
	    _chart.markerPadding = function (_) {
	        if (!arguments.length) return _markerPadding;
	        _markerPadding = _;
	        return _chart;
	    };

	    /**
	        #### .markerWidth(Number)
	        Explicitly set marker width. The marker dimensions are set based on the marker text offset dimensions.
	        Setting this explicitly is useful for when a resize/redraw occurs and the text is momentarily 0x0.
	    **/
	    _chart.defaultMarkerWidth = function (_) {
	        if (!arguments.length) return _defaultMarkerWidth;
	        _defaultMarkerWidth = _;
	        return _chart;
	    };

	    /**
	        #### .markerHeight(Number)
	        Explicitly set marker height. The marker dimensions are set based on the marker text offset dimensions.
	        Setting this explicitly is useful for when a resize/redraw occurs and the text is momentarily 0x0.
	    **/
	    _chart.defaultMarkerHeight = function (_) {
	        if (!arguments.length) return _defaultMarkerHeight;
	        _defaultMarkerHeight = _;
	        return _chart;
	    };

	    /** 
	        #### .defaultToolTips(boolean)
	        Set whether or not to show the default tool tips. Defaults to true.
	    **/
	    _chart.defaultToolTips = function (_) {
	        if (!arguments.length) return _defaultToolTips;
	        _defaultToolTips = _;
	        return _chart;
	    };

	    /**
	        #### .totalCapacity(number)
	        Explicitly set total capacity of the chart.
	    **/
	    _chart.totalCapacity = function(_) {
	        if (!arguments.length) return _totalCapacity.call(_chart);
	        _totalCapacity = d3.functor(_);
	        _chart.expireCache();
	        return _chart;
	    };

	    /**
	        #### .filledValue(number)
	        Explicitly set filled value.
	    **/
	    _chart.filledValue = function(_) {
	        if(!arguments.length) return _filledValue;
	        _filledValue = _;
	        return _chart;
	    };

	    /**
	        #### .drawScale(boolean)
	        Explicitly set whether or not to draw the scale. Defaults to false.
	    **/
	    _chart.drawScale = function(_) {
	        if(!arguments.length) return _drawScale;
	        _drawScale = _;
	        return _chart;
	    };

	    /**
	        #### .drawScale(markerObjArray)
	        Set markers with an array of marker objects. The structure should look similar the following:
	        ```js
	        markerObjArray = [{value: someValue, statName: "Median"}, 
	            {value: otherValue, statName: ""Mean"},
	            {value: maxValue, member: maxName, statName: "Max"}];
	        ```
	        If the member is specified, the tooltip will show "member: value"
	    **/
	    _chart.setMarkers = function(_) {
	        if (!arguments.length) return _markers.call(_chart);
	        _markers = d3.functor(_);
	        _chart.expireCache();
	        return _chart;
	    };

	    /**
	        #### .markerTitle(function)
	        Set the function to display what goes in the SVG title/tooltip.
	    **/
	    _chart.markerTitle = function(_) {
	        if (!arguments.length) return _markerTitle; 
	        _markerTitle = _;
	        return _chart;
	    };

	    function placeMarkers(markers) {
	        if(!arguments.length) {
	            _markers().forEach(function(marker) {
	                var markerGroup = _g.select("g.marker-labels-top")
	                  .append("g")
	                    .classed("marker-tick", true)
	                    .attr("transform","translate(" + _x(marker.value) + ", 0)");

	                markerGroup.data([{markerName: marker.statName, memberValue: marker.value, memberName: marker.member}])
	                  .enter();
	                if(_defaultToolTips)
	                    markerGroup.append("title")
	                        .text(_markerTitle(marker));

	                markerGroup.append("text")
	                    .text(marker.statName)
	                    .attr("style", "text-anchor: middle")
	                    .attr("transform", "translate(0," + -_markerPadding.bottom + ")");

	                var textWidth = markerGroup.select("text").property("offsetWidth");
	                var textHeight = markerGroup.select("text").property("offsetHeight");

	                //need default height/width incase parent text elements are hidden in dom resulting in height/width of zero
	                var appliedTextWidth = (textWidth > 0) ? textWidth : _defaultMarkerWidth; 
	                var appliedTextHeight = (textHeight > 0) ? textHeight : _defaultMarkerHeight;
	                markerGroup.insert("rect", "text")
	                    .classed("marker-rect", true)
	                    .attr("x", -appliedTextWidth/2 - _markerPadding.left)
	                    .attr("y", -appliedTextHeight - _markerPadding.top - _markerPadding.bottom)
	                    .attr("width", appliedTextWidth + _markerPadding.left + _markerPadding.right)
	                    .attr("height", appliedTextHeight + _markerPadding.top + _markerPadding.bottom);

	                markerGroup.append("line")
	                    .classed("marker-line", true)
	                    .attr("x1", 0)
	                    .attr("y1", 0)
	                    .attr("x2", 0)
	                    .attr("y2", 5);
	                    
	                    // .attr("x", (_markerFormat) ? _markerFormat(_x(marker.value)) : _x(marker.value));
	                    
	                
	            });
	            return;
	        }

	        markers.forEach(function(marker) {
	            var markerGroup = _g.select("g.marker-labels-top")
	                    .append("g")
	                    .classed("marker-tick", true)
	                    .attr("transform","translate(" + _x(marker.value) + ", 0)");

	            markerGroup.data([{markerName: marker.statName, memberValue: marker.value, memberName: marker.member}])
	                .enter();

	            if(_defaultToolTips)
	                markerGroup.append("title")
	                    .text(_markerTitle(marker));

	            markerGroup.append("text")
	                .text(marker.statName)
	                .attr("style", "text-anchor: middle")
	                .attr("transform", "translate(0," + -_markerPadding.bottom + ")");

	            var textWidth = markerGroup.select("text").property("offsetWidth");
	            var textHeight = markerGroup.select("text").property("offsetHeight");

	            markerGroup.insert("rect", "text")
	                .classed("marker-rect", true)
	                .attr("x", -textWidth/2 - _markerPadding.left)
	                .attr("y", -textHeight - _markerPadding.top - _markerPadding.bottom)
	                .attr("width", textWidth + _markerPadding.left + _markerPadding.right)
	                .attr("height", textHeight + _markerPadding.top + _markerPadding.bottom);

	            markerGroup.append("line")
	                .classed("marker-line", true)
	                .attr("x1", 0)
	                .attr("y1", 0)
	                .attr("x2", 0)
	                .attr("y2", 5);
	        });

	    }

	    /**
	        #### .markerFormat(function)
	        Pass a formatter function like d3.format() to format marker values. 
	    **/
	    _chart.markerFormat = function(_) {
	        if(!arguments.length) return _markerFormat;
	        _markerFormat = _;
	        return _chart;
	        
	    };

	    /**
	        #### .tickFormat(function)
	        Pass a formatter function like d3.format() to format tick values. 
	    **/
	    _chart.tickFormat = function(_) {
	        if(!arguments.length) return _tickFormat;
	        _tickFormat = _;
	        return _chart;
	    };

	    /**
	        #### .initializeRectangles(ParentSelector, number, number, string)
	        Add the background and foreground rectangles. Set the foreground
	        rectangle to the calculated fill percentage.
	    **/
	    var initializeRectangles = function(orientation) {
	        //the percentage value will be how much the bar is actually filled up
	        var _percentFilled = (_filledValue/_totalCapacity() * 100 <= 100) ? _filledValue/_totalCapacity() * 100 : 100;
	        var _oldpercentFilled = (_oldValue/_totalCapacity() * 100 <= 100) ? _oldValue/_totalCapacity() * 100 : 100;
	        var filledX, filledY,
	            newFilledX, newFilledY,
	            offsetX, offsetY,
	            containingX, containingY,
	            actualThickness, myRectangle, rect_g;

	        if(orientation == 'vertical') {
	            //NEED TO FIX
	            actualThickness = _chart.width() - _chart.margins().left - _chart.margins().right - 2*_gap;
	            filledX = actualThickness;
	            filledY = _chart.effectiveHeight() * (_oldpercentFilled/100);
	            newFilledX = filledX;
	            newFilledY = _chart.effectiveHeight() * (_percentFilled/100);
	            containingX = actualThickness;
	            containingY = _chart.effectiveHeight();
	            offsetX = _gap;
	            offsetY = 100 - _percentFilled + "%";
	            _chart.root().select('svg')
	                .attr("width", _chart.width())
	                .attr("height", _chart.height());

	            rect_g = _g.append("g").classed("rectangle-container", true);
	            rect_g.append('rect')
	                .classed("dc-bar-gauge-background", true)
	                .attr('width', function(){ return containingX;})
	                .attr('height', function(){return containingY;})
	                .attr('x', 0)
	                .attr('y', 0);
	            if(_defaultToolTips)
	                rect_g.append("title")
	                    .text(_markerFormat(_filledValue));

	            rect_g.append('rect')
	                .classed("dc-bar-gauge-foreground", true)
	                .attr('width', function(){return filledX;})
	                .attr('height', function(){return filledY;})
	                .attr('x', offsetX)
	                .attr('y', offsetY);
	            if(_defaultToolTips)
	                rect_g.append("title")
	                    .text(_markerFormat(_filledValue));
	            myRectangle = _chart.selectAll('.dc-bar-gauge-foreground');

	            dc.transition(myRectangle, _chart.transitionDuration())
	                .attr('width', function(){return newFilledX;})
	                .attr('height', function(){return newFilledY;});
	            
	        }
	        else { //horizontal
	            actualThickness = _chart.height() - _chart.margins().top - _chart.margins().bottom - 2*_gap;
	            filledX = (_usePercentageForLengthCalc) ? _oldpercentFilled + "%" : _chart.effectiveWidth() * (_oldpercentFilled/100);
	            filledY = actualThickness;
	            newFilledX = (_usePercentageForLengthCalc) ? _percentFilled + "%" : _chart.effectiveWidth() * (_percentFilled/100) ;
	            newFilledY = filledY;
	            containingX = (_usePercentageForLengthCalc) ? "100%" : _chart.effectiveWidth();
	            containingY = actualThickness;
	            offsetX = 0;
	            offsetY = _gap;
	            _chart.root().select('svg')
	                .attr("height", _chart.height());
	                

	            rect_g = _g.append("g").classed("rectangle-container", true);
	            rect_g.append('rect')
	                .classed("dc-bar-gauge-background", true)
	                .attr('width', function(){ return containingX;})
	                .attr('height', function(){return containingY;})
	                .attr('x', 0)
	                .attr('y', offsetY);
	            if(_defaultToolTips)
	                rect_g.append("title")
	                    .text(_markerFormat(_filledValue));
	            rect_g.append('rect')
	                .classed("dc-bar-gauge-foreground", true)
	                .attr('width', function(){return filledX;})
	                .attr('height', function(){return filledY;})
	                .attr('x', offsetX)
	                .attr('y', offsetY);
	            if(_defaultToolTips)
	                rect_g.append("title")
	                    .text(_markerFormat(_filledValue));
	            myRectangle = _chart.selectAll('.dc-bar-gauge-foreground');

	            dc.transition(myRectangle, _chart.transitionDuration())
	                .attr('width', function(){return newFilledX;})
	                .attr('height', function(){return newFilledY;});
	        }
	    };

	    _chart._doRender = function () {
	        _oldValue = (_filledValue === undefined) ? 0 : _filledValue;
	        _filledValue = (_chart.value() >= 0) ? _chart.value() : 0;
	        _chart.root().classed('dc-bar-gauge', true);
	        _chart.root().classed('dc-chart', false);
	        _chart.root().html('');
	        _chart.resetSvg();

	        //Add data to the svg node
	        _chart.svg().data([{totalCapacity: _chart.totalCapacity(), filledValue: _chart.value()}])
	          .enter();

	        _g = _chart.svg()
	            .append('g')
	            .attr("transform", "translate(" + _chart.margins().left + "," + _chart.margins().top + ")");

	        if(_drawScale === true) {
	            drawAxis();
	            drawGridLines();
	            _g.append("g").classed("marker-labels-top", true);
	            placeMarkers();
	        }

	        initializeRectangles(_orientation);


	    };


	    _chart._doRedraw = function(){
	        return _chart._doRender();
	    };

	    return _chart.anchor(parent, chartGroup);
	};

	/**
	## Geo Bubble Overlay Chart

	Includes: [Base Mixin](#base-mixin)

	The Geo Bubble Overlay chart is a mix of the Geo Choropleth chart and the Bubble Graph chart.
	This chart puts bubbles over the centroid of each defined area. 

	#### dc.geoBubbleOverlayChart(parent[, chartGroup])
	Parameters:
	* parent : string | node | selection - any valid
	 [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying
	 a dom block element such as a div; or a dom element or d3 selection.

	* chartGroup : string (optional) - name of the chart group this chart instance should be placed in.
	 Interaction with a chart will only trigger events and redraws within the chart's group.
	 
	 Returns:
	A newly created choropleth chart instance

	```js
	map = dc.geoBubbleOverlayChart('#map')
	      .width(width)
	      .height(height)
	      .dimension(countryDimension)
	      .group(countryGroup)
	      .projection(projection)
	      .setGeoJson(countriesJson.features, 'country', function (d) {
	        return d.id;
	      })
	      .radiusValueAccessor(function(d){
	        var r = Math.sqrt(d.value/1000000);
	        if (r < 0) return 0;
	        return Math.abs(r);
	      });
	```
	**/
	dc.geoBubbleOverlayChart = function (parent, chartGroup) {
	    var _chart = dc.bubbleMixin(dc.baseMixin({}));

	    var _elasticRadius = false;

	    _chart.transitionDuration(750); //default transition

	    var _geoPath = d3.geo.path();
	    var _projectionFlag;
	    _chart.GEO_LAYER_CLASS = 'geoLayer';
	    var _geoFill = '#ccc';

	    var _bubbleLabel;

	    var _geoJson;

	    var _bubbleG;

	    _chart.geoPath = function(){
	        return _geoPath;
	    };

	    /**
	        #### bubbleLocator(number)
	        Finds the centroid(like a 2d Center of Mass) or the geometric region. 
	    **/
	    var _bubbleLocator = function(d) {
	        var centroid;
	        if (d.key === "" || d.key === undefined || d.key === null || d.key === 0 || d.key === '0'){
	            centroid = [-500,-500];            
	        }else{
	            var selector = "g."+ _chart.GEO_LAYER_CLASS +" g."+ dc.utils.nameToId(d.key);
	            var region = _chart.svg().select(selector); 
	            try {
	                centroid = _geoPath.centroid(region.datum());
	            }catch(err){
	                centroid = [-500,-500]; 
	            }
	        }
	        return "translate(" + (centroid[0]) + "," + (centroid[1]) + ")";
	    };

	    _chart.bubbleLabel = function(_) {
	        if (!arguments.length) return _bubbleLabel;
	        _bubbleLabel = _;
	        return _chart;    
	    };

	    function bubbleLabelFunction(d) {
	        if(_chart.bubbleLabel() === undefined){
	            return _chart.label()(d);
	        }
	        return _chart.bubbleLabel()(d);
	    }

	    var labelOpacity = function (d) {
	        return (_chart.bubbleR(d) > _chart.minRadiusWithLabel()) ? 1 : 0;
	    };

	    _chart._doRenderLabel = function (bubbleGEnter) {
	        if (_chart.renderLabel()) {
	            var label = bubbleGEnter.select("text");

	            if (label.empty()) {
	                label = bubbleGEnter.append("text")
	                    .attr("text-anchor", "middle")
	                    .attr("dy", ".3em")
	                    .on("click", _chart.onClick);
	            }

	            label
	                .attr("opacity", 0)
	                .text(bubbleLabelFunction);
	            dc.transition(label, _chart.transitionDuration())
	                .attr("opacity", labelOpacity);
	        }
	    };

	    _chart.doUpdateLabels = function (bubbleGEnter) {
	        if (_chart.renderLabel()) {
	            var labels = bubbleGEnter.selectAll("text")
	                .text(bubbleLabelFunction);
	            dc.transition(labels, _chart.transitionDuration())
	                .attr("opacity", labelOpacity);
	        }
	    };

	    _chart.bubbleLocator = function(_) {
	        if (!arguments.length) return _bubbleLocator;
	        _bubbleLocator = _;
	        return _chart;
	    };

	    _chart.elasticRadius = function(_) {
	        if (!arguments.length) return _elasticRadius;
	        _elasticRadius = _;
	        return _chart;
	    };

	    _chart._doRender = function () {
	        plotGeo();
	        
	        _projectionFlag = false;
	        plotData();
	    };

	    _chart._doRedraw = function () {
	        _bubbleG = _chart.svg().selectAll("g." + _chart.BUBBLE_NODE_CLASS)
	            .data(_chart.data(), function (d) { return d.key; });
	        updateNodes(_bubbleG);
	        if(_projectionFlag) {
	            _chart.svg().selectAll("g." + geoJson().name + " path").attr("d", _geoPath);
	        }
	        _projectionFlag = false;
	        _chart.fadeDeselectedArea();
	    };

	    //_chart.on("postRender", plotData);

	    function plotData() {
	        if (_elasticRadius)
	            _chart.r().domain([_chart.rMin(), _chart.rMax()]);

	        _chart.r().range([_chart.MIN_RADIUS/2, (_chart.width()/10) *  _chart.maxBubbleRelativeSize()]);

	        _bubbleG = _chart.svg().selectAll("g." + _chart.BUBBLE_NODE_CLASS)
	            .data(_chart.data(), function (d) { return d.key; });

	        renderNodes(_bubbleG);

	        updateNodes(_bubbleG);

	        removeNodes(_bubbleG);

	        _chart.fadeDeselectedArea();
	    }

	    function renderNodes(bubbleG) {
	        var bubbleGEnter = bubbleG.enter().append("g");

	        bubbleGEnter
	            .attr("class", function(d) {
	                return _chart.BUBBLE_NODE_CLASS + ' ' + dc.utils.nameToId(d.key);
	            }) 
	            .attr("transform", _bubbleLocator)
	            .append("circle").attr("class", function(d, i) {
	                return _chart.BUBBLE_CLASS + " _" + i;
	            })
	            .on("click", _chart.onClick)
	            .attr("fill", _chart.getColor)
	            .attr("r", 0);
	        dc.transition(bubbleG, _chart.transitionDuration())
	            .selectAll("circle." + _chart.BUBBLE_CLASS)
	            .attr("r", function(d) {
	                return _chart.bubbleR(d);
	            })
	            .attr("opacity", function(d) {
	                return (_chart.bubbleR(d) > 0) ? 1 : 0;
	            });

	        _chart._doRenderLabel(bubbleGEnter);

	        _chart._doRenderTitles(bubbleGEnter);
	    }

	    function updateNodes(bubbleG) {
	        dc.transition(bubbleG, _chart.transitionDuration())
	            .attr("transform", _bubbleLocator)
	            .selectAll("circle." + _chart.BUBBLE_CLASS)
	            .attr("fill", _chart.getColor)
	            .attr("r", function(d) {
	                return _chart.bubbleR(d);
	            })
	            .attr("opacity", function(d) {
	                return (_chart.bubbleR(d) > 0) ? 1 : 0;
	            });

	        _chart.doUpdateLabels(bubbleG);
	        _chart.doUpdateTitles(bubbleG);
	    }

	    function removeNodes(bubbleG) {
	        bubbleG.exit().remove();
	    }

	    function bubbleX(d) {
	        var x = _chart.x()(_chart.keyAccessor()(d));
	        if (isNaN(x))
	            x = 0;
	        return x;
	    }

	    function bubbleY(d) {
	        var y = _chart.y()(_chart.valueAccessor()(d));
	        if (isNaN(y))
	            y = 0;
	        return y;
	    }

	    _chart.renderBrush = function(g) {
	        // override default x axis brush from parent chart
	    };

	    _chart.redrawBrush = function(g) {
	        // override default x axis brush from parent chart
	        _chart.fadeDeselectedArea();
	    };

	    function plotGeo() {
	        _chart.resetSvg();

	        var states = _chart.svg().append("g")
	            .attr("class", _chart.GEO_LAYER_CLASS);

	        var regionG = states.selectAll("g." + geoJson().name)
	            .data(geoJson().data)
	            .enter()
	            .append("g")
	            .attr("class", geoJson().name);

	        regionG
	            .append("path")
	            .attr("fill", _geoFill)
	            .attr("d", _geoPath);

	        renderRegionG();

	    }

	    function renderRegionG() {
	        _chart.svg()
	            .selectAll("g." + _chart.GEO_LAYER_CLASS + " g." + geoJson().name)
	            .attr("class", function (d) {
	                var layerNameClass = geoJson().name;
	                var regionClass = dc.utils.nameToId(geoJson().keyAccessor(d));
	                var baseClasses = layerNameClass + " " + regionClass;
	                return baseClasses;
	            });
	    }


	    function getKey(d) {
	        return geoJson().keyAccessor(d);
	    }

	    function geoJson() {
	        return _geoJson;
	    }

	    _chart.onClick = function (d) {
	        var filter = d.key;
	        dc.events.trigger(function () {
	            _chart.filter(filter);
	            dc.redrawAll(_chart.chartGroup());
	        });
	    };


	    /**
	        #### .setGeoJson(json, string, key)
	        Set the geometric map features from the Geo Json data. 
	    **/
	    _chart.setGeoJson = function (json, name, keyAccessor) {
	        _geoJson = {name: name, data: json, keyAccessor: keyAccessor};
	        return _chart;
	    };

	    /**
	        #### .projection(MapProjection)
	        Use a different map projection with this bubble chart. 
	    **/
	    _chart.projection = function (projection) {
	        _geoPath.projection(projection);
	        _projectionFlag = true;
	        return _chart;
	    };

	    _chart.geoJson = function () {
	        return _geoJson;
	    };

	    return _chart.anchor(parent, chartGroup);
	};

	 /**
	## Arc Gauge

	Includes: [Base Mixin](#base-mixin)
	 
	The Arc Gauge is a way to see data displacement similar to the Bar Gauge
	 but in curved speedometer-like fashion.

	#### dc.arcGauge(parent[, chartGroup])
	Parameters:
	* parent : string | node | selection - any valid
	 [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying
	 a dom block element such as a div; or a dom element or d3 selection.

	* chartGroup : string (optional) - name of the chart group this chart instance should be placed in.
	 Interaction with a chart will only trigger events and redraws within the chart's group.

	 Returns:
	A newly created arc gauge chart instance

	```js
	arc = dc.arcGauge("#total-funding-arc")
	                                .group(totalFundingGroup)
	                                .valueAccessor(function(d){return d;})
	                                .totalCapacity(function(){
	                                  return crossfilterdata.groupAll().reduceSum(function(d){return d.columnname;}).value();
	                                });
	```
	**/
	dc.arcGauge = function (parent, chartGroup) {

	    var _chart = dc.baseMixin({});
	    var _filledValue,
	        _oldValue,
	        _totalCapacity,
	        _startAngle,
	        _endAngle,
	        _arc,
	        _innerRadius, _outerRadius,
	        _height, _width,
	        _innerRadiusRatio = 2/3;

	    //dimension is not required because this component only has one dimension
	    _chart._mandatoryAttributes (['group']);

	    _chart.transitionDuration(450); // good default

	    _chart.value = function() {
	        return _chart.data();
	    };

	    _chart.data(function(group) {
	        var valObj = group.value ? group.value() : group.top(1)[0];
	        return _chart.valueAccessor()(valObj);

	    });

	    /**
	        ####.width(Number)
	        Explicitly set the width of the svg container. Outer radius get computed based on half
	        of either the width or height, depending on which is smaller. 
	    **/
	    _chart.width = function(_) {
	        if(!arguments.length) return _width;
	        _width = _;
	        return _chart;
	    };

	    /**
	        ####.height(Number)
	        Explicitly set the height of the svg container. Outer radius get computed based on half
	        of either the width or height, depending on which is smaller. 
	    **/
	    _chart.height = function(_) {
	        if(!arguments.length) return _height;
	        _height = _;
	        return _chart;
	    };

	    /**
	        ####.innerRadius(Number)
	        Explicitly set the inner radius of the arc. This is not needed if height or width of the 
	        chart is set(Recommend just setting height and width). Inner radius will get computed
	        based on the _innerRadiusRatio * _outerRadius.
	    **/
	    _chart.innerRadius = function(_) {
	        if(!arguments.length) return _innerRadius;
	        _innerRadius = _;
	        return _chart;
	    };

	    /**
	        ####.outerRadius(Number)
	        Explicitly set the outer radius of the donut. This is not needed if height or width of the 
	        chart is set(Recommend just setting height and width). 
	    **/
	    _chart.outerRadius = function(_) {
	        if(!arguments.length) return _outerRadius;
	        _outerRadius = _;
	        return _chart;
	    };

	    /**
	        ####.innerRadiusRatio(Number)
	        Explicitly set the ratio of the inner radius compared to the outer radius. This allows for
	        custom thickness of the arc. Default is 2/3.
	    **/
	    _chart.innerRadiusRatio = function(_) {
	        if(!arguments.length) return _innerRadiusRatio;
	        _innerRadiusRatio = _;
	        return _chart;
	    };

	    /**
	        ####.startAngle(numberofdegrees)
	        Start angle of the component arc in degrees. Remember 0 and 360 are at 12 o'clock. 
	    **/
	    _chart.startAngle = function(_) {
	        if(!arguments.length) return _startAngle;
	        _startAngle = _;
	        return _chart;
	    };

	    /**
	        ####.endAngle(numberofdegrees)
	        End angle of the component arc in degrees. Remember 0 and 360 are at 12 o'clock. 
	    **/
	    _chart.endAngle = function(_) {
	        if(!arguments.length) return _endAngle;
	        _endAngle = _;
	        return _chart;
	    };

	    _chart.arc = function(_) {
	        if(!arguments.length) return _arc;
	        _arc = _;
	        return _chart;
	    };

	    /**
	        #### .totalCapacity(number)
	        Explicitly set total capacity. 
	    **/
	    _chart.totalCapacity = function(_) {
	        if (!arguments.length) return _totalCapacity.call(_chart);
	        _totalCapacity = d3.functor(_);
	        _chart.expireCache();
	        return _chart;
	    };

	    /**
	        #### .filledValue(number)
	        Explicitly set filled value. 
	        The filled value will be used to get the percentage the bar is filled which will be translated 
	        to the correct amount of degrees to fill in the arc. 
	    **/
	    _chart.filledValue = function(_) {
	        if(!arguments.length) return _filledValue;
	        _filledValue = _;
	        return _chart;
	    };

	    var degreesToRadians = function(deg) {
	        return deg * (Math.PI/180);
	    };

	    //This function is needed to do the angle transition in the arc. 
	    var arcTween = function(transition, newAngle) {
	        transition.attrTween("d", function(d) {
	            var interpolate = d3.interpolate(d.endAngle, newAngle);

	            return function(t) {
	                d.endAngle = interpolate(t);
	                return _arc(d);
	            };
	        });
	    };

	    /**
	        #### .initializeArc(ParentSelector)
	        Add the background and foreground arcs. Also do the animation of the arc filling/emptying. 
	    **/
	    var initializeArc = function(selector) {
	        //use percentages to fill the gauge
	        var _oldpercentFilled = _oldValue/_totalCapacity();
	        var _percentFilled = _filledValue/_totalCapacity();
	        var totalCapacityDegrees = Math.abs(_startAngle) + Math.abs(_endAngle);
	        var oldFillAngle = _oldpercentFilled * totalCapacityDegrees - Math.abs(_startAngle);
	        var newFillAngle = _percentFilled * totalCapacityDegrees - Math.abs(_startAngle);

	        selector.append("path").classed("dc-arc-gauge-background", true);
	        var background = _chart.selectAll(".dc-arc-gauge-background");
	        background.datum({endAngle: degreesToRadians(_endAngle)})
	            .attr("d", _arc);


	        selector.append("path").classed("dc-arc-gauge-foreground", true);
	        var foreground = _chart.selectAll(".dc-arc-gauge-foreground");
	        foreground.datum({endAngle: degreesToRadians(oldFillAngle)})
	            .attr("d", _arc);
	        

	        foreground.transition()
	            .duration(_chart.transitionDuration())
	            .call(arcTween, degreesToRadians(newFillAngle));

	    };

	    _chart._doRender = function () {
	        //set some defaults for start/end angle, and values
	        _startAngle = (_startAngle === undefined) ? -115 : _chart.startAngle();
	        _endAngle = (_endAngle === undefined) ? 115 : _chart.endAngle();
	        _outerRadius = _outerRadius || d3.min([_chart.width(), _chart.height()]) / 2;
	        _innerRadius = _innerRadius || _innerRadiusRatio * _outerRadius;
	        

	        _arc = d3.svg.arc()
	            .innerRadius(_innerRadius)
	            .outerRadius(_outerRadius)
	            .startAngle(degreesToRadians(_startAngle));
	        _oldValue = (_filledValue === undefined) ? 0 : _filledValue;
	        _filledValue = _chart.value();

	        _chart.root().classed('dc-arc-gauge', true);
	        _chart.root().classed('dc-chart', false);
	        _chart.root().html('');

	        var svgArc = _chart.root().append('svg')
	            .attr("width", _width)
	            .attr("height", _height)
	             .append("g");

	        initializeArc(svgArc);
	        _chart.select("g").attr("transform", "translate(" + _chart.outerRadius() + "," +  _chart.outerRadius() + ")");

	    };

	    _chart._doRedraw = function(){
	        return _chart._doRender();
	    };

	    return _chart.anchor(parent, chartGroup);
	};

	/**
	## Tree Map 

	Includes: [Base Mixin](#base-mixin), [Hierarchy Mixin](#hierarchy-mixin)


	#### dc.treeMap(parent[, chartGroup])
	Create a Tree Map chart that uses multiple dimensions in a hierarchical fashion. 

	Parameters:

	* parent : string | node | selection - any valid
	 [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying
	 a dom block element such as a div; or a dom element or d3 selection.

	* chartGroup : string (optional) - name of the chart group this chart instance should be placed in.
	 Interaction with a chart will only trigger events and redraws within the chart's group.

	Returns:
	A newly created tree map instance

	```js
	//setup the dimension/column name array in the order of root -> children
	//data structure
	var dimensionColumnnamePairs = [{'dimension' : someRootDimension, 'columnName' : 'columnNamefromCSV'},
	                                {'dimension' : aChildDimension, 'columnName' : 'anotherColumnName'}];
	//which column name from the CSV contains the value for measuring the data
	var measureColumn = 'value';
	// create a row chart under #sankey element using the default global chart group
	var chart = dc.rowChart("#treeMap")
					.topBarHeight(45)
					.height(400)
	                .levels(dimensionColumnnamePairs)
	                .measureColumn(measureColumn);

	//unlike other charts you must filter manually by passing in the column name, and filter value like this
	chart.filter('columnNamefromCSV', 'singlefiltervalue');
	```

	**/
	dc.treeMap = function (parent, chartGroup) {
		var _chart = dc.colorMixin(dc.hierarchyMixin(dc.baseMixin({})));
		var _treeMapd3, _treeMapDataObject, _currentRoot, _currentXscale, _currentYscale,
			_rootName = "root",
			_zoomLevel = 0, _colors = d3.scale.category20c(),
			_totalNegativeValue, _showNegativeTotal = false,
			_totalNegFormatter = function(d){return d;},
	        _noDataMessage = "<span class=\"error\">No data for the selected filters</span>",
	        _negativeDataMessage = "<span class=\"error\">All data found was negative values.</span>";

		var _margin = {top: 0, right: 0, bottom: 0, left: 0},
			_width = 960, _height = 500 - _margin.top - _margin.bottom,
	        _crumbTrailX = 6, _crumbTrailY = 6, _crumbTrailHeight = ".75em",
			_transitioning=false;
	    var _labelFuncsArray = [function(d) {return d.name;}];
	    var _titleBarFunc = function(d) {return d.parent ? _titleBarFunc(d.parent) + "." + d.name : d.name;};
		var _toolTipFunc = function(d) {return d.name;};
		var _onLevelChangeFunc = function() {};

	    _chart.transitionDuration(500); // good default

	    dc.override(_chart, "filterAll", function() {
	    	_chart._filterAll();
	    	_zoomLevel = 0;
	    	_currentRoot = _treeMapDataObject;

	    });

	    /**
	    #### .crumbTrailX(Number)
	    Set the X position of the crumb trail text within the top bar.
	    **/
	    _chart.crumbTrailX = function(_) {
	        if(!arguments.length) return _crumbTrailX;
	        _crumbTrailX = _;
	        return _chart;
	    };

	    /**
	    #### .crumbTrailY(Number)
	    Set the Y position of the crumb trail text within the top bar.
	    **/
	    _chart.crumbTrailY = function(_) {
	        if(!arguments.length) return _crumbTrailY;
	        _crumbTrailY = _;
	        return _chart;
	    };

	    /**
	    #### .crumbTrailHeight(String)
	    Set the font height of the crumb trail text within the top bar.
	    Example: .crumbTrailHeight(".75em")
	    **/
	    _chart.crumbTrailHeight = function(_) {
	        if(!arguments.length) return _crumbTrailHeight;
	        _crumbTrailHeight = _;
	        return _chart;
	    };

	    /**
		#### .topBarHeight(Number)
		Set the height of the bar at the top of the treemap.
	    **/
	    _chart.topBarHeight = function(_) {
	        if(!arguments.length) return _margin.top;
	        _margin.top = _;
	        return _chart;
	    };

	    /**
		#### .width(Number)
		Set the width explicitly as it will be used for calculating the node rectangle sizes. 
	    **/
	    _chart.width = function(_) {
	        if(!arguments.length) return _width;
	        _width = _;
	        return _chart;
	    };

		/**
		#### .height(Number)
		Set the height explicitly as it will be used for calculating the node rectangle sizes. 
	    **/
	    _chart.height = function(_) {
	        if(!arguments.length) return _height;
	        _height = _;
	        return _chart;
	    };

	    _chart.currentRoot = function(_) {
	        if(!arguments.length) return _currentRoot;
	        _currentRoot = _;
	        return _chart;
	    };

	    _chart.currentXscale = function(_) {
	        if(!arguments.length) return _currentXscale;
	        _currentXscale = _;
	        return _chart;
	    };

	    _chart.currentYscale = function(_) {
	        if(!arguments.length) return _currentYscale;
	        _currentYscale = _;
	        return _chart;  
	    };

	    /**
	    #### .colors(array)
	    Set the classnames of rectangles for use with css colors.
	    **/
	    _chart.colors = function(_) {
	    	if(!arguments.length) return _colors;
	        _colors = _;
	        return _chart;
	    };

	    /**
		#### .rootName(String)
		The root name is the displayed as the root parent text in the bar at the top of the treemap.
	    **/
	    _chart.rootName = function(_) {
			if(!arguments.length) return _rootName;
	        _rootName = _;
	        return _chart;
	    };

	    /**
		#### .noDataMessage(function)
		Message to display if no data is found.  
	    **/
	    _chart.noDataMessage = function(_) {
	    	if(!arguments.length) return _noDataMessage;
	    	_noDataMessage = _;
	    	return _chart;
	    };

	    /**
		#### .negativeDataMessage(function)
		Message to display if all data values were negative.
	    **/
	    _chart.negativeDataMessage = function(_) {
	    	if(!arguments.length) return _negativeDataMessage;
	    	_negativeDataMessage = _;
	    	return _chart;
	    };

	    /**
		#### .showNegativeTotal(boolean)
		Pass a boolean flag for whether or not to show the negative data number. Defaults to false.
	    **/
	    _chart.showNegativeTotal = function(_) {
	    	if(!arguments.length) return _showNegativeTotal;
	    	_showNegativeTotal = _;
	    	return _chart;
	    };

	        /**
		#### .totalNegFormatter(function)
		Pass a function to format the total negative value. 
	    **/
	    _chart.totalNegFormatter = function(_) {
	    	if(!arguments.length) return _totalNegFormatter;
	    	_totalNegFormatter = _;
	    	return _chart;
	    };

	    /**
	    #### .label(function)
	    Pass in a custom label function. These labels are what appear as text in the rectangles.
	    **/
	    _chart.labelFunctions = function(_) {
			if(!arguments.length) return _labelFuncsArray;
			_labelFuncsArray = _;
	        return _chart;
	    };

	    /**
		#### .toolTip(function)
		Pass in a custom tool tip function. These tool tips show text for the rectangles on hover.
	    **/
	    _chart.toolTip = function(_) {
	        if(!arguments.length) return _toolTipFunc;
			_toolTipFunc = _;
	        return _chart;
	    };

	    /**
		#### .titleBarCaption(function)
		Pass in custom title bar caption function. The title bar text is shown in the bar at the top.
	    **/
	    _chart.titleBarCaption = function(_) {
	        if(!arguments.length) return _titleBarFunc;
			_titleBarFunc = _;
	        return _chart;
	    };

	    /**
		#### .onLevelChange(function)
		Pass in callback to hook into the level change event. Level change happens when the user clicks on a rectangle to dive one level deeper, or the top bar to dive one level up. 
	    **/
	    _chart.onLevelChange = function(_) {
	    	if(!arguments.length) return _onLevelChangeFunc;
	    	_onLevelChangeFunc = _;
	    	return _chart;
	    };

	    _chart.initData = function () {
	        if(_chart.levels() && _chart.measureColumn()) {
	            _treeMapDataObject = crossfilterToTreeMapData(_chart.levels(), _chart.measureColumn());
	            if(_treeMapDataObject === null) {
	            	return null;
	            }
	            if(_treeMapDataObject === -1)
	            	return -1;
	        }
	        else throw "Must provide dimension column array and measureColumn";
	        return _chart;
	    };

	    _chart.data(function() {
	    	return [_treeMapDataObject];
	    });

	    function onClick(d, drillDown) {
	        //if click event is blocked, then the element is being dragged so don't filter
	        /*if(d3.event.defaultPrevented) 
	            return;
	        else 
	        */
	        _chart.onClick(d, drillDown);
	    }

	    _chart.onClick = function (d, drillDown) {

			    var filter = d.name;
		        var dimensionTofilter = _chart.lookupDimension(d.columnName);

	        	//this will add filter for drill down, and remove filter for going up
	            _chart.filter(d.columnName, filter);

	            //if going up a level remove filters from lower level
	            if(!drillDown) {
	                _chart.filterAllForLevel(d._children[0].columnName);
	            }

	            //Manually redraw all other charts so the tree map can have the hierarchical behavior
	            //with the multi dimensions
	            var charts = dc.chartRegistry.list(_chart.chartGroup());
	            for (var i = 0; i < charts.length; ++i) {
					if(charts[i] !== _chart) {
						charts[i].redraw();
					}
				}
				if(dc._renderlet !== null)
					dc._renderlet(group);
	    };

	    function isSelectedNode(d) {
			return _chart.hasFilter(d.columnName, d.name);
	    }

	    _chart.zoomLevel = function(d) {
			if(!arguments.length) return _zoomLevel;
	        _zoomLevel = _;
	        return _chart;
	    };

	    _chart._doRender = function() {
			var checkForData = _chart.initData();
			
			_chart.root().classed('dc-tree-map', true);
			_chart.root().classed('dc-chart', false);
			_chart.root().select('.treemap-no-data').html('');
	        _chart.root().select('.treemap-negative-data').html('');
			_chart.select('svg').remove();
			_chart.root().attr("style", "");

	        if(checkForData === null) {
	            _chart.root().select(".treemap-no-data")
	                .html(_noDataMessage);

	            return checkForData;
	        }
	        else if(checkForData == -1) {
	            _chart.root().select(".treemap-negative-data")
	                .html(_negativeDataMessage);

	            return checkForData;
	        }
	        
	        _chart.root().select(".treemap-negative-totalValue")
	            	.html(_totalNegFormatter(_totalNegativeValue));
	        var negValueElement = _chart.root().select(".treemap-negative-totalValue-message").remove();

			_chart.root()
				.style("width", _width + "px")
				.style("height", _height + _margin.top + _margin.bottom +  "px");

			var x = d3.scale.linear()
			.domain([0, _width])
			.range([0, _width]);

			var y = d3.scale.linear()
				.domain([0, _height])
				.range([0, _height]);

			_currentXscale = x;
			_currentYscale = y;

			_treeMapd3 = d3.layout.treemap()
				.children(function(d, depth) { return depth ? null : d._children; })
				.sort(function(a, b) { return a.value - b.value; })
				.ratio(_height / _width * 0.5 * (1 + Math.sqrt(5)))
				.round(false);

			var svg = d3.select(parent).append("svg")
				.attr("width", _width + _margin.left + _margin.right)
				.attr("height", _height + _margin.bottom + _margin.top)
				.style("margin-left", -_margin.left + "px")
				.style("margin.right", -_margin.right + "px")
	          .append("g")
				.attr("transform", "translate(" + _margin.left + "," + _margin.top + ")")
				.style("shape-rendering", "crispEdges");

			_showNegativeTotal && _totalNegativeValue < 0 && d3.select(parent).append(function() {return negValueElement.node();});

			var crumbTrail = svg.append("g")
				.attr("class", "crumbTrail");

			crumbTrail.append("rect")
				.attr("y", -_margin.top)
				.attr("width", _width)
				.attr("height", _margin.top);

			crumbTrail.append("text")
				.attr("x", _crumbTrailX)
				.attr("y", _crumbTrailY - _margin.top)
				.attr("dy", _crumbTrailHeight);

	        _currentRoot = _treeMapDataObject.zoomLevelDrill(_zoomLevel);

	        
			initialize(_treeMapDataObject);
			accumulate(_treeMapDataObject);
			layout(_treeMapDataObject);

			// var checkForZero = (_chart.currentRoot().value <= 0);
	  //       if(checkForZero) {
			// 	_treeMapDataObject = {name : _negativeDataMessage, columnName : "root", value: "Negative Data",
			// 	children : [], _children: []};
			// 	_currentRoot = _treeMapDataObject;

			// 	_negativeDataMessage(_chart);
			// 	return checkForZero;
			// }

			display(_currentRoot);

			function initialize(root) {
				root.x = root.y = 0;
				root.dx = _width;
				root.dy = _height;
				root.depth = 0;
			}

			// Aggregate the values for internal nodes. This is normally done by the
			// treemap layout, but not here because of our custom implementation.
			// We also take a snapshot of the original children (_children) to avoid
			// the children being overwritten when when layout is computed.
			function accumulate(d) {
				return (d._children = d.children) ?
				d.value = d.children.reduce(function(p, v) { return p + accumulate(v); }, 0)
				: d.value;
			}

			// Compute the treemap layout recursively such that each group of siblings
			// uses the same size (1×1) rather than the dimensions of the parent cell.
			// This optimizes the layout for the current zoom state. Note that a wrapper
			// object is created for the parent node for each group of siblings so that
			// the parent’s dimensions are not discarded as we recurse. Since each group
			// of sibling was laid out in 1×1, we must rescale to fit using absolute
			// coordinates. This lets us use a viewport to zoom.
			function layout(d) {
				if (d._children) {
					_treeMapd3.nodes({_children: d._children});

					d._children.forEach(function(c) {
						c.x = d.x + c.x * d.dx;
						c.y = d.y + c.y * d.dy;
						c.dx *= d.dx;
						c.dy *= d.dy;
						c.parent = d;
						layout(c);
					});
				}
			}

			function display(currentRoot) {
				_currentRoot = currentRoot;

				crumbTrail
					.datum(currentRoot.parent)
	              .on("click", function(d) {
		              	if (!_transitioning){
			              	
		              		if(_zoomLevel > 0){

			              		 _zoomLevel --;
								
								if (d) {
			                        // "un-filter" as we drill-up
									onClick(currentRoot, false); 
								}
			                    transition(d);

			                    //second redraw to protect against the following case:
			                    //1.) user does a redraw while there are filters on the chart
		              			//2.) the redraw cause creation of treemap data with the filtered data
		              			//3.) adding this second redraw lets us create the treemap data again 
		              			//4.) but at the point where the data is all there(unfiltered)  again. 
			                    _chart.redraw();
			                }
		              	}
					})
					.select("text")
					.text(_titleBarFunc(currentRoot));

				var depthContainer = svg.insert("g", ".crumbTrail")
					.datum(currentRoot)
					.attr("class", "depth");

				//container for each main parent box
				//this box will then contain children outlines
				//need clip path to hide excess text on smaller boxes
				var depthContainerChildren = depthContainer.selectAll("g")
					.data(currentRoot._children)
	              .enter().append("g")
	                .attr("clip-path", function(d) {return "url(#" + dc.utils.nameToId(d.name) + "-clip-path)";});

				depthContainerChildren.filter(function(d) { return d._children || d; })
					.classed("children", true)
					.classed("deselected", function(d) {
						if(!d._children) {
							return (_chart.hasFilter()) ? !isSelectedNode(d) : false;
						}
					})
					.classed("selected", function(d) {
						if(!d._children) {
							return (_chart.hasFilter()) ? isSelectedNode(d) : false;
						}
					})
					.on("click",function(d) {
						var that = this;
							if (!_transitioning){
								if(d._children) {
									_zoomLevel ++;
									transition(d); 
									onClick(d, true);
								}
								else {
									
									onClick(d, true);
									if(_chart.hasFilter() && isSelectedNode(d)) {
										//note: could not seem to get 'this' value in test spec
										d3.select(that).classed("selected", true);
										d3.select(that).classed("deselected", false);
									}
									else if(!_chart.hasFilter() || !isSelectedNode(d)) {
										d3.select(that).classed("deselected", true);
										d3.select(that).classed("selected", false);
									}
								}
							}
					});

				depthContainerChildren.selectAll(".child")
					.data(function(d) { return d._children || [d]; })
	              .enter().append("rect")
					.attr("class", "child")
					.classed("deselected", function(d) {
						if(!d._children) {
							return (_chart.hasFilter()) ? !isSelectedNode(d) : false;
						}
						else return false;
					})
					.classed("selected", function(d) {
						var isOnlyChild = (_zoomLevel === (_chart.levels().length -1));

						if(!d._children && !isOnlyChild) {
							return (_chart.hasFilter()) ? isSelectedNode(d) : false;
						}
						else return false; 
					})
					.call(rect);

				depthContainerChildren.append("defs").append("clipPath")
					.attr("id", function(d) {return dc.utils.nameToId(d.name) + "-clip-path";})
					.append("rect")
					.attr("class", "clip-path-parent")
					.call(rect);
					
				depthContainerChildren.append("rect")
					.attr("class", function(d) {return "parent color_" + _colors(d.name.replace(/ .*/, ""));})
					.call(rect)
	              .append("title")
					.text(_toolTipFunc);

	            _labelFuncsArray.forEach(function(func, index){
	                depthContainerChildren[0].forEach(function(textElement) {
	                    func(d3.select(textElement).append("text").classed("label_" + index + " parent-label", true), {x: _currentXscale, y: _currentYscale});
	                });
	            });
				
	            // transition(currentRoot);

				//Do the zoom animation, and set each parent block 
				//to take up as much space as it can proportionately
				function transition(currentRoot) {
					if (_transitioning || !currentRoot) return;
					_transitioning = true;


					//call display again to transition to the next level
					var depthContainerChildren = display(currentRoot),
						parentTransition = depthContainer.transition().duration(_chart.transitionDuration()),
						childTransition = depthContainerChildren.transition().duration(_chart.transitionDuration());

					// Update the domain only after entering new elements.
					x.domain([currentRoot.x, currentRoot.x + currentRoot.dx]);
					y.domain([currentRoot.y, currentRoot.y + currentRoot.dy]);
					_currentXscale = x;
					_currentYscale = y;

					// Enable anti-aliasing during the transition.
					svg.style("shape-rendering", null);

					// Draw child nodes on top of parent nodes.
					svg.selectAll(".depth").sort(function(a, b) {
						return a.depth - b.depth; 
					});
					
					// Start children opacity at 0, then fade in.
					depthContainerChildren.selectAll("text").style("fill-opacity", 0);

					// Transition to the new view.
					//parent elements are dissappearing(0 opacity), while child elements are appearing(1 opacity)
	                _labelFuncsArray.forEach(function(func, index) {
	                    func(parentTransition.selectAll("text.label_" + index), {x: _currentXscale, y: _currentYscale}, 0);
	                    func(childTransition.selectAll("text.label_" + index), {x: _currentXscale, y: _currentYscale}, 1);
	                });

	                parentTransition.selectAll("rect").call(rect);
					childTransition.selectAll("rect").call(rect);

					// Remove the old node when the transition is finished.
					parentTransition.remove().each("end", function() {
						svg.style("shape-rendering", "crispEdges");
						_transitioning = false;
					});

					//Hook for custom functionality on level change
	            	_onLevelChangeFunc();
				}

				return depthContainerChildren;
			}

			function text(textLabel) {
				textLabel.attr("x", function(d) { return x(d.x) + 6; })
					.attr("y", function(d) { return y(d.y) + 6; });
			}

			function rect(nodeRect) {
				var clipPathMargin = 10;

				nodeRect
					.attr("x", function(d) { 
						return x(d.x); 
					})
					.attr("y", function(d) { return y(d.y); })
					.attr("width", function(d) { 
						var width = x(d.x + d.dx) - x(d.x);
						if(width < 10) width = 10;
						return width;
					})
					.attr("height", function(d) {
						var height = y(d.y + d.dy) - y(d.y);
						if(height < 12) height = 12;
						return height;
					});


				//Need to add clip path margin so text doesnt go all the way to the edge. 
				// nodeRect.selectAll("clip-path-parent")
				// 	.attr("x", function(d) { return x(d.x + clipPathMargin); })
				// 	.attr("y", function(d) { return y(d.y + clipPathMargin); })
				// 	.attr("width", function(d) { return x(d.x + d.dx) - x(d.x) - x(clipPathMargin*2); })
				// 	.attr("height", function(d) { return y(d.y + d.dy) - y(d.y) - y(clipPathMargin*2); });

			}
		};

		_chart._doRedraw = function() {
			return _chart._doRender();
		};

		return _chart.anchor(parent, chartGroup);

		//#### .crossfilterToTreeMapData([{dimension : someDim, columnName : "colName"}...], String)
		// Return the tree data object
		//Translate crossfilter multi dimensional tabular data into hierarchical tree data
		function crossfilterToTreeMapData(levelsData, measureColumn) {
			var _tree = {name : _rootName, columnName : "root",
						children : [], _children: []};
			_totalNegativeValue = 0;

			//loop over the rows, and then by column to populate the tree data
			var rows = levelsData[0].dimension.top(Infinity);

			var noData = false, allNegativeData = true;
			if(!rows.length) {
			    _tree = {name : "No Data", columnName : "root", value: "No Data",
				children : []};
				noData = true;
			}
			else {
				rows.forEach(function(row) {
					levelsData.forEach(function(level, columnIndex) {
						var columnName = level.columnName;
						if(row[measureColumn] > 0) {
							allNegativeData = false;
							insertNode(row, columnName, columnIndex);
						}
						else {
							_totalNegativeValue += Number(row[measureColumn]);
						}
					});
				});
			}
			

			function insertNode(row, columnName, columnIndex) {
				if(!nodesContains(row, columnName, columnIndex)) {
					pushChild(row, columnName, columnIndex);
				}
				else if(columnIndex === (levelsData.length - 1)) {
					//node already existed and this is a leaf so it has a value
					addLeafValue(row, columnName, columnIndex);
				}
			}

			function nodesContains(row, columnName, columnIndex) {
				//traverse through index level of children to get the children we want
				var nodeChildren = findNodeChildrenDrill(row, columnName, columnIndex).children;

				return nodeChildren.some(function(childObj) {
					return childObj.name === row[columnName];
				});
			}

			//Note: negative values get set to zero.
			function pushChild(row, columnName, columnIndex) {
				var nodeChildren = findNodeChildrenDrill(row, columnName, columnIndex).children;
				var newNode = {};
				newNode.name = row[columnName];
				newNode.columnName = columnName;
				if(columnIndex === (levelsData.length - 1)) {
					var startValue = Number(row[measureColumn]);
					newNode.value = startValue;
				}
				else newNode.children = [];
				nodeChildren.push(newNode);
			}

			function addLeafValue(row, columnName, columnIndex) {
				var nodeChildren = findNodeChildrenDrill(row, columnName, columnIndex).children;
				var existingNode; 
				nodeChildren.forEach(function(childObj) {
					if(childObj.name === row[columnName]) {
						existingNode = childObj;
					}
				});
				existingNode.value = Number(existingNode.value) + Number(row[measureColumn]);
			}

			/*
			.findNodeChildrenDrill(Object, String, Number)
			Drill down until at the correct child object, this function is used internally
			*/
			function findNodeChildrenDrill(row, columnName, columnIndex) {
				var childNode = _tree; //array of child objects
				for (var i = 0; i < columnIndex; i++) {
					childNode.children.some(function(childObj) {
						var fieldValue = row[levelsData[i].columnName];
						if(childObj.name === fieldValue) {
							childNode = childObj;
						}
					});
				}

				return childNode;
			}

			/*
			.zoomLevelDrill(Number)
			Drill down to the child node by zoom level, this function is used externally
			*/
			_tree.zoomLevelDrill = function(zoomLevel) {
				var childNode = _tree;

				for(var i = 0; i < (zoomLevel); i++) {
					//children accessor changed to '_children' because 'children' gets overwritten 
					//by the treemap layout when reinitializing from the zoomed state
					childNode.children.some(function(childObj) { 
						var value = getFilterValue(i);
						if(childObj.name === value) {
							childNode = childObj;
						}
					});	
				}

				return childNode;
			};

			function getFilterValue(zoomLevel) {
				var dimension = levelsData[zoomLevel].dimension;
				var columnName = levelsData[zoomLevel].columnName;
				return dimension.top(Infinity)[0][columnName]; //assuming that each level of the tree map only has one value in the filter
			}

			if(noData === true)
				return null;
			if(allNegativeData === true)
				return -1;
			return _tree;
		}

	};
	d3.sankey = function() {
	  var sankey = {},
	      nodeWidth = 24,
	      nodePadding = 8,
	      size = [1, 1],
	      nodes = [],
	      links = [];

	  sankey.nodeWidth = function(_) {
	    if (!arguments.length) return nodeWidth;
	    nodeWidth = +_;
	    return sankey;
	  };

	  sankey.nodePadding = function(_) {
	    if (!arguments.length) return nodePadding;
	    nodePadding = +_;
	    return sankey;
	  };

	  sankey.nodes = function(_) {
	    if (!arguments.length) return nodes;
	    nodes = _;
	    return sankey;
	  };

	  sankey.links = function(_) {
	    if (!arguments.length) return links;
	    links = _;
	    return sankey;
	  };

	  sankey.size = function(_) {
	    if (!arguments.length) return size;
	    size = _;
	    return sankey;
	  };

	  sankey.layout = function(iterations) {
	    computeNodeLinks();
	    computeNodeValues();
	    computeNodeBreadths();
	    computeNodeDepths(iterations);
	    computeLinkDepths();
	    return sankey;
	  };

	  sankey.relayout = function() {
	    computeLinkDepths();
	    return sankey;
	  };

	  sankey.link = function() {
	    var curvature = .5;

	    function link(d) {
	      var x0 = d.source.x + d.source.dx,
	          x1 = d.target.x,
	          xi = d3.interpolateNumber(x0, x1),
	          x2 = xi(curvature),
	          x3 = xi(1 - curvature),
	          y0 = d.source.y + d.sy + d.dy / 2,
	          y1 = d.target.y + d.ty + d.dy / 2;
	      return "M" + x0 + "," + y0
	           + "C" + x2 + "," + y0
	           + " " + x3 + "," + y1
	           + " " + x1 + "," + y1;
	    }

	    link.curvature = function(_) {
	      if (!arguments.length) return curvature;
	      curvature = +_;
	      return link;
	    };

	    return link;
	  };

	  // Populate the sourceLinks and targetLinks for each node.
	  // Also, if the source and target are not objects, assume they are indices.
	  function computeNodeLinks() {
	    nodes.forEach(function(node) {
	      node.sourceLinks = [];
	      node.targetLinks = [];
	    });
	    links.forEach(function(link) {
	      var source = link.source,
	          target = link.target;
	      if (typeof source === "number") source = link.source = nodes[link.source];
	      if (typeof target === "number") target = link.target = nodes[link.target];
	      source.sourceLinks.push(link);
	      target.targetLinks.push(link);
	    });
	  }

	  // Compute the value (size) of each node by summing the associated links.
	  function computeNodeValues() {
	    nodes.forEach(function(node) {
	      node.value = Math.max(
	        d3.sum(node.sourceLinks, value),
	        d3.sum(node.targetLinks, value)
	      );
	    });
	  }

	  // Iteratively assign the breadth (x-position) for each node.
	  // Nodes are assigned the maximum breadth of incoming neighbors plus one;
	  // nodes with no incoming links are assigned breadth zero, while
	  // nodes with no outgoing links are assigned the maximum breadth.
	  function computeNodeBreadths() {
	    var remainingNodes = nodes,
	        nextNodes,
	        x = 0;

	    while (remainingNodes.length) {
	      nextNodes = [];
	      remainingNodes.forEach(function(node) {
	        node.x = x;
	        node.dx = nodeWidth;
	        node.sourceLinks.forEach(function(link) {
	          if (nextNodes.indexOf(link.target) < 0) {
	            nextNodes.push(link.target);
	          }
	        });
	      });
	      remainingNodes = nextNodes;
	      ++x;
	    }

	    //
	    moveSinksRight(x);
	    scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));
	  }

	  function moveSourcesRight() {
	    nodes.forEach(function(node) {
	      if (!node.targetLinks.length) {
	        node.x = d3.min(node.sourceLinks, function(d) { return d.target.x; }) - 1;
	      }
	    });
	  }

	  function moveSinksRight(x) {
	    nodes.forEach(function(node) {
	      if (!node.sourceLinks.length) {
	        node.x = x - 1;
	      }
	    });
	  }

	  function scaleNodeBreadths(kx) {
	    nodes.forEach(function(node) {
	      node.x *= kx;
	    });
	  }

	  function computeNodeDepths(iterations) {
	    var nodesByBreadth = d3.nest()
	        .key(function(d) { return d.x; })
	        .sortKeys(d3.ascending)
	        .entries(nodes)
	        .map(function(d) { return d.values; });

	    //
	    initializeNodeDepth();
	    resolveCollisions();
	    for (var alpha = 1; iterations > 0; --iterations) {
	      relaxRightToLeft(alpha *= .99);
	      resolveCollisions();
	      relaxLeftToRight(alpha);
	      resolveCollisions();
	    }

	    function initializeNodeDepth() {
	      var ky = d3.min(nodesByBreadth, function(nodes) {
	        return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);
	      });

	      nodesByBreadth.forEach(function(nodes) {
	        nodes.forEach(function(node, i) {
	          node.y = i;
	          node.dy = node.value * ky;
	        });
	      });

	      links.forEach(function(link) {
	        link.dy = link.value * ky;
	      });
	    }

	    function relaxLeftToRight(alpha) {
	      nodesByBreadth.forEach(function(nodes, breadth) {
	        nodes.forEach(function(node) {
	          if (node.targetLinks.length) {
	            var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);
	            node.y += (y - center(node)) * alpha;
	          }
	        });
	      });

	      function weightedSource(link) {
	        return center(link.source) * link.value;
	      }
	    }

	    function relaxRightToLeft(alpha) {
	      nodesByBreadth.slice().reverse().forEach(function(nodes) {
	        nodes.forEach(function(node) {
	          if (node.sourceLinks.length) {
	            var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);
	            node.y += (y - center(node)) * alpha;
	          }
	        });
	      });

	      function weightedTarget(link) {
	        return center(link.target) * link.value;
	      }
	    }

	    function resolveCollisions() {
	      nodesByBreadth.forEach(function(nodes) {
	        var node,
	            dy,
	            y0 = 0,
	            n = nodes.length,
	            i;

	        // Push any overlapping nodes down.
	        nodes.sort(ascendingDepth);
	        for (i = 0; i < n; ++i) {
	          node = nodes[i];
	          dy = y0 - node.y;
	          if (dy > 0) node.y += dy;
	          y0 = node.y + node.dy + nodePadding;
	        }

	        // If the bottommost node goes outside the bounds, push it back up.
	        dy = y0 - nodePadding - size[1];
	        if (dy > 0) {
	          y0 = node.y -= dy;

	          // Push any overlapping nodes back up.
	          for (i = n - 2; i >= 0; --i) {
	            node = nodes[i];
	            dy = node.y + node.dy + nodePadding - y0;
	            if (dy > 0) node.y -= dy;
	            y0 = node.y;
	          }
	        }
	      });
	    }

	    function ascendingDepth(a, b) {
	      return a.y - b.y;
	    }
	  }

	  function computeLinkDepths() {
	    nodes.forEach(function(node) {
	      node.sourceLinks.sort(ascendingTargetDepth);
	      node.targetLinks.sort(ascendingSourceDepth);
	    });
	    nodes.forEach(function(node) {
	      var sy = 0, ty = 0;
	      node.sourceLinks.forEach(function(link) {
	        link.sy = sy;
	        sy += link.dy;
	      });
	      node.targetLinks.forEach(function(link) {
	        link.ty = ty;
	        ty += link.dy;
	      });
	    });

	    function ascendingSourceDepth(a, b) {
	      return a.source.y - b.source.y;
	    }

	    function ascendingTargetDepth(a, b) {
	      return a.target.y - b.target.y;
	    }
	  }

	  function center(node) {
	    return node.y + node.dy / 2;
	  }

	  function value(link) {
	    return link.value;
	  }

	  return sankey;
	};

	/**
	## Sankey

	Includes: [Base Mixin](#base-mixin) [Hierarchy Mixin](#hierarchy-mixin)


	#### dc.sankey(parent[, chartGroup])
	Create a Sankey chart that shows how dimensions flow into other dimensions in a hierarchichal fashion.

	Parameters:

	* parent : string | node | selection - any valid
	 [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying
	 a dom block element such as a div; or a dom element or d3 selection.

	* chartGroup : string (optional) - name of the chart group this chart instance should be placed in.
	 Interaction with a chart will only trigger events and redraws within the chart's group.

	Returns:
	A newly created sankey instance

	```js
	//setup the dimension hierarchy we call 'levels'
	//the levels data structure specifies dimension, and its corresponding columnName from the csv data
	var levels = [{'dimension' : someDimension, 'columnName' : 'columnNamefromCSV'},
	                                {'dimension' : anotherDimension, 'columnName' : 'anotherColumnName'}];
	//set the column used as your measure
	var measureColumn = 'value';

	// create a sankey
	var chart = dc.sankey("#sankey")
	                .width(600)
	                .height(400)
	                .levels(levels)
	                .measureColumn(measureColumn);

	//filter manually by passing in the column name, and filter value like this
	chart.filter('columnNamefromCSV', 'singlefiltervalue');
	```

	#### Add Column Labels
	Add labels that go on top of each sankey column. These column labels will also show the filter of that column, and can remove that filter by clicking that filter label.
	You must use your own styles to position these labels, but the onclick handler that controls the filters will be automatically applied to the label text.
	```html
	<!-- Add span elements with the classname that corresponds with the column name in the following format: column_YOURCOLUMNNAME If your dimensions were based off of "country", "state", and "region" columns, they would look like the following -->
	<div id="sankey">
	    <span class="column_country"></span>
	    <span class="column_state"></span>
	    <span class="column_region"></span>

	</div>
	```

	**/
	dc.sankey = function(parent, chartGroup) {
	    var _chart = dc.hierarchyMixin(dc.baseMixin({}));
	    var _sankey, _sankeyDataObject, _nodeWidth = 15;
	    var _margin = {top: 1, right: 1, bottom: 6, left: 1}, //margins needed so sankey edges aren't cut off
	        _width = 960 - _margin.left - _margin.right,
	        _height = 500 - _margin.top - _margin.bottom,
	        _totalNegativeValue, _showNegativeTotal = false,
	        _totalNegFormatter = function(d){return d;},
	        _noDataMessage = "<span class=\"error\">No data for the selected filters</span>",
	        _negativeDataMessage = "<span class=\"error\">All data found was negative values.</span>";

	    var _formatNumber = d3.format(",.0f"),
	        _format = function(d) { return _formatNumber(d); },
	        _colors = d3.scale.category20();
	    var _linkToolTipFunc = function(d) { return d.source.name + " → " + d.target.name + "\n" + _format(d.value); };
	    var _nodeToolTipFunc = function(d) { return d.name + "\n" + _format(d.value); };    
	    var _labelFunc = function(d) { return d.name; };

	    /**
	    #### .label(function)
	    Specify the callback to display text that goes next to nodes(rectangles). 
	    **/
	    _chart.label = function(_) {
	        if(!arguments.length) return _labelFunc;
	        _labelFunc = _;
	        return _chart;
	    };

	    /**
	    #### .noDataMessage(function)
	    Specify the callback to display the message when no data is found.
	    **/
	    _chart.noDataMessage = function(_) {
	        if(!arguments.length) return _noDataMessage;
	        _noDataMessage = _;
	        return _chart;
	    };

	    /**
	    #### .negativeDataMessage(function)
	    Specify the callback to display the message when all the data values in the chart are negative numbers. 
	    **/
	    _chart.negativeDataMessage = function(_) {
	        if(!arguments.length) return _negativeDataMessage;
	        _negativeDataMessage = _;
	        return _chart;
	    };

	    /**
	    #### .showNegativeTotal(boolean)
	    Pass a boolean flag for whether or not to show the negative data number. Defaults to false.
	    **/
	    _chart.showNegativeTotal = function(_) {
	        if(!arguments.length) return _showNegativeTotal;
	        _showNegativeTotal = _;
	        return _chart;
	    };

	    /**
	    #### .totalNegFormatter(function)
	    Pass a function to format the total negative value. 
	    **/
	    _chart.totalNegFormatter = function(_) {
	        if(!arguments.length) return _totalNegFormatter;
	        _totalNegFormatter = _;
	        return _chart;
	    };

	    /**
	    #### .setColorRange(["#color", "#morecolors"])
	    Specify the range of colors that can be used in the ordinal color scale.
	    **/
	    _chart.colorRange = function(_) {
	        if(!arguments.length) return _colors.range();
	        _colors.range(_);
	        return _chart;
	    };

	    /**
	    #### .nodeToolTip(function)
	    Specify the callback to display text in the tooltip when hovering over nodes. 
	    **/
	    _chart.nodeToolTip = function(_) {
	        if(!arguments.length) return _nodeToolTipFunc;
	        _nodeToolTipFunc = _;
	        return _chart;
	    };

	    /**
	    #### .nodeWidth(Number)
	    Specify the width of the sankey nodes. 
	    **/
	    _chart.nodeWidth = function(_) {
	        if(!arguments.length) return _nodeWidth;
	        _nodeWidth = _;
	        return _chart;
	    };

	    /**
	    #### .linkToolTip(function)
	    Specify the callback to display text in the tooltip when hovering over links between nodes. 
	    **/
	    _chart.linkToolTip = function(_) {
	        if(!arguments.length) return _linkToolTipFunc;
	        _linkToolTipFunc = _;
	        return _chart;
	    };

	    _chart.transitionDuration(450); //not doing anything at this point

	    /**
	    #### .width(Number)
	    Specify the width of the SVG. Default is 960
	    **/
	    _chart.width = function(_) {
	        if(!arguments.length) return _width;
	        _width = _;
	        return _chart;
	    };

	    /**
	    #### .height(Number)
	    Specify the height of the SVG. Default is 500
	    **/
	    _chart.height = function(_) {
	        if(!arguments.length) return _height;
	        _height = _;
	        return _chart;
	    };

	    _chart.data(function(){ 
	        return [_sankeyDataObject];
	    });
	    
	    _chart.initData = function () {
	        if(_chart.levels() && _chart.measureColumn()) {
	            _sankeyDataObject = crossfilterToSankeyData(_chart.levels(), _chart.measureColumn());
	            if(_sankeyDataObject === null)
	                return null;
	            else if(_sankeyDataObject === -1)
	                return -1;
	        }
	        else throw "Must provide dimension column array levels and the measureColumn";
	        return _chart;
	    };

	    function getColumnName(index) {
	        return levels[index].columnName;
	    }

	    _chart._doRender = function() {
	        var checkForData = _chart.initData();

	        _chart.root().classed('dc-sankey', true);
	        _chart.root().classed('dc-chart', false);
	        _chart.root().select('.sankey-no-data').html('');
	        _chart.root().select('.sankey-negative-data').html('');
	        _chart.resetSvg();

	        if(checkForData === null) {
	            _chart.root().select(".sankey-no-data")
	                .html(_noDataMessage);
	            _chart.root().select("svg").attr("width", "0").attr("height", "0");

	            return checkForData;
	        }
	        else if(checkForData == -1) {
	            _chart.root().select(".sankey-negative-data")
	                .html(_negativeDataMessage);
	            _chart.root().select("svg").attr("width", "0").attr("height", "0");
	            return checkForData;
	        }

	        _chart.root().select(".sankey-negative-totalValue")
	                .html(_totalNegFormatter(_totalNegativeValue));
	        var negValueElement = _chart.root().select(".sankey-negative-totalValue-message").remove();
	        

	        var svg = _chart.svg()
	            .attr("width", _width + _margin.left + _margin.right)
	            .attr("height", _height + _margin.top + _margin.bottom)
	          .append("g")
	            .attr("transform", "translate(" + _margin.left + "," + _margin.top + ")");
	        
	        _showNegativeTotal && _totalNegativeValue < 0 && d3.select(parent).append(function() {return negValueElement.node();});

	        _sankey = d3.sankey()
	            .nodeWidth(_nodeWidth)
	            .nodePadding(10)
	            .size([_width, _height]);

	        var path = _sankey.link();
	        _sankey
	            .nodes(_sankeyDataObject.nodes)
	            .links(_sankeyDataObject.links)
	            .layout(32);

	        var link = svg.append("g").selectAll(".link")
	                      .data(_sankeyDataObject.links)
	                    .enter().append("path")
	                      .attr("class", "link")
	                      .attr("d", path)
	                      .style("stroke-width", function(d) { return Math.max(1, d.dy); })
	                      .sort(function(a, b) { return b.dy - a.dy; });

	        link.append("title")
	            .text(_linkToolTipFunc);

	        var node = svg.append("g").selectAll(".node")
	            .data(_sankeyDataObject.nodes)
	        .enter().append("g")
	            .attr("class", function(d) {return "node " + dc.utils.nameToId(d.name);})
	            .attr("transform", function(d) { 
	                return "translate(" + d.x + "," + d.y + ")"; 
	            })
	            .on("click", onClick)
	        .call(d3.behavior.drag()
	            .origin(function(d) { return d; })
	            .on("dragstart", dragstarted)
	            .on("drag", dragmove)
	            .on("dragend", dragended))
	            .classed("deselected", function (d) {
	                return (_chart.hasFilter()) ? !isSelectedNode(d) : false;
	            })
	            .classed("selected", function (d) {
	                return (_chart.hasFilter()) ? isSelectedNode(d) : false;
	            });
	        node.append("rect")
	            .attr("height", function(d) { return d.dy; })
	            .attr("width", _sankey.nodeWidth())
	            .attr("class", function(d) {return "node-" + d.columnName;})
	            .attr("fill", function(d) {return _colors(d.name);})
	          .append("title")
	            .text(_nodeToolTipFunc);

	        node.append("text")
	            .attr("x", -6)
	            .attr("y", function(d) { return d.dy / 2; })
	            .attr("dy", ".35em")
	            .attr("text-anchor", "end")
	            .attr("transform", null)
	            .text(_labelFunc)
	          .filter(function(d) { return d.x < _width / 2; })
	            .attr("x", 6 + _sankey.nodeWidth())
	            .attr("text-anchor", "start");

	        //add span for filter control
	        _chart.levels().forEach(function(l){
	            d3.select(".filter.column_" + l.columnName).html("");
	            if(_chart.hasFilter(l.columnName)) {
	                _chart.select(".filter.column_" + l.columnName)
	                    .append("span")
	                    .classed("reset", true)
	                    .text(_chart.filters(l.columnName)[0])
	                    .on("click", function(e) {
	                        _chart.filterAll(l.columnName);
	                        _chart.redrawGroup();
	                    });
	            }  
	        });
	        

	        function dragstarted(d) {
	            //this makes elements come to top, but interferes with listeners 
	            //this.parentNode.appendChild(this); 
	        }

	        function dragmove(d) {
	            d3.select(this).attr("transform", "translate(" + d.x + "," + (d.y = Math.max(0, Math.min(_height - d.dy, d3.event.y))) + ")");
	            _sankey.relayout();
	            link.attr("d", path);
	        }

	        function dragended(d) {

	        }
	    };

	    function isSelectedNode (d) {
	        return _chart.hasFilter(d.columnName, d.name);
	    }

	    function onClick(d) {
	        //if click event is blocked(if a drag event is occuring the defaultPrevented will be true),
	        //then the element is being dragged so don't filter
	        if(d3.event.defaultPrevented) 
	            return;
	        else 
	            _chart.onClick(d);
	        
	    }

	    _chart.onClick = function (d) {
	        var filterValue = d.name;
	        dc.events.trigger(function () {
	            _chart.filter(d.columnName, filterValue);
	            _chart.redrawGroup();            
	        });
	    };

	    _chart._doRedraw = function() {
	        return _chart._doRender();
	    };

	    return _chart.anchor(parent, chartGroup);

	    //**Translate the crossfilter dimensions to a sankey data structure
	    function crossfilterToSankeyData(levels, measureColumn) {

	        _totalNegativeValue = 0;
	        //Dimensions provided are the source for creating the Sankey Node/Link 
	        //data structure
	        var t = {nodes: [], links: []};

	        //flag for no data
	        var noData = false; 

	        //Create nodes for each row field value 
	        levels.forEach(function(level) {
	            var columnName = level.columnName;
	            var s = level.dimension.top(Infinity);
	            if(!s.length) {
	                noData = true;
	                return; 
	            }
	            s.forEach(function(row){
	                if(row[measureColumn] > 0)
	                    insertNodes(row, columnName);
	                
	                
	            });
	        });

	        //if the chart receives no data return a null sankey data object
	        if(noData) {
	            return null;
	        }

	        var allNegativeData = true;
	        //Important to do the linking only after all of the nodes have been created
	        levels.forEach(function(level, index) {
	            var columnName = level.columnName;
	            var s = level.dimension.top(Infinity);

	            s.forEach(function(row){
	                if(row[measureColumn] > 0) {
	                    allNegativeData = false;
	                    insertOrUpdateLinks(row, columnName, index);
	                }
	                else
	                    _totalNegativeValue += Number(row[measureColumn]);
	            });
	        });

	        //if all the nodes are negative values then return -1 
	        //we will later display a message to the user instead of showing a blank chart
	        if(allNegativeData === true) {
	            return -1;
	        }

	        function insertNodes(row, columnName) {
	            var column = columnName;
	            if (!nodesContains(row, column)){
	                t.nodes.push({name: row[column], columnName: column});
	            }   
	        }
	        
	        function insertOrUpdateLinks(row, columnName, index) {
	            var column = columnName;
	            if (index < (levels.length-1)) {
	                var nextNodeColumn = levels[index+1].columnName;
	                insertOrUpdateLink({name: row[column], column: column}, {name: row[nextNodeColumn], column: nextNodeColumn}, row[measureColumn]);
	            }
	        }
	        
	        function insertOrUpdateLink(source, target, value){
	            var foundLink = findLink(source,target);
	            var linkValue = Number(value);

	            if(foundLink) {
	                foundLink.value = foundLink.value + linkValue;
	            }
	            else {

	                t.links.push(newLink(source, target, linkValue));
	            }
	        }
	        
	        function findLink(source, target){
	            var sourceIndex = indexForNode(source);
	            var targetIndex = indexForNode(target);
	            var len = t.links.length;
	            for(var i=0;i<len;i++){
	                var currentLink = t.links[i];
	                if(currentLink.source === sourceIndex && currentLink.target === targetIndex){
	                    return currentLink;
	                }
	            }
	            return false;
	        }
	        
	        function newLink(source, target, value){
	            return {source: indexForNode(source), target: indexForNode(target), value: value};
	        }

	        function indexForNode(node){
	            var len = t.nodes.length;
	            for(var i=0;i<len;i++){
	                var currentNode = t.nodes[i];
	                if (currentNode.name === node.name && currentNode.columnName === node.column) return i;
	            }

	            return -1; //hopefully never happens
	        }

	        function nodesContains(row, column){
	            return t.nodes.some(function(node){ return node.name === row[column] && node.columnName === column;});
	        }

	        function linksContains(source, target){
	       
	        }
	        
	        return t;
	    }
	};
	// Renamed functions

	dc.abstractBubbleChart = dc.bubbleMixin;
	dc.baseChart = dc.baseMixin;
	dc.capped = dc.capMixin;
	dc.colorChart = dc.colorMixin;
	dc.coordinateGridChart = dc.coordinateGridMixin;
	dc.marginable = dc.marginMixin;
	dc.stackableChart = dc.stackMixin;

	return dc;}
	if(true) {
	  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(52)], __WEBPACK_AMD_DEFINE_FACTORY__ = (_dc), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if(typeof module === "object" && module.exports) {
	  module.exports = _dc(d3);
	} else {
	  this.dc = _dc(d3);
	}
	}
	)();


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/**
	 * @license
	 * lodash 3.7.0 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern -d -o ./index.js`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	;(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;

	  /** Used as the semantic version number. */
	  var VERSION = '3.7.0';

	  /** Used to compose bitmasks for wrapper metadata. */
	  var BIND_FLAG = 1,
	      BIND_KEY_FLAG = 2,
	      CURRY_BOUND_FLAG = 4,
	      CURRY_FLAG = 8,
	      CURRY_RIGHT_FLAG = 16,
	      PARTIAL_FLAG = 32,
	      PARTIAL_RIGHT_FLAG = 64,
	      ARY_FLAG = 128,
	      REARG_FLAG = 256;

	  /** Used as default options for `_.trunc`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect when a function becomes hot. */
	  var HOT_COUNT = 150,
	      HOT_SPAN = 16;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_DROP_WHILE_FLAG = 0,
	      LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2;

	  /** Used as the `TypeError` message for "Functions" methods. */
	  var FUNC_ERROR_TEXT = 'Expected a function';

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      objectTag = '[object Object]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      weakMapTag = '[object WeakMap]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
	      reUnescapedHtml = /[&<>"'`]/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]+|(["'])(?:(?!\1)[^\n\\]|\\.)*?)\1\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

	  /**
	   * Used to match `RegExp` [special characters](http://www.regular-expressions.info/characters.html#special).
	   * In addition to special characters the forward slash is escaped to allow for
	   * easier `eval` use and `Function` compilation.
	   */
	  var reRegExpChars = /[.*+?^${}()|[\]\/\\]/g,
	      reHasRegExpChars = RegExp(reRegExpChars.source);

	  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
	  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /** Used to match [ES template delimiters](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-template-literal-lexical-components). */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect hexadecimal string values. */
	  var reHasHexPrefix = /^0[xX]/;

	  /** Used to detect host constructors (Safari > 5). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
	  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to match words to create compound words. */
	  var reWords = (function() {
	    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
	        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

	    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
	  }());

	  /** Used to detect and test for whitespace. */
	  var whitespace = (
	    // Basic whitespace characters.
	    ' \t\x0b\f\xa0\ufeff' +

	    // Line terminators.
	    '\n\r\u2028\u2029' +

	    // Unicode category "Zs" space separators.
	    '\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000'
	  );

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
	    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'document',
	    'isFinite', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
	    'window'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
	  cloneableTags[dateTag] = cloneableTags[float32Tag] =
	  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
	  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[stringTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[mapTag] = cloneableTags[setTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used as an internal `_.debounce` options object by `_.throttle`. */
	  var debounceOptions = {
	    'leading': false,
	    'maxWait': 0,
	    'trailing': false
	  };

	  /** Used to map latin-1 supplementary letters to basic latin letters. */
	  var deburredLetters = {
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;',
	    '`': '&#96;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'",
	    '&#96;': '`'
	  };

	  /** Used to determine if values are of the language type `Object`. */
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Detect free variable `exports`. */
	  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

	  /** Detect free variable `module`. */
	  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

	  /** Detect free variable `self`. */
	  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

	  /** Detect free variable `window`. */
	  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

	  /**
	   * Used as a reference to the global object.
	   *
	   * The `this` value is used if it is the global object to avoid Greasemonkey's
	   * restricted `window` object, otherwise the `window` object is used.
	   */
	  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

	  /*--------------------------------------------------------------------------*/

	  /**
	   * The base implementation of `compareAscending` which compares values and
	   * sorts them in ascending order without guaranteeing a stable sort.
	   *
	   * @private
	   * @param {*} value The value to compare to `other`.
	   * @param {*} other The value to compare to `value`.
	   * @returns {number} Returns the sort order indicator for `value`.
	   */
	  function baseCompareAscending(value, other) {
	    if (value !== other) {
	      var valIsReflexive = value === value,
	          othIsReflexive = other === other;

	      if (value > other || !valIsReflexive || (value === undefined && othIsReflexive)) {
	        return 1;
	      }
	      if (value < other || !othIsReflexive || (other === undefined && valIsReflexive)) {
	        return -1;
	      }
	    }
	    return 0;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromRight) {
	    var length = array.length,
	        index = fromRight ? length : -1;

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without support for binary searches.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    if (value !== value) {
	      return indexOfNaN(array, fromIndex);
	    }
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.isFunction` without support for environments
	   * with incorrect `typeof` results.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	   */
	  function baseIsFunction(value) {
	    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
	    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
	    return typeof value == 'function' || false;
	  }

	  /**
	   * Converts `value` to a string if it is not one. An empty string is returned
	   * for `null` or `undefined` values.
	   *
	   * @private
	   * @param {*} value The value to process.
	   * @returns {string} Returns the string.
	   */
	  function baseToString(value) {
	    if (typeof value == 'string') {
	      return value;
	    }
	    return value == null ? '' : (value + '');
	  }

	  /**
	   * Used by `_.max` and `_.min` as the default callback for string values.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the code unit of the first character of the string.
	   */
	  function charAtCallback(string) {
	    return string.charCodeAt(0);
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the first character not found in `chars`.
	   */
	  function charsLeftIndex(string, chars) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the last character not found in `chars`.
	   */
	  function charsRightIndex(string, chars) {
	    var index = string.length;

	    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.sortBy` to compare transformed elements of a collection and stable
	   * sort them in ascending order.
	   *
	   * @private
	   * @param {Object} object The object to compare to `other`.
	   * @param {Object} other The object to compare to `object`.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareAscending(object, other) {
	    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
	  }

	  /**
	   * Used by `_.sortByOrder` to compare multiple properties of each element
	   * in a collection and stable sort them in the following order:
	   *
	   * If `orders` is unspecified, sort in ascending order for all properties.
	   * Otherwise, for each property, sort in ascending order if its corresponding value in
	   * orders is true, and descending order if false.
	   *
	   * @private
	   * @param {Object} object The object to compare to `other`.
	   * @param {Object} other The object to compare to `object`.
	   * @param {boolean[]} orders The order to sort by for each property.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareMultiple(object, other, orders) {
	    var index = -1,
	        objCriteria = object.criteria,
	        othCriteria = other.criteria,
	        length = objCriteria.length,
	        ordersLength = orders.length;

	    while (++index < length) {
	      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
	      if (result) {
	        if (index >= ordersLength) {
	          return result;
	        }
	        return result * (orders[index] ? 1 : -1);
	      }
	    }
	    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	    // that causes it, under certain circumstances, to provide the same value for
	    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	    // for more details.
	    //
	    // This also ensures a stable sort in V8 and other engines.
	    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
	    return object.index - other.index;
	  }

	  /**
	   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  function deburrLetter(letter) {
	    return deburredLetters[letter];
	  }

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeHtmlChar(chr) {
	    return htmlEscapes[chr];
	  }

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled
	   * string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the index at which the first occurrence of `NaN` is found in `array`.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	   */
	  function indexOfNaN(array, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 0 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      var other = array[index];
	      if (other !== other) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * Checks if `value` is object-like.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	   */
	  function isObjectLike(value) {
	    return !!value && typeof value == 'object';
	  }

	  /**
	   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
	   * character code is whitespace.
	   *
	   * @private
	   * @param {number} charCode The character code to inspect.
	   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
	   */
	  function isSpace(charCode) {
	    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
	      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      if (array[index] === placeholder) {
	        array[index] = PLACEHOLDER;
	        result[++resIndex] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * An implementation of `_.uniq` optimized for sorted arrays without support
	   * for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} [iteratee] The function invoked per iteration.
	   * @returns {Array} Returns the new duplicate-value-free array.
	   */
	  function sortedUniq(array, iteratee) {
	    var seen,
	        index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      var value = array[index],
	          computed = iteratee ? iteratee(value, index, array) : value;

	      if (!index || seen !== computed) {
	        seen = computed;
	        result[++resIndex] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the first non-whitespace character.
	   */
	  function trimmedLeftIndex(string) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the last non-whitespace character.
	   */
	  function trimmedRightIndex(string) {
	    var index = string.length;

	    while (index-- && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  function unescapeHtmlChar(chr) {
	    return htmlUnescapes[chr];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the given `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @category Utility
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // using `context` to mock `Date#getTime` use in `_.now`
	   * var mock = _.runInContext({
	   *   'Date': function() {
	   *     return { 'getTime': getTimeMock };
	   *   }
	   * });
	   *
	   * // or creating a suped-up `defer` in Node.js
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  function runInContext(context) {
	    // Avoid issues with some ES3 environments that attempt to use values, named
	    // after built-in constructors like `Object`, for the creation of literals.
	    // ES5 clears this up by stating that literals must use built-in constructors.
	    // See https://es5.github.io/#x11.1.5 for more details.
	    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

	    /** Native constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Number = context.Number,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;

	    /** Used for native method references. */
	    var arrayProto = Array.prototype,
	        objectProto = Object.prototype,
	        stringProto = String.prototype;

	    /** Used to detect DOM support. */
	    var document = (document = context.window) && document.document;

	    /** Used to resolve the decompiled source of functions. */
	    var fnToString = Function.prototype.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /**
	     * Used to resolve the [`toStringTag`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.tostring)
	     * of values.
	     */
	    var objToString = objectProto.toString;

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = context._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      escapeRegExp(objToString)
	      .replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Native method references. */
	    var ArrayBuffer = isNative(ArrayBuffer = context.ArrayBuffer) && ArrayBuffer,
	        bufferSlice = isNative(bufferSlice = ArrayBuffer && new ArrayBuffer(0).slice) && bufferSlice,
	        ceil = Math.ceil,
	        clearTimeout = context.clearTimeout,
	        floor = Math.floor,
	        getOwnPropertySymbols = isNative(getOwnPropertySymbols = Object.getOwnPropertySymbols) && getOwnPropertySymbols,
	        getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,
	        push = arrayProto.push,
	        preventExtensions = isNative(Object.preventExtensions = Object.preventExtensions) && preventExtensions,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        Set = isNative(Set = context.Set) && Set,
	        setTimeout = context.setTimeout,
	        splice = arrayProto.splice,
	        Uint8Array = isNative(Uint8Array = context.Uint8Array) && Uint8Array,
	        WeakMap = isNative(WeakMap = context.WeakMap) && WeakMap;

	    /** Used to clone array buffers. */
	    var Float64Array = (function() {
	      // Safari 5 errors when using an array buffer to initialize a typed array
	      // where the array buffer's `byteLength` is not a multiple of the typed
	      // array's `BYTES_PER_ELEMENT`.
	      try {
	        var func = isNative(func = context.Float64Array) && func,
	            result = new func(new ArrayBuffer(10), 0, 1) && func;
	      } catch(e) {}
	      return result;
	    }());

	    /** Used as `baseAssign`. */
	    var nativeAssign = (function() {
	      // Avoid `Object.assign` in Firefox 34-37 which have an early implementation
	      // with a now defunct try/catch behavior. See https://bugzilla.mozilla.org/show_bug.cgi?id=1103344
	      // for more details.
	      //
	      // Use `Object.preventExtensions` on a plain object instead of simply using
	      // `Object('x')` because Chrome and IE fail to throw an error when attempting
	      // to assign values to readonly indexes of strings in strict mode.
	      var object = { '1': 0 },
	          func = preventExtensions && isNative(func = Object.assign) && func;

	      try { func(preventExtensions(object), 'xo'); } catch(e) {}
	      return !object[1] && func;
	    }());

	    /* Native method references for those with the same name as other `lodash` methods. */
	    var nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,
	        nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,
	        nativeIsFinite = context.isFinite,
	        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = isNative(nativeNow = Date.now) && nativeNow,
	        nativeNumIsFinite = isNative(nativeNumIsFinite = Number.isFinite) && nativeNumIsFinite,
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random;

	    /** Used as references for `-Infinity` and `Infinity`. */
	    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
	        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

	    /** Used as references for the maximum length and index of an array. */
	    var MAX_ARRAY_LENGTH = Math.pow(2, 32) - 1,
	        MAX_ARRAY_INDEX =  MAX_ARRAY_LENGTH - 1,
	        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	    /** Used as the size, in bytes, of each `Float64Array` element. */
	    var FLOAT64_BYTES_PER_ELEMENT = Float64Array ? Float64Array.BYTES_PER_ELEMENT : 0;

	    /**
	     * Used as the [maximum length](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.max_safe_integer)
	     * of an array-like value.
	     */
	    var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
	     * Methods that operate on and return arrays, collections, and functions can
	     * be chained together. Methods that return a boolean or single value will
	     * automatically end the chain returning the unwrapped value. Explicit chaining
	     * may be enabled using `_.chain`. The execution of chained methods is lazy,
	     * that is, execution is deferred until `_#value` is implicitly or explicitly
	     * called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
	     * fusion is an optimization that merges iteratees to avoid creating intermediate
	     * arrays and reduce the number of iteratee executions.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
	     * `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
	     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
	     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
	     * and `where`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
	     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
	     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defer`, `delay`,
	     * `difference`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `fill`,
	     * `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`, `forEach`,
	     * `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `functions`,
	     * `groupBy`, `indexBy`, `initial`, `intersection`, `invert`, `invoke`, `keys`,
	     * `keysIn`, `map`, `mapValues`, `matches`, `matchesProperty`, `memoize`,
	     * `merge`, `mixin`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
	     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
	     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `reverse`,
	     * `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`, `sortByOrder`, `splice`,
	     * `spread`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `tap`,
	     * `throttle`, `thru`, `times`, `toArray`, `toPlainObject`, `transform`,
	     * `union`, `uniq`, `unshift`, `unzip`, `values`, `valuesIn`, `where`,
	     * `without`, `wrap`, `xor`, `zip`, and `zipObject`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `clone`, `cloneDeep`, `deburr`,
	     * `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`,
	     * `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`, `has`,
	     * `identity`, `includes`, `indexOf`, `inRange`, `isArguments`, `isArray`,
	     * `isBoolean`, `isDate`, `isElement`, `isEmpty`, `isEqual`, `isError`, `isFinite`
	     * `isFunction`, `isMatch`, `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`,
	     * `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `isTypedArray`,
	     * `join`, `kebabCase`, `last`, `lastIndexOf`, `max`, `min`, `noConflict`,
	     * `noop`, `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`,
	     * `reduce`, `reduceRight`, `repeat`, `result`, `runInContext`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`, `startsWith`,
	     * `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`, `unescape`,
	     * `uniqueId`, `value`, and `words`
	     *
	     * The wrapper method `sample` will return a wrapped value when `n` is provided,
	     * otherwise an unwrapped value is returned.
	     *
	     * @name _
	     * @constructor
	     * @category Chain
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // returns an unwrapped value
	     * wrapped.reduce(function(total, n) {
	     *   return total + n;
	     * });
	     * // => 6
	     *
	     * // returns a wrapped value
	     * var squares = wrapped.map(function(n) {
	     *   return n * n;
	     * });
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The function whose prototype all chaining wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
	     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
	     */
	    function LodashWrapper(value, chainAll, actions) {
	      this.__wrapped__ = value;
	      this.__actions__ = actions || [];
	      this.__chain__ = !!chainAll;
	    }

	    /**
	     * An object environment feature flags.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    var support = lodash.support = {};

	    (function(x) {
	      var Ctor = function() { this.x = x; },
	          object = { '0': x, 'length': x },
	          props = [];

	      Ctor.prototype = { 'valueOf': x, 'y': x };
	      for (var key in new Ctor) { props.push(key); }

	      /**
	       * Detect if functions can be decompiled by `Function#toString`
	       * (all but Firefox OS certified apps, older Opera mobile browsers, and
	       * the PlayStation 3; forced `false` for Windows 8 apps).
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.funcDecomp = /\bthis\b/.test(function() { return this; });

	      /**
	       * Detect if `Function#name` is supported (all but IE).
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      support.funcNames = typeof Function.name == 'string';

	      /**
	       * Detect if the DOM is supported.
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      try {
	        support.dom = document.createDocumentFragment().nodeType === 11;
	      } catch(e) {
	        support.dom = false;
	      }

	      /**
	       * Detect if `arguments` object indexes are non-enumerable.
	       *
	       * In Firefox < 4, IE < 9, PhantomJS, and Safari < 5.1 `arguments` object
	       * indexes are non-enumerable. Chrome < 25 and Node.js < 0.11.0 treat
	       * `arguments` object indexes as non-enumerable and fail `hasOwnProperty`
	       * checks for indexes that exceed the number of function parameters and
	       * whose associated argument values are `0`.
	       *
	       * @memberOf _.support
	       * @type boolean
	       */
	      try {
	        support.nonEnumArgs = !propertyIsEnumerable.call(arguments, 1);
	      } catch(e) {
	        support.nonEnumArgs = true;
	      }
	    }(1, 0));

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB). Change the following template settings to use
	     * alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type string
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type Object
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type Function
	         */
	        '_': lodash
	      }
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = null;
	      this.__dir__ = 1;
	      this.__dropCount__ = 0;
	      this.__filtered__ = false;
	      this.__iteratees__ = null;
	      this.__takeCount__ = POSITIVE_INFINITY;
	      this.__views__ = null;
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var actions = this.__actions__,
	          iteratees = this.__iteratees__,
	          views = this.__views__,
	          result = new LazyWrapper(this.__wrapped__);

	      result.__actions__ = actions ? arrayCopy(actions) : null;
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = iteratees ? arrayCopy(iteratees) : null;
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = views ? arrayCopy(views) : null;
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value();
	      if (!isArray(array)) {
	        return baseWrapperValue(array, this.__actions__);
	      }
	      var dir = this.__dir__,
	          isRight = dir < 0,
	          view = getView(0, array.length, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          takeCount = nativeMin(length, this.__takeCount__),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees ? iteratees.length : 0,
	          resIndex = 0,
	          result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type;

	          if (type == LAZY_DROP_WHILE_FLAG) {
	            if (data.done && (isRight ? (index > data.index) : (index < data.index))) {
	              data.count = 0;
	              data.done = false;
	            }
	            data.index = index;
	            if (!data.done) {
	              var limit = data.limit;
	              if (!(data.done = limit > -1 ? (data.count++ >= limit) : !iteratee(value))) {
	                continue outer;
	              }
	            }
	          } else {
	            var computed = iteratee(value);
	            if (type == LAZY_MAP_FLAG) {
	              value = computed;
	            } else if (!computed) {
	              if (type == LAZY_FILTER_FLAG) {
	                continue outer;
	              } else {
	                break outer;
	              }
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a cache object to store key/value pairs.
	     *
	     * @private
	     * @static
	     * @name Cache
	     * @memberOf _.memoize
	     */
	    function MapCache() {
	      this.__data__ = {};
	    }

	    /**
	     * Removes `key` and its value from the cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
	     */
	    function mapDelete(key) {
	      return this.has(key) && delete this.__data__[key];
	    }

	    /**
	     * Gets the cached value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the cached value.
	     */
	    function mapGet(key) {
	      return key == '__proto__' ? undefined : this.__data__[key];
	    }

	    /**
	     * Checks if a cached value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapHas(key) {
	      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
	    }

	    /**
	     * Sets `value` to `key` of the cache.
	     *
	     * @private
	     * @name set
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to cache.
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache object.
	     */
	    function mapSet(key, value) {
	      if (key != '__proto__') {
	        this.__data__[key] = value;
	      }
	      return this;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates a cache object to store unique values.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var length = values ? values.length : 0;

	      this.data = { 'hash': nativeCreate(null), 'set': new Set };
	      while (length--) {
	        this.push(values[length]);
	      }
	    }

	    /**
	     * Checks if `value` is in `cache` mimicking the return signature of
	     * `_.indexOf` by returning `0` if the value is found, else `-1`.
	     *
	     * @private
	     * @param {Object} cache The cache to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `0` if `value` is found, else `-1`.
	     */
	    function cacheIndexOf(cache, value) {
	      var data = cache.data,
	          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

	      return result ? 0 : -1;
	    }

	    /**
	     * Adds `value` to the cache.
	     *
	     * @private
	     * @name push
	     * @memberOf SetCache
	     * @param {*} value The value to cache.
	     */
	    function cachePush(value) {
	      var data = this.data;
	      if (typeof value == 'string' || isObject(value)) {
	        data.set.add(value);
	      } else {
	        data.hash[value] = true;
	      }
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayCopy(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEach` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEach(array, iteratee) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (iteratee(array[index], index, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEachRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEachRight(array, iteratee) {
	      var length = array.length;

	      while (length--) {
	        if (iteratee(array[length], length, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.every` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     */
	    function arrayEvery(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (!predicate(array[index], index, array)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * A specialized version of `_.filter` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function arrayFilter(array, predicate) {
	      var index = -1,
	          length = array.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.map` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function arrayMap(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = iteratee(array[index], index, array);
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.max` for arrays without support for iteratees.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the maximum value.
	     */
	    function arrayMax(array) {
	      var index = -1,
	          length = array.length,
	          result = NEGATIVE_INFINITY;

	      while (++index < length) {
	        var value = array[index];
	        if (value > result) {
	          result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.min` for arrays without support for iteratees.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @returns {*} Returns the minimum value.
	     */
	    function arrayMin(array) {
	      var index = -1,
	          length = array.length,
	          result = POSITIVE_INFINITY;

	      while (++index < length) {
	        var value = array[index];
	        if (value < result) {
	          result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.reduce` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the first element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduce(array, iteratee, accumulator, initFromArray) {
	      var index = -1,
	          length = array.length;

	      if (initFromArray && length) {
	        accumulator = array[++index];
	      }
	      while (++index < length) {
	        accumulator = iteratee(accumulator, array[index], index, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.reduceRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the last element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
	      var length = array.length;
	      if (initFromArray && length) {
	        accumulator = array[--length];
	      }
	      while (length--) {
	        accumulator = iteratee(accumulator, array[length], length, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.some` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function arraySome(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (predicate(array[index], index, array)) {
	          return true;
	        }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `_.sum` for arrays without support for iteratees.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @returns {number} Returns the sum.
	     */
	    function arraySum(array) {
	      var length = array.length,
	          result = 0;

	      while (length--) {
	        result += +array[length] || 0;
	      }
	      return result;
	    }

	    /**
	     * Used by `_.defaults` to customize its `_.assign` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignDefaults(objectValue, sourceValue) {
	      return objectValue === undefined ? sourceValue : objectValue;
	    }

	    /**
	     * Used by `_.template` to customize its `_.assign` use.
	     *
	     * **Note:** This function is like `assignDefaults` except that it ignores
	     * inherited property values when checking if a property is `undefined`.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @param {string} key The key associated with the object and source values.
	     * @param {Object} object The destination object.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignOwnDefaults(objectValue, sourceValue, key, object) {
	      return (objectValue === undefined || !hasOwnProperty.call(object, key))
	        ? sourceValue
	        : objectValue;
	    }

	    /**
	     * A specialized version of `_.assign` for customizing assigned values without
	     * support for argument juggling, multiple sources, and `this` binding `customizer`
	     * functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     */
	    function assignWith(object, source, customizer) {
	      var props = keys(source);
	      push.apply(props, getSymbols(source));

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index],
	            value = object[key],
	            result = customizer(value, source[key], key, object, source);

	        if ((result === result ? (result !== value) : (value === value)) ||
	            (value === undefined && !(key in object))) {
	          object[key] = result;
	        }
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.assign` without support for argument juggling,
	     * multiple sources, and `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    var baseAssign = nativeAssign || function(object, source) {
	      return source == null
	        ? object
	        : baseCopy(source, getSymbols(source), baseCopy(source, keys(source), object));
	    };

	    /**
	     * The base implementation of `_.at` without support for string collections
	     * and individual key arguments.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {number[]|string[]} props The property names or indexes of elements to pick.
	     * @returns {Array} Returns the new array of picked elements.
	     */
	    function baseAt(collection, props) {
	      var index = -1,
	          length = collection.length,
	          isArr = isLength(length),
	          propsLength = props.length,
	          result = Array(propsLength);

	      while(++index < propsLength) {
	        var key = props[index];
	        if (isArr) {
	          result[index] = isIndex(key, length) ? collection[key] : undefined;
	        } else {
	          result[index] = collection[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property names to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @returns {Object} Returns `object`.
	     */
	    function baseCopy(source, props, object) {
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];
	        object[key] = source[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.callback` which supports specifying the
	     * number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function baseCallback(func, thisArg, argCount) {
	      var type = typeof func;
	      if (type == 'function') {
	        return thisArg === undefined
	          ? func
	          : bindCallback(func, thisArg, argCount);
	      }
	      if (func == null) {
	        return identity;
	      }
	      if (type == 'object') {
	        return baseMatches(func);
	      }
	      return thisArg === undefined
	        ? property(func)
	        : baseMatchesProperty(func, thisArg);
	    }

	    /**
	     * The base implementation of `_.clone` without support for argument juggling
	     * and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The object `value` belongs to.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates clones with source counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
	      var result;
	      if (customizer) {
	        result = object ? customizer(value, key, object) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return arrayCopy(value, result);
	        }
	      } else {
	        var tag = objToString.call(value),
	            isFunc = tag == funcTag;

	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = initCloneObject(isFunc ? {} : value);
	          if (!isDeep) {
	            return baseAssign(result, value);
	          }
	        } else {
	          return cloneableTags[tag]
	            ? initCloneByTag(value, tag, isDeep)
	            : (object ? value : {});
	        }
	      }
	      // Check for circular references and return corresponding clone.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == value) {
	          return stackB[length];
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate it with its clone.
	      stackA.push(value);
	      stackB.push(result);

	      // Recursively populate clone (susceptible to call stack limits).
	      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
	        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} prototype The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function Object() {}
	      return function(prototype) {
	        if (isObject(prototype)) {
	          Object.prototype = prototype;
	          var result = new Object;
	          Object.prototype = null;
	        }
	        return result || context.Object();
	      };
	    }());

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts an index
	     * of where to slice the arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Object} args The arguments provide to `func`.
	     * @returns {number} Returns the timer id.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }

	    /**
	     * The base implementation of `_.difference` which accepts a single array
	     * of values to exclude.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values) {
	      var length = array ? array.length : 0,
	          result = [];

	      if (!length) {
	        return result;
	      }
	      var index = -1,
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          cache = (isCommon && values.length >= 200) ? createCache(values) : null,
	          valuesLength = values.length;

	      if (cache) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	        values = cache;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index];

	        if (isCommon && value === value) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === value) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (indexOf(values, value, 0) < 0) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : (end >>> 0);
	      start >>>= 0;

	      while (start < length) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
	     * without support for callback shorthands and `this` binding, which iterates
	     * over `collection` using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @param {boolean} [retKey] Specify returning the key of the found element
	     *  instead of the element itself.
	     * @returns {*} Returns the found element or its key, else `undefined`.
	     */
	    function baseFind(collection, predicate, eachFunc, retKey) {
	      var result;
	      eachFunc(collection, function(value, key, collection) {
	        if (predicate(value, key, collection)) {
	          result = retKey ? key : value;
	          return false;
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with added support for restricting
	     * flattening and specifying the start index.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {boolean} isDeep Specify a deep flatten.
	     * @param {boolean} isStrict Restrict flattening to arrays and `arguments` objects.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, isDeep, isStrict) {
	      var index = -1,
	          length = array.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];

	        if (isObjectLike(value) && isLength(value.length) && (isArray(value) || isArguments(value))) {
	          if (isDeep) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            value = baseFlatten(value, isDeep, isStrict);
	          }
	          var valIndex = -1,
	              valLength = value.length;

	          result.length += valLength;
	          while (++valIndex < valLength) {
	            result[++resIndex] = value[valIndex];
	          }
	        } else if (!isStrict) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForIn` and `baseForOwn` which iterates
	     * over `object` properties returned by `keysFunc` invoking `iteratee` for
	     * each property. Iteratee functions may exit iteration early by explicitly
	     * returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forIn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForIn(object, iteratee) {
	      return baseFor(object, iteratee, keysIn);
	    }

	    /**
	     * The base implementation of `_.forOwn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from those provided.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the new array of filtered property names.
	     */
	    function baseFunctions(object, props) {
	      var index = -1,
	          length = props.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var key = props[index];
	        if (isFunction(object[key])) {
	          result[++resIndex] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `get` without support for string paths
	     * and default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path of the property to get.
	     * @param {string} [pathKey] The key representation of path.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path, pathKey) {
	      if (object == null) {
	        return;
	      }
	      if (pathKey !== undefined && pathKey in toObject(object)) {
	        path = [pathKey];
	      }
	      var index = -1,
	          length = path.length;

	      while (object != null && ++index < length) {
	        var result = object = object[path[index]];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.isEqual` without support for `this` binding
	     * `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
	      // Exit early for identical values.
	      if (value === other) {
	        // Treat `+0` vs. `-0` as not equal.
	        return value !== 0 || (1 / value == 1 / other);
	      }
	      var valType = typeof value,
	          othType = typeof other;

	      // Exit early for unlike primitive values.
	      if ((valType != 'function' && valType != 'object' && othType != 'function' && othType != 'object') ||
	          value == null || other == null) {
	        // Return `false` unless both values are `NaN`.
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
	     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = arrayTag,
	          othTag = arrayTag;

	      if (!objIsArr) {
	        objTag = objToString.call(object);
	        if (objTag == argsTag) {
	          objTag = objectTag;
	        } else if (objTag != objectTag) {
	          objIsArr = isTypedArray(object);
	        }
	      }
	      if (!othIsArr) {
	        othTag = objToString.call(other);
	        if (othTag == argsTag) {
	          othTag = objectTag;
	        } else if (othTag != objectTag) {
	          othIsArr = isTypedArray(other);
	        }
	      }
	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;

	      if (isSameTag && !(objIsArr || objIsObj)) {
	        return equalByTag(object, other, objTag);
	      }
	      if (!isLoose) {
	        var valWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (valWrapped || othWrapped) {
	          return equalFunc(valWrapped ? object.value() : object, othWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      // For more information on detecting circular references see https://es5.github.io/#JO.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == object) {
	          return stackB[length] == other;
	        }
	      }
	      // Add `object` and `other` to the stack of traversed objects.
	      stackA.push(object);
	      stackB.push(other);

	      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

	      stackA.pop();
	      stackB.pop();

	      return result;
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The source property names to match.
	     * @param {Array} values The source values to match.
	     * @param {Array} strictCompareFlags Strict comparison flags for source values.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, props, values, strictCompareFlags, customizer) {
	      var index = -1,
	          length = props.length,
	          noCustomizer = !customizer;

	      while (++index < length) {
	        if ((noCustomizer && strictCompareFlags[index])
	              ? values[index] !== object[props[index]]
	              : !(props[index] in object)
	            ) {
	          return false;
	        }
	      }
	      index = -1;
	      while (++index < length) {
	        var key = props[index],
	            objValue = object[key],
	            srcValue = values[index];

	        if (noCustomizer && strictCompareFlags[index]) {
	          var result = objValue !== undefined || (key in object);
	        } else {
	          result = customizer ? customizer(objValue, srcValue, key) : undefined;
	          if (result === undefined) {
	            result = baseIsEqual(srcValue, objValue, customizer, true);
	          }
	        }
	        if (!result) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.map` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          length = getLength(collection),
	          result = isLength(length) ? Array(length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which does not clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatches(source) {
	      var props = keys(source),
	          length = props.length;

	      if (!length) {
	        return constant(true);
	      }
	      if (length == 1) {
	        var key = props[0],
	            value = source[key];

	        if (isStrictComparable(value)) {
	          return function(object) {
	            if (object == null) {
	              return false;
	            }
	            return object[key] === value && (value !== undefined || (key in toObject(object)));
	          };
	        }
	      }
	      var values = Array(length),
	          strictCompareFlags = Array(length);

	      while (length--) {
	        value = source[props[length]];
	        values[length] = value;
	        strictCompareFlags[length] = isStrictComparable(value);
	      }
	      return function(object) {
	        return object != null && baseIsMatch(toObject(object), props, values, strictCompareFlags);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which does not which does
	     * not clone `value`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} value The value to compare.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatchesProperty(path, value) {
	      var isArr = isArray(path),
	          isCommon = isKey(path) && isStrictComparable(value),
	          pathKey = (path + '');

	      path = toPath(path);
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        var key = pathKey;
	        object = toObject(object);
	        if ((isArr || !isCommon) && !(key in object)) {
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          if (object == null) {
	            return false;
	          }
	          key = last(path);
	          object = toObject(object);
	        }
	        return object[key] === value
	          ? (value !== undefined || (key in object))
	          : baseIsEqual(value, object[key], null, true);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for argument juggling,
	     * multiple sources, and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} [customizer] The function to customize merging properties.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {Object} Returns `object`.
	     */
	    function baseMerge(object, source, customizer, stackA, stackB) {
	      if (!isObject(object)) {
	        return object;
	      }
	      var isSrcArr = isLength(source.length) && (isArray(source) || isTypedArray(source));
	      if (!isSrcArr) {
	        var props = keys(source);
	        push.apply(props, getSymbols(source));
	      }
	      arrayEach(props || source, function(srcValue, key) {
	        if (props) {
	          key = srcValue;
	          srcValue = source[key];
	        }
	        if (isObjectLike(srcValue)) {
	          stackA || (stackA = []);
	          stackB || (stackB = []);
	          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
	        }
	        else {
	          var value = object[key],
	              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	              isCommon = result === undefined;

	          if (isCommon) {
	            result = srcValue;
	          }
	          if ((isSrcArr || result !== undefined) &&
	              (isCommon || (result === result ? (result !== value) : (value === value)))) {
	            object[key] = result;
	          }
	        }
	      });
	      return object;
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize merging properties.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
	      var length = stackA.length,
	          srcValue = source[key];

	      while (length--) {
	        if (stackA[length] == srcValue) {
	          object[key] = stackB[length];
	          return;
	        }
	      }
	      var value = object[key],
	          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	          isCommon = result === undefined;

	      if (isCommon) {
	        result = srcValue;
	        if (isLength(srcValue.length) && (isArray(srcValue) || isTypedArray(srcValue))) {
	          result = isArray(value)
	            ? value
	            : (getLength(value) ? arrayCopy(value) : []);
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          result = isArguments(value)
	            ? toPlainObject(value)
	            : (isPlainObject(value) ? value : {});
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate
	      // it with its merged value.
	      stackA.push(srcValue);
	      stackB.push(result);

	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
	      } else if (result === result ? (result !== value) : (value === value)) {
	        object[key] = result;
	      }
	    }

	    /**
	     * The base implementation of `_.property` without support for deep paths.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function baseProperty(key) {
	      return function(object) {
	        return object == null ? undefined : object[key];
	      };
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function basePropertyDeep(path) {
	      var pathKey = (path + '');
	      path = toPath(path);
	      return function(object) {
	        return baseGet(object, path, pathKey);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * index arguments and capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = indexes.length;
	      while (length--) {
	        var index = parseFloat(indexes[length]);
	        if (index != previous && isIndex(index)) {
	          var previous = index;
	          splice.call(array, index, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for argument juggling
	     * and returning floating-point numbers.
	     *
	     * @private
	     * @param {number} min The minimum possible value.
	     * @param {number} max The maximum possible value.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(min, max) {
	      return min + floor(nativeRandom() * (max - min + 1));
	    }

	    /**
	     * The base implementation of `_.reduce` and `_.reduceRight` without support
	     * for callback shorthands and `this` binding, which iterates over `collection`
	     * using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} accumulator The initial value.
	     * @param {boolean} initFromCollection Specify using the first or last element
	     *  of `collection` as the initial value.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @returns {*} Returns the accumulated value.
	     */
	    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
	      eachFunc(collection, function(value, index, collection) {
	        accumulator = initFromCollection
	          ? (initFromCollection = false, value)
	          : iteratee(accumulator, value, index, collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop detection.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortBy` which uses `comparer` to define
	     * the sort order of `array` and replaces criteria objects with their
	     * corresponding values.
	     *
	     * @private
	     * @param {Array} array The array to sort.
	     * @param {Function} comparer The function to define sort order.
	     * @returns {Array} Returns `array`.
	     */
	    function baseSortBy(array, comparer) {
	      var length = array.length;

	      array.sort(comparer);
	      while (length--) {
	        array[length] = array[length].value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.sortByOrder` without param guards.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseSortByOrder(collection, iteratees, orders) {
	      var callback = getCallback(),
	          index = -1;

	      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });

	      var result = baseMap(collection, function(value) {
	        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.sum` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {number} Returns the sum.
	     */
	    function baseSum(collection, iteratee) {
	      var result = 0;
	      baseEach(collection, function(value, index, collection) {
	        result += +iteratee(value, index, collection) || 0;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.uniq` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The function invoked per iteration.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     */
	    function baseUniq(array, iteratee) {
	      var index = -1,
	          indexOf = getIndexOf(),
	          length = array.length,
	          isCommon = indexOf == baseIndexOf,
	          isLarge = isCommon && length >= 200,
	          seen = isLarge ? createCache() : null,
	          result = [];

	      if (seen) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	      } else {
	        isLarge = false;
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value, index, array) : value;

	        if (isCommon && value === value) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (indexOf(seen, computed, 0) < 0) {
	          if (iteratee || isLarge) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.values` and `_.valuesIn` which creates an
	     * array of `object` property values corresponding to the property names
	     * of `props`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} props The property names to get values for.
	     * @returns {Object} Returns the array of property values.
	     */
	    function baseValues(object, props) {
	      var index = -1,
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = object[props[index]];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
	     * and `_.takeWhile` without support for callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to peform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      var index = -1,
	          length = actions.length;

	      while (++index < length) {
	        var args = [result],
	            action = actions[index];

	        push.apply(args, action.args);
	        result = action.func.apply(action.thisArg, args);
	      }
	      return result;
	    }

	    /**
	     * Performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndex(array, value, retHighest) {
	      var low = 0,
	          high = array ? array.length : low;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if (retHighest ? (computed <= value) : (computed < value)) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return binaryIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * This function is like `binaryIndex` except that it invokes `iteratee` for
	     * `value` and each element of `array` to compute their sort ranking. The
	     * iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);

	      var low = 0,
	          high = array ? array.length : 0,
	          valIsNaN = value !== value,
	          valIsUndef = value === undefined;

	      while (low < high) {
	        var mid = floor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            isReflexive = computed === computed;

	        if (valIsNaN) {
	          var setLow = isReflexive || retHighest;
	        } else if (valIsUndef) {
	          setLow = isReflexive && (retHighest || computed !== undefined);
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * A specialized version of `baseCallback` which only supports `this` binding
	     * and specifying the number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function bindCallback(func, thisArg, argCount) {
	      if (typeof func != 'function') {
	        return identity;
	      }
	      if (thisArg === undefined) {
	        return func;
	      }
	      switch (argCount) {
	        case 1: return function(value) {
	          return func.call(thisArg, value);
	        };
	        case 3: return function(value, index, collection) {
	          return func.call(thisArg, value, index, collection);
	        };
	        case 4: return function(accumulator, value, index, collection) {
	          return func.call(thisArg, accumulator, value, index, collection);
	        };
	        case 5: return function(value, other, key, object, source) {
	          return func.call(thisArg, value, other, key, object, source);
	        };
	      }
	      return function() {
	        return func.apply(thisArg, arguments);
	      };
	    }

	    /**
	     * Creates a clone of the given array buffer.
	     *
	     * @private
	     * @param {ArrayBuffer} buffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function bufferClone(buffer) {
	      return bufferSlice.call(buffer, 0);
	    }
	    if (!bufferSlice) {
	      // PhantomJS has `ArrayBuffer` and `Uint8Array` but not `Float64Array`.
	      bufferClone = !(ArrayBuffer && Uint8Array) ? constant(null) : function(buffer) {
	        var byteLength = buffer.byteLength,
	            floatLength = Float64Array ? floor(byteLength / FLOAT64_BYTES_PER_ELEMENT) : 0,
	            offset = floatLength * FLOAT64_BYTES_PER_ELEMENT,
	            result = new ArrayBuffer(byteLength);

	        if (floatLength) {
	          var view = new Float64Array(result, 0, floatLength);
	          view.set(new Float64Array(buffer, 0, floatLength));
	        }
	        if (byteLength != offset) {
	          view = new Uint8Array(result, offset);
	          view.set(new Uint8Array(buffer, offset));
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders) {
	      var holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          leftIndex = -1,
	          leftLength = partials.length,
	          result = Array(argsLength + leftLength);

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        result[holders[argsIndex]] = args[argsIndex];
	      }
	      while (argsLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders) {
	      var holdersIndex = -1,
	          holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          rightIndex = -1,
	          rightLength = partials.length,
	          result = Array(argsLength + rightLength);

	      while (++argsIndex < argsLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var pad = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[pad + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        result[pad + holders[holdersIndex]] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * Creates a function that aggregates a collection, creating an accumulator
	     * object composed from the results of running each element in the collection
	     * through an iteratee.
	     *
	     * **Note:** This function is used to create `_.countBy`, `_.groupBy`, `_.indexBy`,
	     * and `_.partition`.
	     *
	     * @private
	     * @param {Function} setter The function to set keys and values of the accumulator object.
	     * @param {Function} [initializer] The function to initialize the accumulator object.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee, thisArg) {
	        var result = initializer ? initializer() : {};
	        iteratee = getCallback(iteratee, thisArg, 3);

	        if (isArray(collection)) {
	          var index = -1,
	              length = collection.length;

	          while (++index < length) {
	            var value = collection[index];
	            setter(result, value, iteratee(value, index, collection), collection);
	          }
	        } else {
	          baseEach(collection, function(value, key, collection) {
	            setter(result, value, iteratee(value, key, collection), collection);
	          });
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that assigns properties of source object(s) to a given
	     * destination object.
	     *
	     * **Note:** This function is used to create `_.assign`, `_.defaults`, and `_.merge`.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return restParam(function(object, sources) {
	        var index = -1,
	            length = object == null ? 0 : sources.length,
	            customizer = length > 2 && sources[length - 2],
	            guard = length > 2 && sources[2],
	            thisArg = length > 1 && sources[length - 1];

	        if (typeof customizer == 'function') {
	          customizer = bindCallback(customizer, thisArg, 5);
	          length -= 2;
	        } else {
	          customizer = typeof thisArg == 'function' ? thisArg : null;
	          length -= (customizer ? 1 : 0);
	        }
	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? null : customizer;
	          length = 1;
	        }
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        var length = collection ? getLength(collection) : 0;
	        if (!isLength(length)) {
	          return eachFunc(collection, iteratee);
	        }
	        var index = fromRight ? length : -1,
	            iterable = toObject(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var iterable = toObject(object),
	            props = keysFunc(object),
	            length = props.length,
	            index = fromRight ? length : -1;

	        while ((fromRight ? index-- : ++index < length)) {
	          var key = props[index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createBindWrapper(func, thisArg) {
	      var Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(thisArg, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `Set` cache object to optimize linear searches of large arrays.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
	     */
	    var createCache = !(nativeCreate && Set) ? constant(null) : function(values) {
	      return new SetCache(values);
	    };

	    /**
	     * Creates a function that produces compound words out of the words in a
	     * given string.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        var index = -1,
	            array = words(deburr(string)),
	            length = array.length,
	            result = '';

	        while (++index < length) {
	          result = callback(result, array[index], index);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtorWrapper(Ctor) {
	      return function() {
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, arguments);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a `_.curry` or `_.curryRight` function.
	     *
	     * @private
	     * @param {boolean} flag The curry bit flag.
	     * @returns {Function} Returns the new curry function.
	     */
	    function createCurry(flag) {
	      function curryFunc(func, arity, guard) {
	        if (guard && isIterateeCall(func, arity, guard)) {
	          arity = null;
	        }
	        var result = createWrapper(func, flag, null, null, null, null, null, arity);
	        result.placeholder = curryFunc.placeholder;
	        return result;
	      }
	      return curryFunc;
	    }

	    /**
	     * Creates a `_.max` or `_.min` function.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to get the extremum value from an array.
	     * @param {boolean} [isMin] Specify returning the minimum, instead of the maximum,
	     *  extremum value.
	     * @returns {Function} Returns the new extremum function.
	     */
	    function createExtremum(arrayFunc, isMin) {
	      return function(collection, iteratee, thisArg) {
	        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	          iteratee = null;
	        }
	        var func = getCallback(),
	            noIteratee = iteratee == null;

	        if (!(func === baseCallback && noIteratee)) {
	          noIteratee = false;
	          iteratee = func(iteratee, thisArg, 3);
	        }
	        if (noIteratee) {
	          var isArr = isArray(collection);
	          if (!isArr && isString(collection)) {
	            iteratee = charAtCallback;
	          } else {
	            return arrayFunc(isArr ? collection : toIterable(collection));
	          }
	        }
	        return extremumBy(collection, iteratee, isMin);
	      };
	    }

	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(eachFunc, fromRight) {
	      return function(collection, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        if (isArray(collection)) {
	          var index = baseFindIndex(collection, predicate, fromRight);
	          return index > -1 ? collection[index] : undefined;
	        }
	        return baseFind(collection, predicate, eachFunc);
	      }
	    }

	    /**
	     * Creates a `_.findIndex` or `_.findLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindIndex(fromRight) {
	      return function(array, predicate, thisArg) {
	        if (!(array && array.length)) {
	          return -1;
	        }
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFindIndex(array, predicate, fromRight);
	      };
	    }

	    /**
	     * Creates a `_.findKey` or `_.findLastKey` function.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindKey(objectFunc) {
	      return function(object, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFind(object, predicate, objectFunc, true);
	      };
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return function() {
	        var length = arguments.length;
	        if (!length) {
	          return function() { return arguments[0]; };
	        }
	        var wrapper,
	            index = fromRight ? length : -1,
	            leftIndex = 0,
	            funcs = Array(length);

	        while ((fromRight ? index-- : ++index < length)) {
	          var func = funcs[leftIndex++] = arguments[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          var funcName = wrapper ? '' : getFuncName(func);
	          wrapper = funcName == 'wrapper' ? new LodashWrapper([]) : wrapper;
	        }
	        index = wrapper ? -1 : length;
	        while (++index < length) {
	          func = funcs[index];
	          funcName = getFuncName(func);

	          var data = funcName == 'wrapper' ? getData(func) : null;
	          if (data && isLaziable(data[0])) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments;
	          if (wrapper && args.length == 1 && isArray(args[0])) {
	            return wrapper.plant(args[0]).value();
	          }
	          var index = 0,
	              result = funcs[index].apply(this, args);

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      };
	    }

	    /**
	     * Creates a function for `_.forEach` or `_.forEachRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForEach(arrayFunc, eachFunc) {
	      return function(collection, iteratee, thisArg) {
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee)
	          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
	      };
	    }

	    /**
	     * Creates a function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForIn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee, keysIn);
	      };
	    }

	    /**
	     * Creates a function for `_.forOwn` or `_.forOwnRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForOwn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee);
	      };
	    }

	    /**
	     * Creates a function for `_.padLeft` or `_.padRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify padding from the right.
	     * @returns {Function} Returns the new pad function.
	     */
	    function createPadDir(fromRight) {
	      return function(string, length, chars) {
	        string = baseToString(string);
	        return string && ((fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string));
	      };
	    }

	    /**
	     * Creates a `_.partial` or `_.partialRight` function.
	     *
	     * @private
	     * @param {boolean} flag The partial bit flag.
	     * @returns {Function} Returns the new partial function.
	     */
	    function createPartial(flag) {
	      var partialFunc = restParam(function(func, partials) {
	        var holders = replaceHolders(partials, partialFunc.placeholder);
	        return createWrapper(func, flag, null, partials, holders);
	      });
	      return partialFunc;
	    }

	    /**
	     * Creates a function for `_.reduce` or `_.reduceRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createReduce(arrayFunc, eachFunc) {
	      return function(collection, iteratee, accumulator, thisArg) {
	        var initFromArray = arguments.length < 3;
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee, accumulator, initFromArray)
	          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with optional `this`
	     * binding of, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & ARY_FLAG,
	          isBind = bitmask & BIND_FLAG,
	          isBindKey = bitmask & BIND_KEY_FLAG,
	          isCurry = bitmask & CURRY_FLAG,
	          isCurryBound = bitmask & CURRY_BOUND_FLAG,
	          isCurryRight = bitmask & CURRY_RIGHT_FLAG;

	      var Ctor = !isBindKey && createCtorWrapper(func),
	          key = func;

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it to other functions.
	        var length = arguments.length,
	            index = length,
	            args = Array(length);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight);
	        }
	        if (isCurry || isCurryRight) {
	          var placeholder = wrapper.placeholder,
	              argsHolders = replaceHolders(args, placeholder);

	          length -= argsHolders.length;
	          if (length < arity) {
	            var newArgPos = argPos ? arrayCopy(argPos) : null,
	                newArity = nativeMax(arity - length, 0),
	                newsHolders = isCurry ? argsHolders : null,
	                newHoldersRight = isCurry ? null : argsHolders,
	                newPartials = isCurry ? args : null,
	                newPartialsRight = isCurry ? null : args;

	            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

	            if (!isCurryBound) {
	              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	            }
	            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
	                result = createHybridWrapper.apply(undefined, newData);

	            if (isLaziable(func)) {
	              setData(result, newData);
	            }
	            result.placeholder = placeholder;
	            return result;
	          }
	        }
	        var thisBinding = isBind ? thisArg : this;
	        if (isBindKey) {
	          func = thisBinding[key];
	        }
	        if (argPos) {
	          args = reorder(args, argPos);
	        }
	        if (isAry && ary < args.length) {
	          args.length = ary;
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? (Ctor || createCtorWrapper(func)) : func;
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates the padding required for `string` based on the given `length`.
	     * The `chars` string is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {string} string The string to create padding for.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the pad for `string`.
	     */
	    function createPadding(string, length, chars) {
	      var strLength = string.length;
	      length = +length;

	      if (strLength >= length || !nativeIsFinite(length)) {
	        return '';
	      }
	      var padLength = length - strLength;
	      chars = chars == null ? ' ' : (chars + '');
	      return repeat(chars, ceil(padLength / chars.length)).slice(0, padLength);
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the optional `this`
	     * binding of `thisArg` and the `partials` prepended to those provided to
	     * the wrapper.
	     *
	     * @private
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to the new function.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createPartialWrapper(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it `func`.
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(argsLength + leftLength);

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {Function} Returns the new index function.
	     */
	    function createSortedIndex(retHighest) {
	      return function(array, value, iteratee, thisArg) {
	        var func = getCallback(iteratee);
	        return (func === baseCallback && iteratee == null)
	          ? binaryIndex(array, value, retHighest)
	          : binaryIndexBy(array, value, func(iteratee, thisArg, 1), retHighest);
	      };
	    }

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - `_.bind`
	     *     2 - `_.bindKey`
	     *     4 - `_.curry` or `_.curryRight` of a bound function
	     *     8 - `_.curry`
	     *    16 - `_.curryRight`
	     *    32 - `_.partial`
	     *    64 - `_.partialRight`
	     *   128 - `_.rearg`
	     *   256 - `_.ary`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	        partials = holders = null;
	      }
	      length -= (holders ? holders.length : 0);
	      if (bitmask & PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = null;
	      }
	      var data = isBindKey ? null : getData(func),
	          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

	      if (data) {
	        mergeData(newData, data);
	        bitmask = newData[1];
	        arity = newData[9];
	      }
	      newData[9] = arity == null
	        ? (isBindKey ? 0 : func.length)
	        : (nativeMax(arity - length, 0) || 0);

	      if (bitmask == BIND_FLAG) {
	        var result = createBindWrapper(newData[0], newData[2]);
	      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
	        result = createPartialWrapper.apply(undefined, newData);
	      } else {
	        result = createHybridWrapper.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setter(result, newData);
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing arrays.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var index = -1,
	          arrLength = array.length,
	          othLength = other.length,
	          result = true;

	      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
	        return false;
	      }
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (result && ++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index];

	        result = undefined;
	        if (customizer) {
	          result = isLoose
	            ? customizer(othValue, arrValue, index)
	            : customizer(arrValue, othValue, index);
	        }
	        if (result === undefined) {
	          // Recursively compare arrays (susceptible to call stack limits).
	          if (isLoose) {
	            var othIndex = othLength;
	            while (othIndex--) {
	              othValue = other[othIndex];
	              result = (arrValue && arrValue === othValue) || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
	              if (result) {
	                break;
	              }
	            }
	          } else {
	            result = (arrValue && arrValue === othValue) || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
	          }
	        }
	      }
	      return !!result;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} value The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag) {
	      switch (tag) {
	        case boolTag:
	        case dateTag:
	          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	          return +object == +other;

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case numberTag:
	          // Treat `NaN` vs. `NaN` as equal.
	          return (object != +object)
	            ? other != +other
	            // But, treat `-0` vs. `+0` as not equal.
	            : (object == 0 ? ((1 / object) == (1 / other)) : object == +other);

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings primitives and string
	          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	          return object == (other + '');
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objProps = keys(object),
	          objLength = objProps.length,
	          othProps = keys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isLoose) {
	        return false;
	      }
	      var skipCtor = isLoose,
	          index = -1;

	      while (++index < objLength) {
	        var key = objProps[index],
	            result = isLoose ? key in other : hasOwnProperty.call(other, key);

	        if (result) {
	          var objValue = object[key],
	              othValue = other[key];

	          result = undefined;
	          if (customizer) {
	            result = isLoose
	              ? customizer(othValue, objValue, key)
	              : customizer(objValue, othValue, key);
	          }
	          if (result === undefined) {
	            // Recursively compare objects (susceptible to call stack limits).
	            result = (objValue && objValue === othValue) || equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB);
	          }
	        }
	        if (!result) {
	          return false;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (!skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Gets the extremum value of `collection` invoking `iteratee` for each value
	     * in `collection` to generate the criterion by which the value is ranked.
	     * The `iteratee` is invoked with three arguments: (value, index, collection).
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {boolean} [isMin] Specify returning the minimum, instead of the
	     *  maximum, extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function extremumBy(collection, iteratee, isMin) {
	      var exValue = isMin ? POSITIVE_INFINITY : NEGATIVE_INFINITY,
	          computed = exValue,
	          result = computed;

	      baseEach(collection, function(value, index, collection) {
	        var current = iteratee(value, index, collection);
	        if ((isMin ? (current < computed) : (current > computed)) ||
	            (current === exValue && current === result)) {
	          computed = current;
	          result = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * Gets the appropriate "callback" function. If the `_.callback` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseCallback` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getCallback(func, thisArg, argCount) {
	      var result = lodash.callback || callback;
	      result = result === callback ? baseCallback : result;
	      return argCount ? result(func, thisArg, argCount) : result;
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    var getFuncName = (function() {
	      if (!support.funcNames) {
	        return constant('');
	      }
	      if (constant.name == 'constant') {
	        return baseProperty('name');
	      }
	      return function(func) {
	        var result = func.name,
	            array = realNames[result],
	            length = array ? array.length : 0;

	        while (length--) {
	          var data = array[length],
	              otherFunc = data.func;

	          if (otherFunc == null || otherFunc == func) {
	            return data.name;
	          }
	        }
	        return result;
	      };
	    }());

	    /**
	     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseIndexOf` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function|number} Returns the chosen function or its result.
	     */
	    function getIndexOf(collection, target, fromIndex) {
	      var result = lodash.indexOf || indexOf;
	      result = result === indexOf ? baseIndexOf : result;
	      return collection ? result(collection, target, fromIndex) : result;
	    }

	    /**
	     * Gets the "length" property value of `object`.
	     *
	     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	     * in Safari on iOS 8.1 ARM64.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {*} Returns the "length" value.
	     */
	    var getLength = baseProperty('length');

	    /**
	     * Creates an array of the own symbols of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of symbols.
	     */
	    var getSymbols = !getOwnPropertySymbols ? constant([]) : function(object) {
	      return getOwnPropertySymbols(toObject(object));
	    };

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} [transforms] The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms ? transforms.length : 0;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = new array.constructor(length);

	      // Add array properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      var Ctor = object.constructor;
	      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
	        Ctor = Object;
	      }
	      return new Ctor;
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return bufferClone(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          var buffer = object.buffer;
	          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          var result = new Ctor(object.source, reFlags.exec(object));
	          result.lastIndex = object.lastIndex;
	      }
	      return result;
	    }

	    /**
	     * Invokes the method at `path` on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function invokePath(object, path, args) {
	      if (object != null && !isKey(path, object)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        path = last(path);
	      }
	      var func = object == null ? object : object[path];
	      return func == null ? undefined : func.apply(object, args);
	    }

	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      value = +value;
	      length = length == null ? MAX_SAFE_INTEGER : length;
	      return value > -1 && value % 1 == 0 && value < length;
	    }

	    /**
	     * Checks if the provided arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number') {
	        var length = getLength(object),
	            prereq = isLength(length) && isIndex(index, length);
	      } else {
	        prereq = type == 'string' && index in object;
	      }
	      if (prereq) {
	        var other = object[index];
	        return value === value ? (value === other) : (other !== other);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      var type = typeof value;
	      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
	        return true;
	      }
	      if (isArray(value)) {
	        return false;
	      }
	      var result = !reIsDeepProp.test(value);
	      return result || (object != null && value in toObject(object));
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func);
	      return !!funcName && func === lodash[funcName] && funcName in LazyWrapper.prototype;
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This function is based on [`ToLength`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength).
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     */
	    function isLength(value) {
	      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && (value === 0 ? ((1 / value) > 0) : !isObject(value));
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers required to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
	     * augment function arguments, making the order in which they are executed important,
	     * preventing the merging of metadata. However, we make an exception for a safe
	     * common case where curried functions have `_.ary` and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < ARY_FLAG;

	      var isCombo =
	        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
	        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
	        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = arrayCopy(value);
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * A specialized version of `_.pick` that picks `object` properties specified
	     * by `props`.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property names to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByArray(object, props) {
	      object = toObject(object);

	      var index = -1,
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index];
	        if (key in object) {
	          result[key] = object[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.pick` that picks `object` properties `predicate`
	     * returns truthy for.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByCallback(object, predicate) {
	      var result = {};
	      baseForIn(object, function(value, key, object) {
	        if (predicate(value, key, object)) {
	          result[key] = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = arrayCopy(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity function
	     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = (function() {
	      var count = 0,
	          lastCalled = 0;

	      return function(key, value) {
	        var stamp = now(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return key;
	          }
	        } else {
	          count = 0;
	        }
	        return baseSetData(key, value);
	      };
	    }());

	    /**
	     * A fallback implementation of `_.isPlainObject` which checks if `value`
	     * is an object created by the `Object` constructor or has a `[[Prototype]]`
	     * of `null`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     */
	    function shimIsPlainObject(value) {
	      var Ctor,
	          support = lodash.support;

	      // Exit early for non `Object` objects.
	      if (!(isObjectLike(value) && objToString.call(value) == objectTag) ||
	          (!hasOwnProperty.call(value, 'constructor') &&
	            (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
	        return false;
	      }
	      // IE < 9 iterates inherited properties before own properties. If the first
	      // iterated property is an object's own property then there are no inherited
	      // enumerable properties.
	      var result;
	      // In most environments an object's own properties are iterated before
	      // its inherited properties. If the last iterated property is an object's
	      // own property then there are no inherited enumerable properties.
	      baseForIn(value, function(subValue, key) {
	        result = key;
	      });
	      return result === undefined || hasOwnProperty.call(value, result);
	    }

	    /**
	     * A fallback implementation of `Object.keys` which creates an array of the
	     * own enumerable property names of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function shimKeys(object) {
	      var props = keysIn(object),
	          propsLength = props.length,
	          length = propsLength && object.length,
	          support = lodash.support;

	      var allowIndexes = length && isLength(length) &&
	        (isArray(object) || (support.nonEnumArgs && isArguments(object)));

	      var index = -1,
	          result = [];

	      while (++index < propsLength) {
	        var key = props[index];
	        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to an array-like object if it is not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array|Object} Returns the array-like object.
	     */
	    function toIterable(value) {
	      if (value == null) {
	        return [];
	      }
	      if (!isLength(getLength(value))) {
	        return values(value);
	      }
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Converts `value` to an object if it is not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Object} Returns the object.
	     */
	    function toObject(value) {
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Converts `value` to property path array if it is not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array} Returns the property path array.
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return value;
	      }
	      var result = [];
	      baseToString(value).replace(rePropName, function(match, number, quote, string) {
	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      return wrapper instanceof LazyWrapper
	        ? wrapper.clone()
	        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `collection` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new array containing chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if (guard ? isIterateeCall(array, size, guard) : size == null) {
	        size = 1;
	      } else {
	        size = nativeMax(+size || 1, 1);
	      }
	      var index = 0,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = Array(ceil(length / size));

	      while (index < length) {
	        result[++resIndex] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array excluding all values of the provided arrays using
	     * `SameValueZero` for equality comparisons.
	     *
	     * **Note:** [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * comparisons are like strict equality comparisons, e.g. `===`, except that
	     * `NaN` matches `NaN`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The arrays of values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.difference([1, 2, 3], [4, 2]);
	     * // => [1, 3]
	     */
	    var difference = restParam(function(array, values) {
	      return (isArray(array) || isArguments(array))
	        ? baseDifference(array, baseFlatten(values, false, true))
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that match the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [1]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active', false), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8], '*', 1, 2);
	     * // => [4, '*', 8]
	     */
	    function fill(array, value, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(chr) {
	     *   return chr.user == 'barney';
	     * });
	     * // => 0
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findIndex(users, 'active', false);
	     * // => 0
	     *
	     * // using the `_.property` callback shorthand
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    var findIndex = createFindIndex();

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(chr) {
	     *   return chr.user == 'pebbles';
	     * });
	     * // => 2
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastIndex(users, 'active', false);
	     * // => 2
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    var findLastIndex = createFindIndex(true);

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias head
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.first([1, 2, 3]);
	     * // => 1
	     *
	     * _.first([]);
	     * // => undefined
	     */
	    function first(array) {
	      return array ? array[0] : undefined;
	    }

	    /**
	     * Flattens a nested array. If `isDeep` is `true` the array is recursively
	     * flattened, otherwise it is only flattened a single level.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, [4]]
	     *
	     * // using `isDeep`
	     * _.flatten([1, [2, 3, [4]]], true);
	     * // => [1, 2, 3, 4]
	     */
	    function flatten(array, isDeep, guard) {
	      var length = array ? array.length : 0;
	      if (guard && isIterateeCall(array, isDeep, guard)) {
	        isDeep = false;
	      }
	      return length ? baseFlatten(array, isDeep) : [];
	    }

	    /**
	     * Recursively flattens a nested array.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to recursively flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, 4]
	     */
	    function flattenDeep(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, true) : [];
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using `SameValueZero` for equality comparisons. If `fromIndex` is negative,
	     * it is used as the offset from the end of `array`. If `array` is sorted
	     * providing `true` for `fromIndex` performs a faster binary search.
	     *
	     * **Note:** [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * comparisons are like strict equality comparisons, e.g. `===`, except that
	     * `NaN` matches `NaN`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
	     *  to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // using `fromIndex`
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     *
	     * // performing a binary search
	     * _.indexOf([1, 1, 2, 2], 2, true);
	     * // => 2
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      if (typeof fromIndex == 'number') {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
	      } else if (fromIndex) {
	        var index = binaryIndex(array, value),
	            other = array[index];

	        if (value === value ? (value === other) : (other !== other)) {
	          return index;
	        }
	        return -1;
	      }
	      return baseIndexOf(array, value, fromIndex || 0);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      return dropRight(array, 1);
	    }

	    /**
	     * Creates an array of unique values in all provided arrays using `SameValueZero`
	     * for equality comparisons.
	     *
	     * **Note:** [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * comparisons are like strict equality comparisons, e.g. `===`, except that
	     * `NaN` matches `NaN`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of shared values.
	     * @example
	     * _.intersection([1, 2], [4, 2], [2, 1]);
	     * // => [2]
	     */
	    function intersection() {
	      var args = [],
	          argsIndex = -1,
	          argsLength = arguments.length,
	          caches = [],
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          result = [];

	      while (++argsIndex < argsLength) {
	        var value = arguments[argsIndex];
	        if (isArray(value) || isArguments(value)) {
	          args.push(value);
	          caches.push((isCommon && value.length >= 120) ? createCache(argsIndex && value) : null);
	        }
	      }
	      argsLength = args.length;
	      if (argsLength < 2) {
	        return result;
	      }
	      var array = args[0],
	          index = -1,
	          length = array ? array.length : 0,
	          seen = caches[0];

	      outer:
	      while (++index < length) {
	        value = array[index];
	        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
	          argsIndex = argsLength;
	          while (--argsIndex) {
	            var cache = caches[argsIndex];
	            if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value, 0)) < 0) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(value);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array ? array.length : 0;
	      return length ? array[length - 1] : undefined;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
	     *  or `true` to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // using `fromIndex`
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     *
	     * // performing a binary search
	     * _.lastIndexOf([1, 1, 2, 2], 2, true);
	     * // => 3
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (typeof fromIndex == 'number') {
	        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
	      } else if (fromIndex) {
	        index = binaryIndex(array, value, true) - 1;
	        var other = array[index];
	        if (value === value ? (value === other) : (other !== other)) {
	          return index;
	        }
	        return -1;
	      }
	      if (value !== value) {
	        return indexOfNaN(array, index, true);
	      }
	      while (index--) {
	        if (array[index] === value) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Removes all provided values from `array` using `SameValueZero` for equality
	     * comparisons.
	     *
	     * **Notes:**
	     *  - Unlike `_.without`, this method mutates `array`
	     *  - [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     *    comparisons are like strict equality comparisons, e.g. `===`, except
	     *    that `NaN` matches `NaN`
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pull(array, 2, 3);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    function pull() {
	      var args = arguments,
	          array = args[0];

	      if (!(array && array.length)) {
	        return array;
	      }
	      var index = 0,
	          indexOf = getIndexOf(),
	          length = args.length;

	      while (++index < length) {
	        var fromIndex = 0,
	            value = args[index];

	        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * Removes elements from `array` corresponding to the given indexes and returns
	     * an array of the removed elements. Indexes may be specified as an array of
	     * indexes or as individual arguments.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [5, 10, 15, 20];
	     * var evens = _.pullAt(array, 1, 3);
	     *
	     * console.log(array);
	     * // => [5, 15]
	     *
	     * console.log(evens);
	     * // => [10, 20]
	     */
	    var pullAt = restParam(function(array, indexes) {
	      array || (array = []);
	      indexes = baseFlatten(indexes);

	      var result = baseAt(array, indexes);
	      basePullAt(array, indexes.sort(baseCompareAscending));
	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate, thisArg) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getCallback(predicate, thisArg, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias tail
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.rest([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function rest(array) {
	      return drop(array, 1);
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of `Array#slice` to support node
	     * lists in IE < 9 and to ensure dense arrays are returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value` should
	     * be inserted into `array` in order to maintain its sort order. If an iteratee
	     * function is provided it is invoked for `value` and each element of `array`
	     * to compute their sort ranking. The iteratee is bound to `thisArg` and
	     * invoked with one argument; (value).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     *
	     * _.sortedIndex([4, 4, 5, 5], 5);
	     * // => 2
	     *
	     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
	     *
	     * // using an iteratee function
	     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
	     *   return this.data[word];
	     * }, dict);
	     * // => 1
	     *
	     * // using the `_.property` callback shorthand
	     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
	     * // => 1
	     */
	    var sortedIndex = createSortedIndex();

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 4, 5, 5], 5);
	     * // => 4
	     */
	    var sortedLastIndex = createSortedIndex(true);

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
	     * and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [2, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [1, 2]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false},
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active', false), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, of the provided arrays using
	     * `SameValueZero` for equality comparisons.
	     *
	     * **Note:** [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * comparisons are like strict equality comparisons, e.g. `===`, except that
	     * `NaN` matches `NaN`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([1, 2], [4, 2], [2, 1]);
	     * // => [1, 2, 4]
	     */
	    var union = restParam(function(arrays) {
	      return baseUniq(baseFlatten(arrays, false, true));
	    });

	    /**
	     * Creates a duplicate-free version of an array, using `SameValueZero` for
	     * equality comparisons, in which only the first occurence of each element
	     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
	     * for sorted arrays. If an iteratee function is provided it is invoked for
	     * each element in the array to generate the criterion by which uniqueness
	     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, array).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * **Note:** [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * comparisons are like strict equality comparisons, e.g. `===`, except that
	     * `NaN` matches `NaN`.
	     *
	     * @static
	     * @memberOf _
	     * @alias unique
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {boolean} [isSorted] Specify the array is sorted.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     *
	     * // using `isSorted`
	     * _.uniq([1, 1, 2], true);
	     * // => [1, 2]
	     *
	     * // using an iteratee function
	     * _.uniq([1, 2.5, 1.5, 2], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => [1, 2.5]
	     *
	     * // using the `_.property` callback shorthand
	     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniq(array, isSorted, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (isSorted != null && typeof isSorted != 'boolean') {
	        thisArg = iteratee;
	        iteratee = isIterateeCall(array, isSorted, thisArg) ? null : isSorted;
	        isSorted = false;
	      }
	      var func = getCallback();
	      if (!(func === baseCallback && iteratee == null)) {
	        iteratee = func(iteratee, thisArg, 3);
	      }
	      return (isSorted && getIndexOf() == baseIndexOf)
	        ? sortedUniq(array, iteratee)
	        : baseUniq(array, iteratee);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-`_.zip`
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['fred', 'barney'], [30, 40], [true, false]]
	     */
	    function unzip(array) {
	      var index = -1,
	          length = (array && array.length && arrayMax(arrayMap(array, getLength))) >>> 0,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = arrayMap(array, baseProperty(index));
	      }
	      return result;
	    }

	    /**
	     * Creates an array excluding all provided values using `SameValueZero` for
	     * equality comparisons.
	     *
	     * **Note:** [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * comparisons are like strict equality comparisons, e.g. `===`, except that
	     * `NaN` matches `NaN`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to filter.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.without([1, 2, 1, 3], 1, 2);
	     * // => [3]
	     */
	    var without = restParam(function(array, values) {
	      return (isArray(array) || isArguments(array))
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the provided arrays.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * _.xor([1, 2], [4, 2]);
	     * // => [1, 4]
	     */
	    function xor() {
	      var index = -1,
	          length = arguments.length;

	      while (++index < length) {
	        var array = arguments[index];
	        if (isArray(array) || isArguments(array)) {
	          var result = result
	            ? baseDifference(result, array).concat(baseDifference(array, result))
	            : array;
	        }
	      }
	      return result ? baseUniq(result) : [];
	    }

	    /**
	     * Creates an array of grouped elements, the first of which contains the first
	     * elements of the given arrays, the second of which contains the second elements
	     * of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     */
	    var zip = restParam(unzip);

	    /**
	     * The inverse of `_.pairs`; this method returns an object composed from arrays
	     * of property names and values. Provide either a single two dimensional array,
	     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
	     * and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @alias object
	     * @category Array
	     * @param {Array} props The property names.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject([['fred', 30], ['barney', 40]]);
	     * // => { 'fred': 30, 'barney': 40 }
	     *
	     * _.zipObject(['fred', 'barney'], [30, 40]);
	     * // => { 'fred': 30, 'barney': 40 }
	     */
	    function zipObject(props, values) {
	      var index = -1,
	          length = props ? props.length : 0,
	          result = {};

	      if (length && !values && !isArray(props[0])) {
	        values = [];
	      }
	      while (++index < length) {
	        var key = props[index];
	        if (values) {
	          result[key] = values[index];
	        } else if (key) {
	          result[key[0]] = key[1];
	        }
	      }
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object that wraps `value` with explicit method
	     * chaining enabled.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _.chain(users)
	     *   .sortBy('age')
	     *   .map(function(chr) {
	     *     return chr.user + ' is ' + chr.age;
	     *   })
	     *   .first()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor is
	     * bound to `thisArg` and invoked with one argument; (value). The purpose of
	     * this method is to "tap into" a method chain in order to perform operations
	     * on intermediate results within the chain.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor, thisArg) {
	      interceptor.call(thisArg, value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor, thisArg) {
	      return interceptor.call(thisArg, value);
	    }

	    /**
	     * Enables explicit method chaining on the wrapper object.
	     *
	     * @name chain
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // without explicit chaining
	     * _(users).first();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // with explicit chaining
	     * _(users).chain()
	     *   .first()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chained sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapper = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapper = wrapper.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapper.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Creates a clone of the chained sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapper = _(array).map(function(value) {
	     *   return Math.pow(value, 2);
	     * });
	     *
	     * var other = [3, 4];
	     * var otherWrapper = wrapper.plant(other);
	     *
	     * otherWrapper.value();
	     * // => [9, 16]
	     *
	     * wrapper.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * Reverses the wrapped array so the first element becomes the last, the
	     * second element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	      if (value instanceof LazyWrapper) {
	        if (this.__actions__.length) {
	          value = new LazyWrapper(this);
	        }
	        return new LodashWrapper(value.reverse(), this.__chain__);
	      }
	      return this.thru(function(value) {
	        return value.reverse();
	      });
	    }

	    /**
	     * Produces the result of coercing the unwrapped value to a string.
	     *
	     * @name toString
	     * @memberOf _
	     * @category Chain
	     * @returns {string} Returns the coerced string value.
	     * @example
	     *
	     * _([1, 2, 3]).toString();
	     * // => '1,2,3'
	     */
	    function wrapperToString() {
	      return (this.value() + '');
	    }

	    /**
	     * Executes the chained sequence to extract the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @alias run, toJSON, valueOf
	     * @category Chain
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements corresponding to the given keys, or indexes,
	     * of `collection`. Keys may be specified as individual arguments or as arrays
	     * of keys.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(number|number[]|string|string[])} [props] The property names
	     *  or indexes of elements to pick, specified individually or in arrays.
	     * @returns {Array} Returns the new array of picked elements.
	     * @example
	     *
	     * _.at(['a', 'b', 'c'], [0, 2]);
	     * // => ['a', 'c']
	     *
	     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
	     * // => ['barney', 'pebbles']
	     */
	    var at = restParam(function(collection, props) {
	      var length = collection ? getLength(collection) : 0;
	      if (isLength(length)) {
	        collection = toIterable(collection);
	      }
	      return baseAt(collection, baseFlatten(props));
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the number of times the key was returned by `iteratee`.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * The predicate is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias all
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': false },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.every(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = null;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias select
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.filter([4, 5, 6], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 6]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.filter(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.filter(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function filter(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias detect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.result(_.find(users, function(chr) {
	     *   return chr.age < 40;
	     * }), 'user');
	     * // => 'barney'
	     *
	     * // using the `_.matches` callback shorthand
	     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.result(_.find(users, 'active', false), 'user');
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.result(_.find(users, 'active'), 'user');
	     * // => 'barney'
	     */
	    var find = createFind(baseEach);

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(baseEachRight, true);

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning the first element that has equivalent property
	     * values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
	     * // => 'barney'
	     *
	     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
	     * // => 'fred'
	     */
	    function findWhere(collection, source) {
	      return find(collection, baseMatches(source));
	    }

	    /**
	     * Iterates over elements of `collection` invoking `iteratee` for each element.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection). Iteratee functions may exit iteration early
	     * by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length" property
	     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
	     * may be used for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @alias each
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEach(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from left to right and returns the array
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
	     *   console.log(n, key);
	     * });
	     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
	     */
	    var forEach = createForEach(arrayEach, baseEach);

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEachRight(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from right to left and returns the array
	     */
	    var forEachRight = createForEach(arrayEachRight, baseEachRight);

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is an array of the elements responsible for generating the key.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * // using the `_.property` callback shorthand
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        result[key] = [value];
	      }
	    });

	    /**
	     * Checks if `value` is in `collection` using `SameValueZero` for equality
	     * comparisons. If `fromIndex` is negative, it is used as the offset from
	     * the end of `collection`.
	     *
	     * **Note:** [`SameValueZero`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
	     * comparisons are like strict equality comparisons, e.g. `===`, except that
	     * `NaN` matches `NaN`.
	     *
	     * @static
	     * @memberOf _
	     * @alias contains, include
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {*} target The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	     * // => true
	     *
	     * _.includes('pebbles', 'eb');
	     * // => true
	     */
	    function includes(collection, target, fromIndex, guard) {
	      var length = collection ? getLength(collection) : 0;
	      if (!isLength(length)) {
	        collection = values(collection);
	        length = collection.length;
	      }
	      if (!length) {
	        return false;
	      }
	      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
	        fromIndex = 0;
	      } else {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
	      }
	      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
	        ? (fromIndex < length && collection.indexOf(target, fromIndex) > -1)
	        : (getIndexOf(collection, target, fromIndex) > -1);
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the last element responsible for generating the key. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var keyData = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.indexBy(keyData, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return String.fromCharCode(object.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return this.fromCharCode(object.code);
	     * }, String);
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     */
	    var indexBy = createAggregator(function(result, value, key) {
	      result[key] = value;
	    });

	    /**
	     * Invokes the method at `path` on each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `methodName` is a function it is
	     * invoked for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invoke([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invoke = restParam(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          isProp = isKey(path),
	          length = getLength(collection),
	          result = isLength(length) ? Array(length) : [];

	      baseEach(collection, function(value) {
	        var func = isFunc ? path : (isProp && value != null && value[path]);
	        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an array of values by running each element in `collection` through
	     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * Many lodash methods are guarded to work as interatees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`, `drop`,
	     * `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`, `parseInt`,
	     * `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`, `trimLeft`,
	     * `trimRight`, `trunc`, `random`, `range`, `sample`, `some`, `uniq`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @alias collect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function timesThree(n) {
	     *   return n * 3;
	     * }
	     *
	     * _.map([1, 2], timesThree);
	     * // => [3, 6]
	     *
	     * _.map({ 'a': 1, 'b': 2 }, timesThree);
	     * // => [3, 6] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee, thisArg) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return func(collection, iteratee);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, while the second of which
	     * contains elements `predicate` returns falsey for. The predicate is bound
	     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * _.partition([1, 2, 3], function(n) {
	     *   return n % 2;
	     * });
	     * // => [[1, 3], [2]]
	     *
	     * _.partition([1.2, 2.3, 3.4], function(n) {
	     *   return this.floor(n) % 2;
	     * }, Math);
	     * // => [[1.2, 3.4], [2.3]]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * var mapper = function(array) {
	     *   return _.pluck(array, 'user');
	     * };
	     *
	     * // using the `_.matches` callback shorthand
	     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
	     * // => [['pebbles'], ['barney', 'fred']]
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.map(_.partition(users, 'active', false), mapper);
	     * // => [['barney', 'pebbles'], ['fred']]
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(_.partition(users, 'active'), mapper);
	     * // => [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Gets the property value of `path` from all elements in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|string} path The path of the property to pluck.
	     * @returns {Array} Returns the property values.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.pluck(users, 'user');
	     * // => ['barney', 'fred']
	     *
	     * var userIndex = _.indexBy(users, 'user');
	     * _.pluck(userIndex, 'age');
	     * // => [36, 40] (iteration order is not guaranteed)
	     */
	    function pluck(collection, path) {
	      return map(collection, property(path));
	    }

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` through `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not provided the first element of `collection` is used as the initial
	     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as interatees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `includes`, `merge`, `sortByAll`, and `sortByOrder`
	     *
	     * @static
	     * @memberOf _
	     * @alias foldl, inject
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.reduce([1, 2], function(total, n) {
	     *   return total + n;
	     * });
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     *   return result;
	     * }, {});
	     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
	     */
	    var reduce = createReduce(arrayReduce, baseEach);

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias foldr
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    var reduceRight =  createReduce(arrayReduceRight, baseEachRight);

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.reject([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [1, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.reject(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.reject(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function reject(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, function(value, index, collection) {
	        return !predicate(value, index, collection);
	      });
	    }

	    /**
	     * Gets a random element or `n` random elements from a collection.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to sample.
	     * @param {number} [n] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {*} Returns the random sample(s).
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     *
	     * _.sample([1, 2, 3, 4], 2);
	     * // => [3, 1]
	     */
	    function sample(collection, n, guard) {
	      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
	        collection = toIterable(collection);
	        var length = collection.length;
	        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
	      }
	      var result = shuffle(collection);
	      result.length = nativeMin(n < 0 ? 0 : (+n || 0), result.length);
	      return result;
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      collection = toIterable(collection);

	      var index = -1,
	          length = collection.length,
	          result = Array(length);

	      while (++index < length) {
	        var rand = baseRandom(0, index);
	        if (index != rand) {
	          result[index] = result[rand];
	        }
	        result[rand] = collection[index];
	      }
	      return result;
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the size of `collection`.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      var length = collection ? getLength(collection) : 0;
	      return isLength(length) ? length : keys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * The function returns as soon as it finds a passing value and does not iterate
	     * over the entire collection. The predicate is bound to `thisArg` and invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias any
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.some(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = null;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection through `iteratee`. This method performs
	     * a stable sort, that is, it preserves the original sort order of equal elements.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return Math.sin(n);
	     * });
	     * // => [3, 1, 2]
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return this.sin(n);
	     * }, Math);
	     * // => [3, 1, 2]
	     *
	     * var users = [
	     *   { 'user': 'fred' },
	     *   { 'user': 'pebbles' },
	     *   { 'user': 'barney' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.sortBy(users, 'user'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function sortBy(collection, iteratee, thisArg) {
	      if (collection == null) {
	        return [];
	      }
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = null;
	      }
	      var index = -1;
	      iteratee = getCallback(iteratee, thisArg, 3);

	      var result = baseMap(collection, function(value, key, collection) {
	        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
	      });
	      return baseSortBy(result, compareAscending);
	    }

	    /**
	     * This method is like `_.sortBy` except that it can sort by multiple iteratees
	     * or property names.
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
	     *  The iteratees to sort by, specified as individual values or arrays of values.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
	     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
	     *
	     * _.map(_.sortByAll(users, 'user', function(chr) {
	     *   return Math.floor(chr.age / 10);
	     * }), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    var sortByAll = restParam(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var guard = iteratees[2];
	      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
	        iteratees.length = 1;
	      }
	      return baseSortByOrder(collection, baseFlatten(iteratees), []);
	    });

	    /**
	     * This method is like `_.sortByAll` except that it allows specifying the
	     * sort orders of the iteratees to sort by. A truthy value in `orders` will
	     * sort the corresponding property name in ascending order while a falsey
	     * value will sort it in descending order.
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} orders The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // sort by `user` in ascending order and by `age` in descending order
	     * _.map(_.sortByOrder(users, ['user', 'age'], [true, false]), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    function sortByOrder(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (guard && isIterateeCall(iteratees, orders, guard)) {
	        orders = null;
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseSortByOrder(collection, iteratees, orders);
	    }

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning an array of all elements that have equivalent
	     * property values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
	     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
	     * ];
	     *
	     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
	     * // => ['fred']
	     */
	    function where(collection, source) {
	      return filter(collection, baseMatches(source));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the number of milliseconds that have elapsed since the Unix epoch
	     * (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @category Date
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => logs the number of milliseconds it took for the deferred function to be invoked
	     */
	    var now = nativeNow || function() {
	      return new Date().getTime();
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it is called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => logs 'done saving!' after the two async saves have completed
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      n = nativeIsFinite(n = +n) ? n : 0;
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that accepts up to `n` arguments ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      if (guard && isIterateeCall(func, n, guard)) {
	        n = null;
	      }
	      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
	      return createWrapper(func, ARY_FLAG, null, null, null, null, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it is called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery('#add').on('click', _.before(5, addContactToList));
	     * // => allows adding up to 4 contacts to the list
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = null;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and prepends any additional `_.bind` arguments to those provided to the
	     * bound function.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind` this method does not set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var greet = function(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * };
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // using placeholders
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = restParam(function(func, thisArg, partials) {
	      var bitmask = BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bind.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method. Method names may be specified as individual arguments or as arrays
	     * of method names. If no method names are provided all enumerable function
	     * properties, own and inherited, of `object` are bound.
	     *
	     * **Note:** This method does not set the "length" property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} [methodNames] The object method names to bind,
	     *  specified as individual method names or arrays of method names.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'onClick': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view);
	     * jQuery('#docs').on('click', view.onClick);
	     * // => logs 'clicked docs' when the element is clicked
	     */
	    var bindAll = restParam(function(object, methodNames) {
	      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

	      var index = -1,
	          length = methodNames.length;

	      while (++index < length) {
	        var key = methodNames[index];
	        object[key] = createWrapper(object[key], BIND_FLAG, object);
	      }
	      return object;
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` and prepends
	     * any additional `_.bindKey` arguments to those provided to the bound function.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist.
	     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object the method belongs to.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // using placeholders
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = restParam(function(object, key, partials) {
	      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bindKey.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts one or more arguments of `func` that when
	     * called either invokes `func` returning its result, if all `func` arguments
	     * have been provided, or returns a function that accepts one or more of the
	     * remaining `func` arguments, and so on. The arity of `func` may be specified
	     * if `func.length` is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    var curry = createCurry(CURRY_FLAG);

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    var curryRight = createCurry(CURRY_RIGHT_FLAG);

	    /**
	     * Creates a function that delays invoking `func` until after `wait` milliseconds
	     * have elapsed since the last time it was invoked. The created function comes
	     * with a `cancel` method to cancel delayed invocations. Provide an options
	     * object to indicate that `func` should be invoked on the leading and/or
	     * trailing edge of the `wait` timeout. Subsequent calls to the debounced
	     * function return the result of the last `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the debounced function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=false] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
	     *  delayed before it is invoked.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // avoid costly calculations while the window size is in flux
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
	     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // ensure `batchLog` is invoked once after 1 second of debounced calls
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', _.debounce(batchLog, 250, {
	     *   'maxWait': 1000
	     * }));
	     *
	     * // cancel a debounced call
	     * var todoChanges = _.debounce(batchLog, 1000);
	     * Object.observe(models.todo, todoChanges);
	     *
	     * Object.observe(models, function(changes) {
	     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
	     *     todoChanges.cancel();
	     *   }
	     * }, ['delete']);
	     *
	     * // ...at some point `models.todo` is changed
	     * models.todo.completed = true;
	     *
	     * // ...before 1 second has passed `models.todo` is deleted
	     * // which cancels the debounced `todoChanges` call
	     * delete models.todo;
	     */
	    function debounce(func, wait, options) {
	      var args,
	          maxTimeoutId,
	          result,
	          stamp,
	          thisArg,
	          timeoutId,
	          trailingCall,
	          lastCalled = 0,
	          maxWait = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = wait < 0 ? 0 : (+wait || 0);
	      if (options === true) {
	        var leading = true;
	        trailing = false;
	      } else if (isObject(options)) {
	        leading = options.leading;
	        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
	        trailing = 'trailing' in options ? options.trailing : trailing;
	      }

	      function cancel() {
	        if (timeoutId) {
	          clearTimeout(timeoutId);
	        }
	        if (maxTimeoutId) {
	          clearTimeout(maxTimeoutId);
	        }
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	      }

	      function delayed() {
	        var remaining = wait - (now() - stamp);
	        if (remaining <= 0 || remaining > wait) {
	          if (maxTimeoutId) {
	            clearTimeout(maxTimeoutId);
	          }
	          var isCalled = trailingCall;
	          maxTimeoutId = timeoutId = trailingCall = undefined;
	          if (isCalled) {
	            lastCalled = now();
	            result = func.apply(thisArg, args);
	            if (!timeoutId && !maxTimeoutId) {
	              args = thisArg = null;
	            }
	          }
	        } else {
	          timeoutId = setTimeout(delayed, remaining);
	        }
	      }

	      function maxDelayed() {
	        if (timeoutId) {
	          clearTimeout(timeoutId);
	        }
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	        if (trailing || (maxWait !== wait)) {
	          lastCalled = now();
	          result = func.apply(thisArg, args);
	          if (!timeoutId && !maxTimeoutId) {
	            args = thisArg = null;
	          }
	        }
	      }

	      function debounced() {
	        args = arguments;
	        stamp = now();
	        thisArg = this;
	        trailingCall = trailing && (timeoutId || !leading);

	        if (maxWait === false) {
	          var leadingCall = leading && !timeoutId;
	        } else {
	          if (!maxTimeoutId && !leading) {
	            lastCalled = stamp;
	          }
	          var remaining = maxWait - (stamp - lastCalled),
	              isCalled = remaining <= 0 || remaining > maxWait;

	          if (isCalled) {
	            if (maxTimeoutId) {
	              maxTimeoutId = clearTimeout(maxTimeoutId);
	            }
	            lastCalled = stamp;
	            result = func.apply(thisArg, args);
	          }
	          else if (!maxTimeoutId) {
	            maxTimeoutId = setTimeout(maxDelayed, remaining);
	          }
	        }
	        if (isCalled && timeoutId) {
	          timeoutId = clearTimeout(timeoutId);
	        }
	        else if (!timeoutId && wait !== maxWait) {
	          timeoutId = setTimeout(delayed, wait);
	        }
	        if (leadingCall) {
	          isCalled = true;
	          result = func.apply(thisArg, args);
	        }
	        if (isCalled && !timeoutId && !maxTimeoutId) {
	          args = thisArg = null;
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // logs 'deferred' after one or more milliseconds
	     */
	    var defer = restParam(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => logs 'later' after one second
	     */
	    var delay = restParam(function(func, wait, args) {
	      return baseDelay(func, wait, args);
	    });

	    /**
	     * Creates a function that returns the result of invoking the provided
	     * functions with the `this` binding of the created function, where each
	     * successive invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow(_.add, square);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the provided functions from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias backflow, compose
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight(square, _.add);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is coerced to a string and used as the
	     * cache key. The `func` is invoked with the `this` binding of the memoized
	     * function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the [`Map`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-properties-of-the-map-prototype-object)
	     * method interface of `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoizing function.
	     * @example
	     *
	     * var upperCase = _.memoize(function(string) {
	     *   return string.toUpperCase();
	     * });
	     *
	     * upperCase('fred');
	     * // => 'FRED'
	     *
	     * // modifying the result cache
	     * upperCase.cache.set('fred', 'BARNEY');
	     * upperCase('fred');
	     * // => 'BARNEY'
	     *
	     * // replacing `_.memoize.Cache`
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'barney' };
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'fred' }
	     *
	     * _.memoize.Cache = WeakMap;
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'barney' }
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            cache = memoized.cache,
	            key = resolver ? resolver.apply(this, args) : args[0];

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        cache.set(key, result);
	        return result;
	      };
	      memoized.cache = new memoize.Cache;
	      return memoized;
	    }

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        return !predicate.apply(this, arguments);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first call. The `func` is invoked
	     * with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // `initialize` invokes `createApplication` once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with `partial` arguments prepended
	     * to those provided to the new function. This method is like `_.bind` except
	     * it does **not** alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // using placeholders
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = createPartial(PARTIAL_FLAG);

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to those provided to the new function.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // using placeholders
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified indexes where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, 2, 0, 1);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     *
	     * var map = _.rearg(_.map, [1, 0]);
	     * map(function(n) {
	     *   return n * 3;
	     * }, [1, 2, 3]);
	     * // => [3, 6, 9]
	     */
	    var rearg = restParam(function(func, indexes) {
	      return createWrapper(func, REARG_FLAG, null, null, null, baseFlatten(indexes));
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as an array.
	     *
	     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.restParam(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function restParam(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            rest = Array(length);

	        while (++index < length) {
	          rest[index] = args[start + index];
	        }
	        switch (start) {
	          case 0: return func.call(this, rest);
	          case 1: return func.call(this, args[0], rest);
	          case 2: return func.call(this, args[0], args[1], rest);
	        }
	        var otherArgs = Array(start + 1);
	        index = -1;
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = rest;
	        return func.apply(this, otherArgs);
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the created
	     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
	     *
	     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * // with a Promise
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function(array) {
	        return func.apply(this, array);
	      };
	    }

	    /**
	     * Creates a function that only invokes `func` at most once per every `wait`
	     * milliseconds. The created function comes with a `cancel` method to cancel
	     * delayed invocations. Provide an options object to indicate that `func`
	     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
	     * Subsequent calls to the throttled function return the result of the last
	     * `func` call.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the throttled function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=true] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // avoid excessively updating the position while scrolling
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
	     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
	     *   'trailing': false
	     * }));
	     *
	     * // cancel a trailing throttled call
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (options === false) {
	        leading = false;
	      } else if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      debounceOptions.leading = leading;
	      debounceOptions.maxWait = +wait;
	      debounceOptions.trailing = trailing;
	      return debounce(func, wait, debounceOptions);
	    }

	    /**
	     * Creates a function that provides `value` to the wrapper function as its
	     * first argument. Any additional arguments provided to the function are
	     * appended to those provided to the wrapper function. The wrapper is invoked
	     * with the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} wrapper The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      wrapper = wrapper == null ? identity : wrapper;
	      return createWrapper(wrapper, PARTIAL_FLAG, null, [value], []);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
	     * otherwise they are assigned by reference. If `customizer` is provided it is
	     * invoked to produce the cloned values. If `customizer` returns `undefined`
	     * cloning is handled by the method instead. The `customizer` is bound to
	     * `thisArg` and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var shallow = _.clone(users);
	     * shallow[0] === users[0];
	     * // => true
	     *
	     * var deep = _.clone(users, true);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.clone(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 0
	     */
	    function clone(value, isDeep, customizer, thisArg) {
	      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
	        isDeep = false;
	      }
	      else if (typeof isDeep == 'function') {
	        thisArg = customizer;
	        customizer = isDeep;
	        isDeep = false;
	      }
	      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 1);
	      return baseClone(value, isDeep, customizer);
	    }

	    /**
	     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
	     * to produce the cloned values. If `customizer` returns `undefined` cloning
	     * is handled by the method instead. The `customizer` is bound to `thisArg`
	     * and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the deep cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var deep = _.cloneDeep(users);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.cloneDeep(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 20
	     */
	    function cloneDeep(value, customizer, thisArg) {
	      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 1);
	      return baseClone(value, true, customizer);
	    }

	    /**
	     * Checks if `value` is classified as an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    function isArguments(value) {
	      var length = isObjectLike(value) ? value.length : undefined;
	      return isLength(length) && objToString.call(value) == argsTag;
	    }

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(function() { return arguments; }());
	     * // => false
	     */
	    var isArray = nativeIsArray || function(value) {
	      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	    };

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    function isDate(value) {
	      return isObjectLike(value) && objToString.call(value) == dateTag;
	    }

	    /**
	     * Checks if `value` is a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return !!value && value.nodeType === 1 && isObjectLike(value) &&
	        (objToString.call(value).indexOf('Element') > -1);
	    }
	    // Fallback for environments without DOM support.
	    if (!support.dom) {
	      isElement = function(value) {
	        return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
	      };
	    }

	    /**
	     * Checks if `value` is empty. A value is considered empty unless it is an
	     * `arguments` object, array, string, or jQuery-like collection with a length
	     * greater than `0` or an object with own enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Array|Object|string} value The value to inspect.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      var length = getLength(value);
	      if (isLength(length) && (isArray(value) || isString(value) || isArguments(value) ||
	          (isObjectLike(value) && isFunction(value.splice)))) {
	        return !length;
	      }
	      return !keys(value).length;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent. If `customizer` is provided it is invoked to compare values.
	     * If `customizer` returns `undefined` comparisons are handled by the method
	     * instead. The `customizer` is bound to `thisArg` and invoked with three
	     * arguments: (value, other [, index|key]).
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. Functions and DOM nodes
	     * are **not** supported. Provide a customizer function to extend support
	     * for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * object == other;
	     * // => false
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * // using a customizer callback
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqual(array, other, function(value, other) {
	     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
	     *     return true;
	     *   }
	     * });
	     * // => true
	     */
	    function isEqual(value, other, customizer, thisArg) {
	      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 3);
	      if (!customizer && isStrictComparable(value) && isStrictComparable(other)) {
	        return value === other;
	      }
	      var result = customizer ? customizer(value, other) : undefined;
	      return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on [`Number.isFinite`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isfinite).
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(10);
	     * // => true
	     *
	     * _.isFinite('10');
	     * // => false
	     *
	     * _.isFinite(true);
	     * // => false
	     *
	     * _.isFinite(Object(10));
	     * // => false
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     */
	    var isFinite = nativeNumIsFinite || function(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    };

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    var isFunction = !(baseIsFunction(/x/) || (Uint8Array && !baseIsFunction(Uint8Array))) ? baseIsFunction : function(value) {
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in older versions of Chrome and Safari which return 'function' for regexes
	      // and Safari 8 equivalents which return 'object' for typed array constructors.
	      return objToString.call(value) == funcTag;
	    };

	    /**
	     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(1);
	     * // => false
	     */
	    function isObject(value) {
	      // Avoid a V8 JIT bug in Chrome 19-20.
	      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	      var type = typeof value;
	      return type == 'function' || (!!value && type == 'object');
	    }

	    /**
	     * Performs a deep comparison between `object` and `source` to determine if
	     * `object` contains equivalent property values. If `customizer` is provided
	     * it is invoked to compare values. If `customizer` returns `undefined`
	     * comparisons are handled by the method instead. The `customizer` is bound
	     * to `thisArg` and invoked with three arguments: (value, other, index|key).
	     *
	     * **Note:** This method supports comparing properties of arrays, booleans,
	     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
	     * and DOM nodes are **not** supported. Provide a customizer function to extend
	     * support for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.isMatch(object, { 'age': 40 });
	     * // => true
	     *
	     * _.isMatch(object, { 'age': 36 });
	     * // => false
	     *
	     * // using a customizer callback
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatch(object, source, function(value, other) {
	     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
	     * });
	     * // => true
	     */
	    function isMatch(object, source, customizer, thisArg) {
	      var props = keys(source),
	          length = props.length;

	      if (!length) {
	        return true;
	      }
	      if (object == null) {
	        return false;
	      }
	      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 3);
	      object = toObject(object);
	      if (!customizer && length == 1) {
	        var key = props[0],
	            value = source[key];

	        if (isStrictComparable(value)) {
	          return value === object[key] && (value !== undefined || (key in object));
	        }
	      }
	      var values = Array(length),
	          strictCompareFlags = Array(length);

	      while (length--) {
	        value = values[length] = source[props[length]];
	        strictCompareFlags[length] = isStrictComparable(value);
	      }
	      return baseIsMatch(object, props, values, strictCompareFlags, customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
	     * which returns `true` for `undefined` and other non-numeric values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a native function.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (value == null) {
	        return false;
	      }
	      if (objToString.call(value) == funcTag) {
	        return reIsNative.test(fnToString.call(value));
	      }
	      return isObjectLike(value) && reIsHostCtor.test(value);
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
	     * as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isNumber(8.4);
	     * // => true
	     *
	     * _.isNumber(NaN);
	     * // => true
	     *
	     * _.isNumber('8.4');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * **Note:** This method assumes objects created by the `Object` constructor
	     * have no inherited enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {
	      if (!(value && objToString.call(value) == objectTag)) {
	        return false;
	      }
	      var valueOf = value.valueOf,
	          objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);

	      return objProto
	        ? (value == objProto || getPrototypeOf(value) == objProto)
	        : shimIsPlainObject(value);
	    };

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    function isRegExp(value) {
	      return (isObjectLike(value) && objToString.call(value) == regexpTag) || false;
	    }

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    function isTypedArray(value) {
	      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
	    }

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * (function() {
	     *   return _.toArray(arguments).slice(1);
	     * }(1, 2, 3));
	     * // => [2, 3]
	     */
	    function toArray(value) {
	      var length = value ? getLength(value) : 0;
	      if (!isLength(length)) {
	        return values(value);
	      }
	      if (!length) {
	        return [];
	      }
	      return arrayCopy(value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable
	     * properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return baseCopy(value, keysIn(value));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object. Subsequent sources overwrite property assignments of previous sources.
	     * If `customizer` is provided it is invoked to produce the assigned values.
	     * The `customizer` is bound to `thisArg` and invoked with five arguments:
	     * (objectValue, sourceValue, key, object, source).
	     *
	     * **Note:** This method mutates `object` and is based on
	     * [`Object.assign`](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign).
	     *
	     *
	     * @static
	     * @memberOf _
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using a customizer callback
	     * var defaults = _.partialRight(_.assign, function(value, other) {
	     *   return _.isUndefined(value) ? other : value;
	     * });
	     *
	     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var assign = createAssigner(function(object, source, customizer) {
	      return customizer
	        ? assignWith(object, source, customizer)
	        : baseAssign(object, source);
	    });

	    /**
	     * Creates an object that inherits from the given `prototype` object. If a
	     * `properties` object is provided its own enumerable properties are assigned
	     * to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties, guard) {
	      var result = baseCreate(prototype);
	      if (guard && isIterateeCall(prototype, properties, guard)) {
	        properties = null;
	      }
	      return properties ? baseAssign(result, properties) : result;
	    }

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object for all destination properties that resolve to `undefined`. Once a
	     * property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var defaults = restParam(function(args) {
	      var object = args[0];
	      if (object == null) {
	        return object;
	      }
	      args.push(assignDefaults);
	      return assign.apply(undefined, args);
	    });

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    var findKey = createFindKey(baseForOwn);

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => returns `pebbles` assuming `_.findKey` returns `barney`
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    var findLastKey = createFindKey(baseForOwnRight);

	    /**
	     * Iterates over own and inherited enumerable properties of an object invoking
	     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
	     */
	    var forIn = createForIn(baseFor);

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
	     */
	    var forInRight = createForIn(baseForRight);

	    /**
	     * Iterates over own enumerable properties of an object invoking `iteratee`
	     * for each property. The `iteratee` is bound to `thisArg` and invoked with
	     * three arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a' and 'b' (iteration order is not guaranteed)
	     */
	    var forOwn = createForOwn(baseForOwn);

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
	     */
	    var forOwnRight = createForOwn(baseForOwnRight);

	    /**
	     * Creates an array of function property names from all enumerable properties,
	     * own and inherited, of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @alias methods
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of property names.
	     * @example
	     *
	     * _.functions(_);
	     * // => ['after', 'ary', 'assign', ...]
	     */
	    function functions(object) {
	      return baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the property value of `path` on `object`. If the resolved value is
	     * `undefined` the `defaultValue` is used in its place.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
	      return result === undefined ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': { 'c': 3 } } };
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b.c');
	     * // => true
	     *
	     * _.has(object, ['a', 'b', 'c']);
	     * // => true
	     */
	    function has(object, path) {
	      if (object == null) {
	        return false;
	      }
	      var result = hasOwnProperty.call(object, path);
	      if (!result && !isKey(path)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        path = last(path);
	        result = object != null && hasOwnProperty.call(object, path);
	      }
	      return result;
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite property
	     * assignments of previous values unless `multiValue` is `true`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {boolean} [multiValue] Allow multiple values per key.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     *
	     * // with `multiValue`
	     * _.invert(object, true);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function invert(object, multiValue, guard) {
	      if (guard && isIterateeCall(object, multiValue, guard)) {
	        multiValue = null;
	      }
	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index],
	            value = object[key];

	        if (multiValue) {
	          if (hasOwnProperty.call(result, value)) {
	            result[value].push(key);
	          } else {
	            result[value] = [key];
	          }
	        }
	        else {
	          result[value] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    var keys = !nativeKeys ? shimKeys : function(object) {
	      if (object) {
	        var Ctor = object.constructor,
	            length = object.length;
	      }
	      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	          (typeof object != 'function' && isLength(length))) {
	        return shimKeys(object);
	      }
	      return isObject(object) ? nativeKeys(object) : [];
	    };

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      if (object == null) {
	        return [];
	      }
	      if (!isObject(object)) {
	        object = Object(object);
	      }
	      var length = object.length;
	      length = (length && isLength(length) &&
	        (isArray(object) || (support.nonEnumArgs && isArguments(object))) && length) || 0;

	      var Ctor = object.constructor,
	          index = -1,
	          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	          result = Array(length),
	          skipIndexes = length > 0;

	      while (++index < length) {
	        result[index] = (index + '');
	      }
	      for (var key in object) {
	        if (!(skipIndexes && isIndex(key, length)) &&
	            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an object with the same keys as `object` and values generated by
	     * running each own enumerable property of `object` through `iteratee`. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, key, object).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
	     *   return n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * // using the `_.property` callback shorthand
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    function mapValues(object, iteratee, thisArg) {
	      var result = {};
	      iteratee = getCallback(iteratee, thisArg, 3);

	      baseForOwn(object, function(value, key, object) {
	        result[key] = iteratee(value, key, object);
	      });
	      return result;
	    }

	    /**
	     * Recursively merges own enumerable properties of the source object(s), that
	     * don't resolve to `undefined` into the destination object. Subsequent sources
	     * overwrite property assignments of previous sources. If `customizer` is
	     * provided it is invoked to produce the merged values of the destination and
	     * source properties. If `customizer` returns `undefined` merging is handled
	     * by the method instead. The `customizer` is bound to `thisArg` and invoked
	     * with five arguments: (objectValue, sourceValue, key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var users = {
	     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	     * };
	     *
	     * var ages = {
	     *   'data': [{ 'age': 36 }, { 'age': 40 }]
	     * };
	     *
	     * _.merge(users, ages);
	     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	     *
	     * // using a customizer callback
	     * var object = {
	     *   'fruits': ['apple'],
	     *   'vegetables': ['beet']
	     * };
	     *
	     * var other = {
	     *   'fruits': ['banana'],
	     *   'vegetables': ['carrot']
	     * };
	     *
	     * _.merge(object, other, function(a, b) {
	     *   if (_.isArray(a)) {
	     *     return a.concat(b);
	     *   }
	     * });
	     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	     */
	    var merge = createAssigner(baseMerge);

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable properties of `object` that are not omitted.
	     * Property names may be specified as individual arguments or as arrays of
	     * property names. If `predicate` is provided it is invoked for each property
	     * of `object` omitting the properties `predicate` returns truthy for. The
	     * predicate is bound to `thisArg` and invoked with three arguments:
	     * (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to omit, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.omit(object, 'age');
	     * // => { 'user': 'fred' }
	     *
	     * _.omit(object, _.isNumber);
	     * // => { 'user': 'fred' }
	     */
	    var omit = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      if (typeof props[0] != 'function') {
	        var props = arrayMap(baseFlatten(props), String);
	        return pickByArray(object, baseDifference(keysIn(object), props));
	      }
	      var predicate = bindCallback(props[0], props[1], 3);
	      return pickByCallback(object, function(value, key, object) {
	        return !predicate(value, key, object);
	      });
	    });

	    /**
	     * Creates a two dimensional array of the key-value pairs for `object`,
	     * e.g. `[[key1, value1], [key2, value2]]`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the new array of key-value pairs.
	     * @example
	     *
	     * _.pairs({ 'barney': 36, 'fred': 40 });
	     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
	     */
	    function pairs(object) {
	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        var key = props[index];
	        result[index] = [key, object[key]];
	      }
	      return result;
	    }

	    /**
	     * Creates an object composed of the picked `object` properties. Property
	     * names may be specified as individual arguments or as arrays of property
	     * names. If `predicate` is provided it is invoked for each property of `object`
	     * picking the properties `predicate` returns truthy for. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to pick, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.pick(object, 'user');
	     * // => { 'user': 'fred' }
	     *
	     * _.pick(object, _.isString);
	     * // => { 'user': 'fred' }
	     */
	    var pick = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      return typeof props[0] == 'function'
	        ? pickByCallback(object, bindCallback(props[0], props[1], 3))
	        : pickByArray(object, baseFlatten(props));
	    });

	    /**
	     * This method is like `_.get` except that if the resolved value is a function
	     * it is invoked with the `this` binding of its parent object and its result
	     * is returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a.b.c', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a.b.c', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      var result = object == null ? undefined : object[path];
	      if (result === undefined) {
	        if (object != null && !isKey(path, object)) {
	          path = toPath(path);
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          result = object == null ? undefined : object[last(path)];
	        }
	        result = result === undefined ? defaultValue : result;
	      }
	      return isFunction(result) ? result.call(object) : result;
	    }

	    /**
	     * Sets the property value of `path` on `object`. If a portion of `path`
	     * does not exist it is created.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to augment.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, 'x[0].y.z', 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      if (object == null) {
	        return object;
	      }
	      var pathKey = (path + '');
	      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

	      var index = -1,
	          length = path.length,
	          endIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = path[index];
	        if (isObject(nested)) {
	          if (index == endIndex) {
	            nested[key] = value;
	          } else if (nested[key] == null) {
	            nested[key] = isIndex(path[index + 1]) ? [] : {};
	          }
	        }
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own enumerable
	     * properties through `iteratee`, with each invocation potentially mutating
	     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
	     * with four arguments: (accumulator, value, key, object). Iteratee functions
	     * may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Array|Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     */
	    function transform(object, iteratee, accumulator, thisArg) {
	      var isArr = isArray(object) || isTypedArray(object);
	      iteratee = getCallback(iteratee, thisArg, 4);

	      if (accumulator == null) {
	        if (isArr || isObject(object)) {
	          var Ctor = object.constructor;
	          if (isArr) {
	            accumulator = isArray(object) ? new Ctor : [];
	          } else {
	            accumulator = baseCreate(isFunction(Ctor) && Ctor.prototype);
	          }
	        } else {
	          accumulator = {};
	        }
	      }
	      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Creates an array of the own enumerable property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return baseValues(object, keys(object));
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property values
	     * of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Checks if `n` is between `start` and up to but not including, `end`. If
	     * `end` is not specified it is set to `start` with `start` then set to `0`.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} n The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     */
	    function inRange(value, start, end) {
	      start = +start || 0;
	      if (typeof end === 'undefined') {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      return value >= nativeMin(start, end) && value < nativeMax(start, end);
	    }

	    /**
	     * Produces a random number between `min` and `max` (inclusive). If only one
	     * argument is provided a number between `0` and the given number is returned.
	     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
	     * number is returned instead of an integer.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} [min=0] The minimum possible value.
	     * @param {number} [max=1] The maximum possible value.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(min, max, floating) {
	      if (floating && isIterateeCall(min, max, floating)) {
	        max = floating = null;
	      }
	      var noMin = min == null,
	          noMax = max == null;

	      if (floating == null) {
	        if (noMax && typeof min == 'boolean') {
	          floating = min;
	          min = 1;
	        }
	        else if (typeof max == 'boolean') {
	          floating = max;
	          noMax = true;
	        }
	      }
	      if (noMin && noMax) {
	        max = 1;
	        noMax = false;
	      }
	      min = +min || 0;
	      if (noMax) {
	        max = min;
	        min = 0;
	      } else {
	        max = +max || 0;
	      }
	      if (floating || min % 1 || max % 1) {
	        var rand = nativeRandom();
	        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
	      }
	      return baseRandom(min, max);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__foo_bar__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
	    });

	    /**
	     * Capitalizes the first character of `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('fred');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      string = baseToString(string);
	      return string && (string.charAt(0).toUpperCase() + string.slice(1));
	    }

	    /**
	     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = baseToString(string);
	      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search from.
	     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = baseToString(string);
	      target = (target + '');

	      var length = string.length;
	      position = position === undefined
	        ? length
	        : nativeMin(position < 0 ? 0 : (+position || 0), length);

	      position -= target.length;
	      return position >= 0 && string.indexOf(target, position) == position;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
	     * their corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional characters
	     * use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't require escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value.
	     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * Backticks are escaped because in Internet Explorer < 9, they can break out
	     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
	     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
	     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
	     * for more details.
	     *
	     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
	     * to reduce XSS vectors.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
	      string = baseToString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
	     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
	     */
	    function escapeRegExp(string) {
	      string = baseToString(string);
	      return (string && reHasRegExpChars.test(string))
	        ? string.replace(reRegExpChars, '\\$&')
	        : string;
	    }

	    /**
	     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__foo_bar__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Pads `string` on the left and right sides if it is shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = baseToString(string);
	      length = +length;

	      var strLength = string.length;
	      if (strLength >= length || !nativeIsFinite(length)) {
	        return string;
	      }
	      var mid = (length - strLength) / 2,
	          leftLength = floor(mid),
	          rightLength = ceil(mid);

	      chars = createPadding('', rightLength, chars);
	      return chars.slice(0, leftLength) + string + chars;
	    }

	    /**
	     * Pads `string` on the left side if it is shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padLeft('abc', 6);
	     * // => '   abc'
	     *
	     * _.padLeft('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padLeft('abc', 3);
	     * // => 'abc'
	     */
	    var padLeft = createPadDir();

	    /**
	     * Pads `string` on the right side if it is shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padRight('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padRight('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padRight('abc', 3);
	     * // => 'abc'
	     */
	    var padRight = createPadDir(true);

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
	     * in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
	     * of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      if (guard && isIterateeCall(string, radix, guard)) {
	        radix = 0;
	      }
	      return nativeParseInt(string, radix);
	    }
	    // Fallback for environments with pre-ES5 implementations.
	    if (nativeParseInt(whitespace + '08') != 8) {
	      parseInt = function(string, radix, guard) {
	        // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
	        // Chrome fails to trim leading <BOM> whitespace characters.
	        // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
	        if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
	          radix = 0;
	        } else if (radix) {
	          radix = +radix;
	        }
	        string = trim(string);
	        return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
	      };
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=0] The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n) {
	      var result = '';
	      string = baseToString(string);
	      n = +n;
	      if (n < 1 || !string || !nativeIsFinite(n)) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = floor(n / 2);
	        string += string;
	      } while (n);

	      return result;
	    }

	    /**
	     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--foo-bar');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__foo_bar__');
	     * // => 'Foo Bar'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = baseToString(string);
	      position = position == null
	        ? 0
	        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

	      return string.lastIndexOf(target, position) == position;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is provided it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options] The options object.
	     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
	     * @param {Object} [options.imports] An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
	     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
	     * @param {string} [options.variable] The data object variable name.
	     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // using the "interpolate" delimiter to create a compiled template
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // using the HTML "escape" delimiter to escape data property values
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the internal `print` function in "evaluate" delimiters
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // using custom template delimiters
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // using backslashes to treat delimiters as plain text
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // using the `imports` option to import `jQuery` as `jq`
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the `sourceURL` option to specify a custom sourceURL for the template
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
	     *
	     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // using the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and a stack trace
	     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, otherOptions) {
	      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
	        options = otherOptions = null;
	      }
	      string = baseToString(string);
	      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

	      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products requires returning the `match`
	        // string in order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
	      }
	      chars = (chars + '');
	      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimLeft('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimLeft('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimLeft(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string));
	      }
	      return string.slice(charsLeftIndex(string, (chars + '')));
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimRight('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimRight('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimRight(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(0, trimmedRightIndex(string) + 1);
	      }
	      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
	    }

	    /**
	     * Truncates `string` if it is longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object|number} [options] The options object or maximum string length.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.trunc('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', 24);
	     * // => 'hi-diddly-ho there, n...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function trunc(string, options, guard) {
	      if (guard && isIterateeCall(string, options, guard)) {
	        options = null;
	      }
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (options != null) {
	        if (isObject(options)) {
	          var separator = 'separator' in options ? options.separator : separator;
	          length = 'length' in options ? (+options.length || 0) : length;
	          omission = 'omission' in options ? baseToString(options.omission) : omission;
	        } else {
	          length = +options || 0;
	        }
	      }
	      string = baseToString(string);
	      if (length >= string.length) {
	        return string;
	      }
	      var end = length - omission.length;
	      if (end < 1) {
	        return omission;
	      }
	      var result = string.slice(0, end);
	      if (separator == null) {
	        return result + omission;
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              newEnd,
	              substring = string.slice(0, end);

	          if (!separator.global) {
	            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            newEnd = match.index;
	          }
	          result = result.slice(0, newEnd == null ? end : newEnd);
	        }
	      } else if (string.indexOf(separator, end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
	     * corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
	     * entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = baseToString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      if (guard && isIterateeCall(string, pattern, guard)) {
	        pattern = null;
	      }
	      string = baseToString(string);
	      return string.match(pattern || reWords) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function} func The function to attempt.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // avoid throwing errors for invalid selectors
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = restParam(function(func, args) {
	      try {
	        return func.apply(undefined, args);
	      } catch(e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and arguments of the created function. If `func` is a property name the
	     * created callback returns the property value for a given element. If `func`
	     * is an object the created callback returns `true` for elements that contain
	     * the equivalent object properties, otherwise it returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias iteratee
	     * @category Utility
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // wrap to create custom callback shorthands
	     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
	     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
	     *   if (!match) {
	     *     return callback(func, thisArg);
	     *   }
	     *   return function(object) {
	     *     return match[2] == 'gt'
	     *       ? object[match[1]] > match[3]
	     *       : object[match[1]] < match[3];
	     *   };
	     * });
	     *
	     * _.filter(users, 'age__gt36');
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     */
	    function callback(func, thisArg, guard) {
	      if (guard && isIterateeCall(func, thisArg, guard)) {
	        thisArg = null;
	      }
	      return baseCallback(func, thisArg);
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var getter = _.constant(object);
	     *
	     * getter() === object;
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * This method returns the first argument provided to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.identity(object) === object;
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function which performs a deep comparison between a given object
	     * and `source`, returning `true` if the given object has equivalent property
	     * values, else `false`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
	     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, true));
	    }

	    /**
	     * Creates a function which compares the property value of `path` on a given
	     * object to `value`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} value The value to compare.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * _.find(users, _.matchesProperty('user', 'fred'));
	     * // => { 'user': 'fred' }
	     */
	    function matchesProperty(path, value) {
	      return baseMatchesProperty(path, baseClone(value, true));
	    }

	    /**
	     * Creates a function which invokes the method at `path` on a given object.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the method to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': _.constant(2) } } },
	     *   { 'a': { 'b': { 'c': _.constant(1) } } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    var method = restParam(function(path, args) {
	      return function(object) {
	        return invokePath(object, path, args);
	      }
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function which invokes
	     * the method at a given path on `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = restParam(function(object, args) {
	      return function(path) {
	        return invokePath(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable function properties of a source object to the
	     * destination object. If `object` is a function then methods are added to
	     * its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.chain=true] Specify whether the functions added
	     *  are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * // use `_.runInContext` to avoid conflicts (esp. in Node.js)
	     * var _ = require('lodash').runInContext();
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      if (options == null) {
	        var isObj = isObject(source),
	            props = isObj && keys(source),
	            methodNames = props && props.length && baseFunctions(source, props);

	        if (!(methodNames ? methodNames.length : isObj)) {
	          methodNames = false;
	          options = source;
	          source = object;
	          object = this;
	        }
	      }
	      if (!methodNames) {
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = true,
	          index = -1,
	          isFunc = isFunction(object),
	          length = methodNames.length;

	      if (options === false) {
	        chain = false;
	      } else if (isObject(options) && 'chain' in options) {
	        chain = options.chain;
	      }
	      while (++index < length) {
	        var methodName = methodNames[index],
	            func = source[methodName];

	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = (function(func) {
	            return function() {
	              var chainAll = this.__chain__;
	              if (chain || chainAll) {
	                var result = object(this.__wrapped__),
	                    actions = result.__actions__ = arrayCopy(this.__actions__);

	                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	                result.__chain__ = chainAll;
	                return result;
	              }
	              var args = [this.value()];
	              push.apply(args, arguments);
	              return func.apply(object, args);
	            };
	          }(func));
	        }
	      }
	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      context._ = oldDash;
	      return this;
	    }

	    /**
	     * A no-operation function which returns `undefined` regardless of the
	     * arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.noop(object) === undefined;
	     * // => true
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function which returns the property value at `path` on a
	     * given object.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': 2 } } },
	     *   { 'a': { 'b': { 'c': 1 } } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function which returns
	     * the property value at a given path on `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return baseGet(object, toPath(path), path + '');
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. If `end` is not specified it is
	     * set to `start` with `start` then set to `0`. If `end` is less than `start`
	     * a zero-length range is created unless a negative `step` is specified.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the new array of numbers.
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    function range(start, end, step) {
	      if (step && isIterateeCall(start, end, step)) {
	        end = step = null;
	      }
	      start = +start || 0;
	      step = step == null ? 1 : (+step || 0);

	      if (end == null) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
	      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
	      var index = -1,
	          length = nativeMax(ceil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (++index < length) {
	        result[index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * Invokes the iteratee function `n` times, returning an array of the results
	     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
	     * one argument; (index).
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
	     * // => [3, 6, 4]
	     *
	     * _.times(3, function(n) {
	     *   mage.castSpell(n);
	     * });
	     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
	     *
	     * _.times(3, function(n) {
	     *   this.cast(n);
	     * }, mage);
	     * // => also invokes `mage.castSpell(n)` three times
	     */
	    function times(n, iteratee, thisArg) {
	      n = floor(n);

	      // Exit early to avoid a JSC JIT bug in Safari 8
	      // where `Array(0)` is treated as `Array(1)`.
	      if (n < 1 || !nativeIsFinite(n)) {
	        return [];
	      }
	      var index = -1,
	          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

	      iteratee = bindCallback(iteratee, thisArg, 1);
	      while (++index < n) {
	        if (index < MAX_ARRAY_LENGTH) {
	          result[index] = iteratee(index);
	        } else {
	          iteratee(index);
	        }
	      }
	      return result;
	    }

	    /**
	     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {string} [prefix] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return baseToString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} augend The first number to add.
	     * @param {number} addend The second number to add.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    function add(augend, addend) {
	      return (+augend || 0) + (+addend || 0);
	    }

	    /**
	     * Gets the maximum value of `collection`. If `collection` is empty or falsey
	     * `-Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => -Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.max(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.max(users, 'age');
	     * // => { 'user': 'fred', 'age': 40 }
	     */
	    var max = createExtremum(arrayMax);

	    /**
	     * Gets the minimum value of `collection`. If `collection` is empty or falsey
	     * `Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.min(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.min(users, 'age');
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var min = createExtremum(arrayMin, true);

	    /**
	     * Gets the sum of the values in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 6]);
	     * // => 10
	     *
	     * _.sum({ 'a': 4, 'b': 6 });
	     * // => 10
	     *
	     * var objects = [
	     *   { 'n': 4 },
	     *   { 'n': 6 }
	     * ];
	     *
	     * _.sum(objects, function(object) {
	     *   return object.n;
	     * });
	     * // => 10
	     *
	     * // using the `_.property` callback shorthand
	     * _.sum(objects, 'n');
	     * // => 10
	     */
	    function sum(collection, iteratee, thisArg) {
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = null;
	      }
	      var func = getCallback(),
	          noIteratee = iteratee == null;

	      if (!(func === baseCallback && noIteratee)) {
	        noIteratee = false;
	        iteratee = func(iteratee, thisArg, 3);
	      }
	      return noIteratee
	        ? arraySum(isArray(collection) ? collection : toIterable(collection))
	        : baseSum(collection, iteratee);
	    }

	    /*------------------------------------------------------------------------*/

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    // Add functions to the `Map` cache.
	    MapCache.prototype['delete'] = mapDelete;
	    MapCache.prototype.get = mapGet;
	    MapCache.prototype.has = mapHas;
	    MapCache.prototype.set = mapSet;

	    // Add functions to the `Set` cache.
	    SetCache.prototype.push = cachePush;

	    // Assign cache to `_.memoize`.
	    memoize.Cache = MapCache;

	    // Add functions that return wrapped values when chaining.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.callback = callback;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.functions = functions;
	    lodash.groupBy = groupBy;
	    lodash.indexBy = indexBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.invert = invert;
	    lodash.invoke = invoke;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.negate = negate;
	    lodash.omit = omit;
	    lodash.once = once;
	    lodash.pairs = pairs;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pluck = pluck;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.restParam = restParam;
	    lodash.set = set;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortByAll = sortByAll;
	    lodash.sortByOrder = sortByOrder;
	    lodash.spread = spread;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.times = times;
	    lodash.toArray = toArray;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.union = union;
	    lodash.uniq = uniq;
	    lodash.unzip = unzip;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.where = where;
	    lodash.without = without;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;

	    // Add aliases.
	    lodash.backflow = flowRight;
	    lodash.collect = map;
	    lodash.compose = flowRight;
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.extend = assign;
	    lodash.iteratee = callback;
	    lodash.methods = functions;
	    lodash.object = zipObject;
	    lodash.select = filter;
	    lodash.tail = rest;
	    lodash.unique = uniq;

	    // Add functions to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add functions that return unwrapped values when chaining.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.deburr = deburr;
	    lodash.endsWith = endsWith;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.findWhere = findWhere;
	    lodash.first = first;
	    lodash.get = get;
	    lodash.has = has;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isBoolean = isBoolean;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isMatch = isMatch;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isString = isString;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.max = max;
	    lodash.min = min;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padLeft = padLeft;
	    lodash.padRight = padRight;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.result = result;
	    lodash.runInContext = runInContext;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.sum = sum;
	    lodash.template = template;
	    lodash.trim = trim;
	    lodash.trimLeft = trimLeft;
	    lodash.trimRight = trimRight;
	    lodash.trunc = trunc;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.words = words;

	    // Add aliases.
	    lodash.all = every;
	    lodash.any = some;
	    lodash.contains = includes;
	    lodash.detect = find;
	    lodash.foldl = reduce;
	    lodash.foldr = reduceRight;
	    lodash.head = first;
	    lodash.include = includes;
	    lodash.inject = reduce;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!lodash.prototype[methodName]) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), false);

	    /*------------------------------------------------------------------------*/

	    // Add functions capable of returning wrapped and unwrapped values when chaining.
	    lodash.sample = sample;

	    lodash.prototype.sample = function(n) {
	      if (!this.__chain__ && n == null) {
	        return sample(this.value());
	      }
	      return this.thru(function(value) {
	        return sample(value, n);
	      });
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type string
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['dropWhile', 'filter', 'map', 'takeWhile'], function(methodName, type) {
	      var isFilter = type != LAZY_MAP_FLAG,
	          isDropWhile = type == LAZY_DROP_WHILE_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
	        var filtered = this.__filtered__,
	            result = (filtered && isDropWhile) ? new LazyWrapper(this) : this.clone(),
	            iteratees = result.__iteratees__ || (result.__iteratees__ = []);

	        iteratees.push({
	          'done': false,
	          'count': 0,
	          'index': 0,
	          'iteratee': getCallback(iteratee, thisArg, 1),
	          'limit': -1,
	          'type': type
	        });

	        result.__filtered__ = filtered || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      var whileName = methodName + 'While';

	      LazyWrapper.prototype[methodName] = function(n) {
	        var filtered = this.__filtered__,
	            result = (filtered && !index) ? this.dropWhile() : this.clone();

	        n = n == null ? 1 : nativeMax(floor(n) || 0, 0);
	        if (filtered) {
	          if (index) {
	            result.__takeCount__ = nativeMin(result.__takeCount__, n);
	          } else {
	            last(result.__iteratees__).limit = n;
	          }
	        } else {
	          var views = result.__views__ || (result.__views__ = []);
	          views.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };

	      LazyWrapper.prototype[methodName + 'RightWhile'] = function(predicate, thisArg) {
	        return this.reverse()[whileName](predicate, thisArg).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods for `_.first` and `_.last`.
	    arrayEach(['first', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
	    arrayEach(['initial', 'rest'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[dropName](1);
	      };
	    });

	    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
	    arrayEach(['pluck', 'where'], function(methodName, index) {
	      var operationName = index ? 'filter' : 'map',
	          createCallback = index ? baseMatches : property;

	      LazyWrapper.prototype[methodName] = function(value) {
	        return this[operationName](createCallback(value));
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.reject = function(predicate, thisArg) {
	      predicate = getCallback(predicate, thisArg, 1);
	      return this.filter(function(value) {
	        return !predicate(value);
	      });
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = start == null ? 0 : (+start || 0);
	      var result = start < 0 ? this.takeRight(-start) : this.drop(start);

	      if (end !== undefined) {
	        end = (+end || 0);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.drop(0);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (!lodashFunc) {
	        return;
	      }
	      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
	          retUnwrapped = /^(?:first|last)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments,
	            length = args.length,
	            chainAll = this.__chain__,
	            value = this.__wrapped__,
	            isHybrid = !!this.__actions__.length,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // avoid lazy use if the iteratee has a "length" value other than `1`
	          isLazy = useLazy = false;
	        }
	        var onlyLazy = isLazy && !isHybrid;
	        if (retUnwrapped && !chainAll) {
	          return onlyLazy
	            ? func.call(value)
	            : lodashFunc.call(lodash, this.value());
	        }
	        var interceptor = function(value) {
	          var otherArgs = [value];
	          push.apply(otherArgs, args);
	          return lodashFunc.apply(lodash, otherArgs);
	        };
	        if (useLazy) {
	          var wrapper = onlyLazy ? value : new LazyWrapper(this),
	              result = func.apply(wrapper, args);

	          if (!retUnwrapped && (isHybrid || result.__actions__)) {
	            var actions = result.__actions__ || (result.__actions__ = []);
	            actions.push({ 'func': thru, 'args': [interceptor], 'thisArg': lodash });
	          }
	          return new LodashWrapper(result, chainAll);
	        }
	        return this.thru(interceptor);
	      };
	    });

	    // Add `Array` and `String` methods to `lodash.prototype`.
	    arrayEach(['concat', 'join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
	      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          return func.apply(this.value(), args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(value, args);
	        });
	      };
	    });

	    // Map minified function names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = lodashFunc.name,
	            names = realNames[key] || (realNames[key] = []);

	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybridWrapper(null, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': null }];

	    // Add functions to the lazy wrapper.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chaining functions to the `lodash` wrapper.
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toString = wrapperToString;
	    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    // Add function aliases to the `lodash` wrapper.
	    lodash.prototype.collect = lodash.prototype.map;
	    lodash.prototype.head = lodash.prototype.first;
	    lodash.prototype.select = lodash.prototype.filter;
	    lodash.prototype.tail = lodash.prototype.rest;

	    return lodash;
	  }

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Some AMD build optimizers like r.js check for condition patterns like the following:
	  if (true) {
	    // Expose lodash to the global object when an AMD loader is present to avoid
	    // errors in cases where lodash is loaded by a script tag and not intended
	    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
	    // more details.
	    root._ = _;

	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
	  else if (freeExports && freeModule) {
	    // Export for Node.js or RingoJS.
	    if (moduleExports) {
	      (freeModule.exports = _)._ = _;
	    }
	    // Export for Narwhal or Rhino -require.
	    else {
	      freeExports._ = _;
	    }
	  }
	  else {
	    // Export for a browser or Rhino.
	    root._ = _;
	  }
	}.call(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(141)(module), (function() { return this; }())))

/***/ },
/* 79 */,
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(140).crossfilter;


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * jQuery Dynatable plugin 0.3.1
	 *
	 * Copyright (c) 2014 Steve Schwartz (JangoSteve)
	 *
	 * Dual licensed under the AGPL and Proprietary licenses:
	 *   http://www.dynatable.com/license/
	 *
	 * Date: Tue Jan 02 2014
	 */
	//

	(function($) {
	  var defaults,
	      mergeSettings,
	      dt,
	      Model,
	      modelPrototypes = {
	        dom: Dom,
	        domColumns: DomColumns,
	        records: Records,
	        recordsCount: RecordsCount,
	        processingIndicator: ProcessingIndicator,
	        state: State,
	        sorts: Sorts,
	        sortsHeaders: SortsHeaders,
	        queries: Queries,
	        inputsSearch: InputsSearch,
	        paginationPage: PaginationPage,
	        paginationPerPage: PaginationPerPage,
	        paginationLinks: PaginationLinks
	      },
	      utility,
	      build,
	      processAll,
	      initModel,
	      defaultRowWriter,
	      defaultCellWriter,
	      defaultAttributeWriter,
	      defaultAttributeReader;

	  //-----------------------------------------------------------------
	  // Cached plugin global defaults
	  //-----------------------------------------------------------------

	  defaults = {
	    features: {
	      paginate: true,
	      sort: true,
	      pushState: true,
	      search: true,
	      recordCount: true,
	      perPageSelect: true
	    },
	    table: {
	      defaultColumnIdStyle: 'camelCase',
	      columns: null,
	      headRowSelector: 'thead tr', // or e.g. tr:first-child
	      bodyRowSelector: 'tbody tr',
	      headRowClass: null,
	      copyHeaderAlignment: true,
	      copyHeaderClass: false
	    },
	    inputs: {
	      queries: null,
	      sorts: null,
	      multisort: ['ctrlKey', 'shiftKey', 'metaKey'],
	      page: null,
	      queryEvent: 'blur change',
	      recordCountTarget: null,
	      recordCountPlacement: 'after',
	      paginationLinkTarget: null,
	      paginationLinkPlacement: 'after',
	      paginationClass: 'dynatable-pagination-links',
	      paginationLinkClass: 'dynatable-page-link',
	      paginationPrevClass: 'dynatable-page-prev',
	      paginationNextClass: 'dynatable-page-next',
	      paginationActiveClass: 'dynatable-active-page',
	      paginationDisabledClass: 'dynatable-disabled-page',
	      paginationPrev: 'Previous',
	      paginationNext: 'Next',
	      paginationGap: [1,2,2,1],
	      searchTarget: null,
	      searchPlacement: 'before',
	      searchText: 'Search: ',
	      perPageTarget: null,
	      perPagePlacement: 'before',
	      perPageText: 'Show: ',
	      pageText: 'Pages: ',
	      recordCountPageBoundTemplate: '{pageLowerBound} to {pageUpperBound} of',
	      recordCountPageUnboundedTemplate: '{recordsShown} of',
	      recordCountTotalTemplate: '{recordsQueryCount} {collectionName}',
	      recordCountFilteredTemplate: ' (filtered from {recordsTotal} total records)',
	      recordCountText: 'Showing',
	      recordCountTextTemplate: '{text} {pageTemplate} {totalTemplate} {filteredTemplate}',
	      recordCountTemplate: '<span id="dynatable-record-count-{elementId}" class="dynatable-record-count">{textTemplate}</span>',
	      processingText: 'Processing...'
	    },
	    dataset: {
	      ajax: false,
	      ajaxUrl: null,
	      ajaxCache: null,
	      ajaxOnLoad: false,
	      ajaxMethod: 'GET',
	      ajaxDataType: 'json',
	      totalRecordCount: null,
	      queries: {},
	      queryRecordCount: null,
	      page: null,
	      perPageDefault: 10,
	      perPageOptions: [10,20,50,100],
	      sorts: {},
	      sortsKeys: [],
	      sortTypes: {},
	      records: null
	    },
	    writers: {
	      _rowWriter: defaultRowWriter,
	      _cellWriter: defaultCellWriter,
	      _attributeWriter: defaultAttributeWriter
	    },
	    readers: {
	      _rowReader: null,
	      _attributeReader: defaultAttributeReader
	    },
	    params: {
	      dynatable: 'dynatable',
	      queries: 'queries',
	      sorts: 'sorts',
	      page: 'page',
	      perPage: 'perPage',
	      offset: 'offset',
	      records: 'records',
	      record: null,
	      queryRecordCount: 'queryRecordCount',
	      totalRecordCount: 'totalRecordCount'
	    }
	  };

	  //-----------------------------------------------------------------
	  // Each dynatable instance inherits from this,
	  // set properties specific to instance
	  //-----------------------------------------------------------------

	  dt = {
	    init: function(element, options) {
	      this.settings = mergeSettings(options);
	      this.element = element;
	      this.$element = $(element);

	      // All the setup that doesn't require element or options
	      build.call(this);

	      return this;
	    },

	    process: function(skipPushState) {
	      processAll.call(this, skipPushState);
	    }
	  };

	  //-----------------------------------------------------------------
	  // Cached plugin global functions
	  //-----------------------------------------------------------------

	  mergeSettings = function(options) {
	    var newOptions = $.extend(true, {}, defaults, options);

	    // TODO: figure out a better way to do this.
	    // Doing `extend(true)` causes any elements that are arrays
	    // to merge the default and options arrays instead of overriding the defaults.
	    if (options) {
	      if (options.inputs) {
	        if (options.inputs.multisort) {
	          newOptions.inputs.multisort = options.inputs.multisort;
	        }
	        if (options.inputs.paginationGap) {
	          newOptions.inputs.paginationGap = options.inputs.paginationGap;
	        }
	      }
	      if (options.dataset && options.dataset.perPageOptions) {
	        newOptions.dataset.perPageOptions = options.dataset.perPageOptions;
	      }
	    }

	    return newOptions;
	  };

	  build = function() {
	    this.$element.trigger('dynatable:preinit', this);

	    for (model in modelPrototypes) {
	      if (modelPrototypes.hasOwnProperty(model)) {
	        var modelInstance = this[model] = new modelPrototypes[model](this, this.settings);
	        if (modelInstance.initOnLoad()) {
	          modelInstance.init();
	        }
	      }
	    }

	    this.$element.trigger('dynatable:init', this);

	    if (!this.settings.dataset.ajax || (this.settings.dataset.ajax && this.settings.dataset.ajaxOnLoad) || this.settings.features.paginate || (this.settings.features.sort && !$.isEmptyObject(this.settings.dataset.sorts))) {
	      this.process();
	    }
	  };

	  processAll = function(skipPushState) {
	    var data = {};

	    this.$element.trigger('dynatable:beforeProcess', data);

	    if (!$.isEmptyObject(this.settings.dataset.queries)) { data[this.settings.params.queries] = this.settings.dataset.queries; }
	    // TODO: Wrap this in a try/rescue block to hide the processing indicator and indicate something went wrong if error
	    this.processingIndicator.show();

	    if (this.settings.features.sort && !$.isEmptyObject(this.settings.dataset.sorts)) { data[this.settings.params.sorts] = this.settings.dataset.sorts; }
	    if (this.settings.features.paginate && this.settings.dataset.page) {
	      var page = this.settings.dataset.page,
	          perPage = this.settings.dataset.perPage;
	      data[this.settings.params.page] = page;
	      data[this.settings.params.perPage] = perPage;
	      data[this.settings.params.offset] = (page - 1) * perPage;
	    }
	    if (this.settings.dataset.ajaxData) { $.extend(data, this.settings.dataset.ajaxData); }

	    // If ajax, sends query to ajaxUrl with queries and sorts serialized and appended in ajax data
	    // otherwise, executes queries and sorts on in-page data
	    if (this.settings.dataset.ajax) {
	      var _this = this;
	      var options = {
	        type: _this.settings.dataset.ajaxMethod,
	        dataType: _this.settings.dataset.ajaxDataType,
	        data: data,
	        error: function(xhr, error) {
	          _this.$element.trigger('dynatable:ajax:error', {xhr: xhr, error : error});
	        },
	        success: function(response) {
	          _this.$element.trigger('dynatable:ajax:success', response);
	          // Merge ajax results and meta-data into dynatables cached data
	          _this.records.updateFromJson(response);
	          // update table with new records
	          _this.dom.update();

	          if (!skipPushState && _this.state.initOnLoad()) {
	            _this.state.push(data);
	          }
	        },
	        complete: function() {
	          _this.processingIndicator.hide();
	        }
	      };
	      // Do not pass url to `ajax` options if blank
	      if (this.settings.dataset.ajaxUrl) {
	        options.url = this.settings.dataset.ajaxUrl;

	      // If ajaxUrl is blank, then we're using the current page URL,
	      // we need to strip out any query, sort, or page data controlled by dynatable
	      // that may have been in URL when page loaded, so that it doesn't conflict with
	      // what's passed in with the data ajax parameter
	      } else {
	        options.url = utility.refreshQueryString(window.location.href, {}, this.settings);
	      }
	      if (this.settings.dataset.ajaxCache !== null) { options.cache = this.settings.dataset.ajaxCache; }

	      $.ajax(options);
	    } else {
	      this.records.resetOriginal();
	      this.queries.run();
	      if (this.settings.features.sort) {
	        this.records.sort();
	      }
	      if (this.settings.features.paginate) {
	        this.records.paginate();
	      }
	      this.dom.update();
	      this.processingIndicator.hide();

	      if (!skipPushState && this.state.initOnLoad()) {
	        this.state.push(data);
	      }
	    }

	    this.$element.addClass('dynatable-loaded');
	    this.$element.trigger('dynatable:afterProcess', data);
	  };

	  function defaultRowWriter(rowIndex, record, columns, cellWriter) {
	    var tr = '';

	    // grab the record's attribute for each column
	    for (var i = 0, len = columns.length; i < len; i++) {
	      tr += cellWriter(columns[i], record);
	    }

	    return '<tr>' + tr + '</tr>';
	  };

	  function defaultCellWriter(column, record) {
	    var html = column.attributeWriter(record),
	        td = '<td';

	    if (column.hidden || column.textAlign) {
	      td += ' style="';

	      // keep cells for hidden column headers hidden
	      if (column.hidden) {
	        td += 'display: none;';
	      }

	      // keep cells aligned as their column headers are aligned
	      if (column.textAlign) {
	        td += 'text-align: ' + column.textAlign + ';';
	      }

	      td += '"';
	    }

	    if (column.cssClass) {
	      td += ' class="' + column.cssClass + '"';
	    }

	    return td + '>' + html + '</td>';
	  };

	  function defaultAttributeWriter(record) {
	    // `this` is the column object in settings.columns
	    // TODO: automatically convert common types, such as arrays and objects, to string
	    return record[this.id];
	  };

	  function defaultAttributeReader(cell, record) {
	    return $(cell).html();
	  };

	  //-----------------------------------------------------------------
	  // Dynatable object model prototype
	  // (all object models get these default functions)
	  //-----------------------------------------------------------------

	  Model = {
	    initOnLoad: function() {
	      return true;
	    },

	    init: function() {}
	  };

	  for (model in modelPrototypes) {
	    if (modelPrototypes.hasOwnProperty(model)) {
	      var modelPrototype = modelPrototypes[model];
	      modelPrototype.prototype = Model;
	    }
	  }

	  //-----------------------------------------------------------------
	  // Dynatable object models
	  //-----------------------------------------------------------------

	  function Dom(obj, settings) {
	    var _this = this;

	    // update table contents with new records array
	    // from query (whether ajax or not)
	    this.update = function() {
	      var rows = '',
	          columns = settings.table.columns,
	          rowWriter = settings.writers._rowWriter,
	          cellWriter = settings.writers._cellWriter;

	      obj.$element.trigger('dynatable:beforeUpdate', rows);

	      // loop through records
	      for (var i = 0, len = settings.dataset.records.length; i < len; i++) {
	        var record = settings.dataset.records[i],
	            tr = rowWriter(i, record, columns, cellWriter);
	        rows += tr;
	      }

	      // Appended dynatable interactive elements
	      if (settings.features.recordCount) {
	        $('#dynatable-record-count-' + obj.element.id).replaceWith(obj.recordsCount.create());
	      }
	      if (settings.features.paginate) {
	        $('#dynatable-pagination-links-' + obj.element.id).replaceWith(obj.paginationLinks.create());
	        if (settings.features.perPageSelect) {
	          $('#dynatable-per-page-' + obj.element.id).val(parseInt(settings.dataset.perPage));
	        }
	      }

	      // Sort headers functionality
	      if (settings.features.sort && columns) {
	        obj.sortsHeaders.removeAllArrows();
	        for (var i = 0, len = columns.length; i < len; i++) {
	          var column = columns[i],
	              sortedByColumn = utility.allMatch(settings.dataset.sorts, column.sorts, function(sorts, sort) { return sort in sorts; }),
	              value = settings.dataset.sorts[column.sorts[0]];

	          if (sortedByColumn) {
	            obj.$element.find('[data-dynatable-column="' + column.id + '"]').find('.dynatable-sort-header').each(function(){
	              if (value == 1) {
	                obj.sortsHeaders.appendArrowUp($(this));
	              } else {
	                obj.sortsHeaders.appendArrowDown($(this));
	              }
	            });
	          }
	        }
	      }

	      // Query search functionality
	      if (settings.inputs.queries || settings.features.search) {
	        var allQueries = settings.inputs.queries || $();
	        if (settings.features.search) {
	          allQueries = allQueries.add('#dynatable-query-search-' + obj.element.id);
	        }

	        allQueries.each(function() {
	          var $this = $(this),
	              q = settings.dataset.queries[$this.data('dynatable-query')];
	          $this.val(q || '');
	        });
	      }

	      obj.$element.find(settings.table.bodyRowSelector).remove();
	      obj.$element.append(rows);

	      obj.$element.trigger('dynatable:afterUpdate', rows);
	    };
	  };

	  function DomColumns(obj, settings) {
	    var _this = this;

	    this.initOnLoad = function() {
	      return obj.$element.is('table');
	    };

	    this.init = function() {
	      settings.table.columns = [];
	      this.getFromTable();
	    };

	    // initialize table[columns] array
	    this.getFromTable = function() {
	      var $columns = obj.$element.find(settings.table.headRowSelector).children('th,td');
	      if ($columns.length) {
	        $columns.each(function(index){
	          _this.add($(this), index, true);
	        });
	      } else {
	        return $.error("Couldn't find any columns headers in '" + settings.table.headRowSelector + " th,td'. If your header row is different, specify the selector in the table: headRowSelector option.");
	      }
	    };

	    this.add = function($column, position, skipAppend, skipUpdate) {
	      var columns = settings.table.columns,
	          label = $column.text(),
	          id = $column.data('dynatable-column') || utility.normalizeText(label, settings.table.defaultColumnIdStyle),
	          dataSorts = $column.data('dynatable-sorts'),
	          sorts = dataSorts ? $.map(dataSorts.split(','), function(text) { return $.trim(text); }) : [id];

	      // If the column id is blank, generate an id for it
	      if ( !id ) {
	        this.generate($column);
	        id = $column.data('dynatable-column');
	      }
	      // Add column data to plugin instance
	      columns.splice(position, 0, {
	        index: position,
	        label: label,
	        id: id,
	        attributeWriter: settings.writers[id] || settings.writers._attributeWriter,
	        attributeReader: settings.readers[id] || settings.readers._attributeReader,
	        sorts: sorts,
	        hidden: $column.css('display') === 'none',
	        textAlign: settings.table.copyHeaderAlignment && $column.css('text-align'),
	        cssClass: settings.table.copyHeaderClass && $column.attr('class')
	      });

	      // Modify header cell
	      $column
	        .attr('data-dynatable-column', id)
	        .addClass('dynatable-head');
	      if (settings.table.headRowClass) { $column.addClass(settings.table.headRowClass); }

	      // Append column header to table
	      if (!skipAppend) {
	        var domPosition = position + 1,
	            $sibling = obj.$element.find(settings.table.headRowSelector)
	              .children('th:nth-child(' + domPosition + '),td:nth-child(' + domPosition + ')').first(),
	            columnsAfter = columns.slice(position + 1, columns.length);

	        if ($sibling.length) {
	          $sibling.before($column);
	        // sibling column doesn't yet exist (maybe this is the last column in the header row)
	        } else {
	          obj.$element.find(settings.table.headRowSelector).append($column);
	        }

	        obj.sortsHeaders.attachOne($column.get());

	        // increment the index of all columns after this one that was just inserted
	        if (columnsAfter.length) {
	          for (var i = 0, len = columnsAfter.length; i < len; i++) {
	            columnsAfter[i].index += 1;
	          }
	        }

	        if (!skipUpdate) {
	          obj.dom.update();
	        }
	      }

	      return dt;
	    };

	    this.remove = function(columnIndexOrId) {
	      var columns = settings.table.columns,
	          length = columns.length;

	      if (typeof(columnIndexOrId) === "number") {
	        var column = columns[columnIndexOrId];
	        this.removeFromTable(column.id);
	        this.removeFromArray(columnIndexOrId);
	      } else {
	        // Traverse columns array in reverse order so that subsequent indices
	        // don't get messed up when we delete an item from the array in an iteration
	        for (var i = columns.length - 1; i >= 0; i--) {
	          var column = columns[i];

	          if (column.id === columnIndexOrId) {
	            this.removeFromTable(columnIndexOrId);
	            this.removeFromArray(i);
	          }
	        }
	      }

	      obj.dom.update();
	    };

	    this.removeFromTable = function(columnId) {
	      obj.$element.find(settings.table.headRowSelector).children('[data-dynatable-column="' + columnId + '"]').first()
	        .remove();
	    };

	    this.removeFromArray = function(index) {
	      var columns = settings.table.columns,
	          adjustColumns;
	      columns.splice(index, 1);
	      adjustColumns = columns.slice(index, columns.length);
	      for (var i = 0, len = adjustColumns.length; i < len; i++) {
	        adjustColumns[i].index -= 1;
	      }
	    };

	    this.generate = function($cell) {
	      var cell = $cell === undefined ? $('<th></th>') : $cell;
	      return this.attachGeneratedAttributes(cell);
	    };

	    this.attachGeneratedAttributes = function($cell) {
	      // Use increment to create unique column name that is the same each time the page is reloaded,
	      // in order to avoid errors with mismatched attribute names when loading cached `dataset.records` array
	      var increment = obj.$element.find(settings.table.headRowSelector).children('th[data-dynatable-generated]').length;
	      return $cell
	        .attr('data-dynatable-column', 'dynatable-generated-' + increment) //+ utility.randomHash(),
	        .attr('data-dynatable-no-sort', 'true')
	        .attr('data-dynatable-generated', increment);
	    };
	  };

	  function Records(obj, settings) {
	    var _this = this;

	    this.initOnLoad = function() {
	      return !settings.dataset.ajax;
	    };

	    this.init = function() {
	      if (settings.dataset.records === null) {
	        settings.dataset.records = this.getFromTable();

	        if (!settings.dataset.queryRecordCount) {
	          settings.dataset.queryRecordCount = this.count();
	        }

	        if (!settings.dataset.totalRecordCount){
	          settings.dataset.totalRecordCount = settings.dataset.queryRecordCount;
	        }
	      }

	      // Create cache of original full recordset (unpaginated and unqueried)
	      settings.dataset.originalRecords = $.extend(true, [], settings.dataset.records);
	    };

	    // merge ajax response json with cached data including
	    // meta-data and records
	    this.updateFromJson = function(data) {
	      var records;
	      if (settings.params.records === "_root") {
	        records = data;
	      } else if (settings.params.records in data) {
	        records = data[settings.params.records];
	      }
	      if (settings.params.record) {
	        var len = records.length - 1;
	        for (var i = 0; i < len; i++) {
	          records[i] = records[i][settings.params.record];
	        }
	      }
	      if (settings.params.queryRecordCount in data) {
	        settings.dataset.queryRecordCount = data[settings.params.queryRecordCount];
	      }
	      if (settings.params.totalRecordCount in data) {
	        settings.dataset.totalRecordCount = data[settings.params.totalRecordCount];
	      }
	      settings.dataset.records = records;
	    };

	    // For really advanced sorting,
	    // see http://james.padolsey.com/javascript/sorting-elements-with-jquery/
	    this.sort = function() {
	      var sort = [].sort,
	          sorts = settings.dataset.sorts,
	          sortsKeys = settings.dataset.sortsKeys,
	          sortTypes = settings.dataset.sortTypes;

	      var sortFunction = function(a, b) {
	        var comparison;
	        if ($.isEmptyObject(sorts)) {
	          comparison = obj.sorts.functions['originalPlacement'](a, b);
	        } else {
	          for (var i = 0, len = sortsKeys.length; i < len; i++) {
	            var attr = sortsKeys[i],
	                direction = sorts[attr],
	                sortType = sortTypes[attr] || obj.sorts.guessType(a, b, attr);
	            comparison = obj.sorts.functions[sortType](a, b, attr, direction);
	            // Don't need to sort any further unless this sort is a tie between a and b,
	            // so break the for loop unless tied
	            if (comparison !== 0) { break; }
	          }
	        }
	        return comparison;
	      }

	      return sort.call(settings.dataset.records, sortFunction);
	    };

	    this.paginate = function() {
	      var bounds = this.pageBounds(),
	          first = bounds[0], last = bounds[1];
	      settings.dataset.records = settings.dataset.records.slice(first, last);
	    };

	    this.resetOriginal = function() {
	      settings.dataset.records = settings.dataset.originalRecords || [];
	    };

	    this.pageBounds = function() {
	      var page = settings.dataset.page || 1,
	          first = (page - 1) * settings.dataset.perPage,
	          last = Math.min(first + settings.dataset.perPage, settings.dataset.queryRecordCount);
	      return [first,last];
	    };

	    // get initial recordset to populate table
	    // if ajax, call ajaxUrl
	    // otherwise, initialize from in-table records
	    this.getFromTable = function() {
	      var records = [],
	          columns = settings.table.columns,
	          tableRecords = obj.$element.find(settings.table.bodyRowSelector);

	      tableRecords.each(function(index){
	        var record = {};
	        record['dynatable-original-index'] = index;
	        $(this).find('th,td').each(function(index) {
	          if (columns[index] === undefined) {
	            // Header cell didn't exist for this column, so let's generate and append
	            // a new header cell with a randomly generated name (so we can store and
	            // retrieve the contents of this column for each record)
	            obj.domColumns.add(obj.domColumns.generate(), columns.length, false, true); // don't skipAppend, do skipUpdate
	          }
	          var value = columns[index].attributeReader(this, record),
	              attr = columns[index].id;

	          // If value from table is HTML, let's get and cache the text equivalent for
	          // the default string sorting, since it rarely makes sense for sort headers
	          // to sort based on HTML tags.
	          if (typeof(value) === "string" && value.match(/\s*\<.+\>/)) {
	            if (! record['dynatable-sortable-text']) {
	              record['dynatable-sortable-text'] = {};
	            }
	            record['dynatable-sortable-text'][attr] = $.trim($('<div></div>').html(value).text());
	          }

	          record[attr] = value;
	        });
	        // Allow configuration function which alters record based on attributes of
	        // table row (e.g. from html5 data- attributes)
	        if (typeof(settings.readers._rowReader) === "function") {
	          settings.readers._rowReader(index, this, record);
	        }
	        records.push(record);
	      });
	      return records; // 1st row is header
	    };

	    // count records from table
	    this.count = function() {
	      return settings.dataset.records.length;
	    };
	  };

	  function RecordsCount(obj, settings) {
	    this.initOnLoad = function() {
	      return settings.features.recordCount;
	    };

	    this.init = function() {
	      this.attach();
	    };

	    this.create = function() {
	      var pageTemplate = '',
	          filteredTemplate = '',
	          options = {
	            elementId: obj.element.id,
	            recordsShown: obj.records.count(),
	            recordsQueryCount: settings.dataset.queryRecordCount,
	            recordsTotal: settings.dataset.totalRecordCount,
	            collectionName: settings.params.records === "_root" ? "records" : settings.params.records,
	            text: settings.inputs.recordCountText
	          };

	      if (settings.features.paginate) {

	        // If currently displayed records are a subset (page) of the entire collection
	        if (options.recordsShown < options.recordsQueryCount) {
	          var bounds = obj.records.pageBounds();
	          options.pageLowerBound = bounds[0] + 1;
	          options.pageUpperBound = bounds[1];
	          pageTemplate = settings.inputs.recordCountPageBoundTemplate;

	        // Else if currently displayed records are the entire collection
	        } else if (options.recordsShown === options.recordsQueryCount) {
	          pageTemplate = settings.inputs.recordCountPageUnboundedTemplate;
	        }
	      }

	      // If collection for table is queried subset of collection
	      if (options.recordsQueryCount < options.recordsTotal) {
	        filteredTemplate = settings.inputs.recordCountFilteredTemplate;
	      }

	      // Populate templates with options
	      options.pageTemplate = utility.template(pageTemplate, options);
	      options.filteredTemplate = utility.template(filteredTemplate, options);
	      options.totalTemplate = utility.template(settings.inputs.recordCountTotalTemplate, options);
	      options.textTemplate = utility.template(settings.inputs.recordCountTextTemplate, options);

	      return utility.template(settings.inputs.recordCountTemplate, options);
	    };

	    this.attach = function() {
	      var $target = settings.inputs.recordCountTarget ? $(settings.inputs.recordCountTarget) : obj.$element;
	      $target[settings.inputs.recordCountPlacement](this.create());
	    };
	  };

	  function ProcessingIndicator(obj, settings) {
	    this.init = function() {
	      this.attach();
	    };

	    this.create = function() {
	      var $processing = $('<div></div>', {
	            html: '<span>' + settings.inputs.processingText + '</span>',
	            id: 'dynatable-processing-' + obj.element.id,
	            'class': 'dynatable-processing',
	            style: 'position: absolute; display: none;'
	          });

	      return $processing;
	    };

	    this.position = function() {
	      var $processing = $('#dynatable-processing-' + obj.element.id),
	          $span = $processing.children('span'),
	          spanHeight = $span.outerHeight(),
	          spanWidth = $span.outerWidth(),
	          $covered = obj.$element,
	          offset = $covered.offset(),
	          height = $covered.outerHeight(), width = $covered.outerWidth();

	      $processing
	        .offset({left: offset.left, top: offset.top})
	        .width(width)
	        .height(height)
	      $span
	        .offset({left: offset.left + ( (width - spanWidth) / 2 ), top: offset.top + ( (height - spanHeight) / 2 )});

	      return $processing;
	    };

	    this.attach = function() {
	      obj.$element.before(this.create());
	    };

	    this.show = function() {
	      $('#dynatable-processing-' + obj.element.id).show();
	      this.position();
	    };

	    this.hide = function() {
	      $('#dynatable-processing-' + obj.element.id).hide();
	    };
	  };

	  function State(obj, settings) {
	    this.initOnLoad = function() {
	      // Check if pushState option is true, and if browser supports it
	      return settings.features.pushState && history.pushState;
	    };

	    this.init = function() {
	      window.onpopstate = function(event) {
	        if (event.state && event.state.dynatable) {
	          obj.state.pop(event);
	        }
	      }
	    };

	    this.push = function(data) {
	      var urlString = window.location.search,
	          urlOptions,
	          path,
	          params,
	          hash,
	          newParams,
	          cacheStr,
	          cache,
	          // replaceState on initial load, then pushState after that
	          firstPush = !(window.history.state && window.history.state.dynatable),
	          pushFunction = firstPush ? 'replaceState' : 'pushState';

	      if (urlString && /^\?/.test(urlString)) { urlString = urlString.substring(1); }
	      $.extend(urlOptions, data);

	      params = utility.refreshQueryString(urlString, data, settings);
	      if (params) { params = '?' + params; }
	      hash = window.location.hash;
	      path = window.location.pathname;

	      obj.$element.trigger('dynatable:push', data);

	      cache = { dynatable: { dataset: settings.dataset } };
	      if (!firstPush) { cache.dynatable.scrollTop = $(window).scrollTop(); }
	      cacheStr = JSON.stringify(cache);

	      // Mozilla has a 640k char limit on what can be stored in pushState.
	      // See "limit" in https://developer.mozilla.org/en/DOM/Manipulating_the_browser_history#The_pushState().C2.A0method
	      // and "dataStr.length" in http://wine.git.sourceforge.net/git/gitweb.cgi?p=wine/wine-gecko;a=patch;h=43a11bdddc5fc1ff102278a120be66a7b90afe28
	      //
	      // Likewise, other browsers may have varying (undocumented) limits.
	      // Also, Firefox's limit can be changed in about:config as browser.history.maxStateObjectSize
	      // Since we don't know what the actual limit will be in any given situation, we'll just try caching and rescue
	      // any exceptions by retrying pushState without caching the records.
	      //
	      // I have absolutely no idea why perPageOptions suddenly becomes an array-like object instead of an array,
	      // but just recently, this started throwing an error if I don't convert it:
	      // 'Uncaught Error: DATA_CLONE_ERR: DOM Exception 25'
	      cache.dynatable.dataset.perPageOptions = $.makeArray(cache.dynatable.dataset.perPageOptions);

	      try {
	        window.history[pushFunction](cache, "Dynatable state", path + params + hash);
	      } catch(error) {
	        // Make cached records = null, so that `pop` will rerun process to retrieve records
	        cache.dynatable.dataset.records = null;
	        window.history[pushFunction](cache, "Dynatable state", path + params + hash);
	      }
	    };

	    this.pop = function(event) {
	      var data = event.state.dynatable;
	      settings.dataset = data.dataset;

	      if (data.scrollTop) { $(window).scrollTop(data.scrollTop); }

	      // If dataset.records is cached from pushState
	      if ( data.dataset.records ) {
	        obj.dom.update();
	      } else {
	        obj.process(true);
	      }
	    };
	  };

	  function Sorts(obj, settings) {
	    this.initOnLoad = function() {
	      return settings.features.sort;
	    };

	    this.init = function() {
	      var sortsUrl = window.location.search.match(new RegExp(settings.params.sorts + '[^&=]*=[^&]*', 'g'));
	      if (sortsUrl) {
	        settings.dataset.sorts = utility.deserialize(sortsUrl)[settings.params.sorts];
	      }
	      if (!settings.dataset.sortsKeys.length) {
	        settings.dataset.sortsKeys = utility.keysFromObject(settings.dataset.sorts);
	      }
	    };

	    this.add = function(attr, direction) {
	      var sortsKeys = settings.dataset.sortsKeys,
	          index = $.inArray(attr, sortsKeys);
	      settings.dataset.sorts[attr] = direction;
	      obj.$element.trigger('dynatable:sorts:added', [attr, direction]);
	      if (index === -1) { sortsKeys.push(attr); }
	      return dt;
	    };

	    this.remove = function(attr) {
	      var sortsKeys = settings.dataset.sortsKeys,
	          index = $.inArray(attr, sortsKeys);
	      delete settings.dataset.sorts[attr];
	      obj.$element.trigger('dynatable:sorts:removed', attr);
	      if (index !== -1) { sortsKeys.splice(index, 1); }
	      return dt;
	    };

	    this.clear = function() {
	      settings.dataset.sorts = {};
	      settings.dataset.sortsKeys.length = 0;
	      obj.$element.trigger('dynatable:sorts:cleared');
	    };

	    // Try to intelligently guess which sort function to use
	    // based on the type of attribute values.
	    // Consider using something more robust than `typeof` (http://javascriptweblog.wordpress.com/2011/08/08/fixing-the-javascript-typeof-operator/)
	    this.guessType = function(a, b, attr) {
	      var types = {
	            string: 'string',
	            number: 'number',
	            'boolean': 'number',
	            object: 'number' // dates and null values are also objects, this works...
	          },
	          attrType = a[attr] ? typeof(a[attr]) : typeof(b[attr]),
	          type = types[attrType] || 'number';
	      return type;
	    };

	    // Built-in sort functions
	    // (the most common use-cases I could think of)
	    this.functions = {
	      number: function(a, b, attr, direction) {
	        return a[attr] === b[attr] ? 0 : (direction > 0 ? a[attr] - b[attr] : b[attr] - a[attr]);
	      },
	      string: function(a, b, attr, direction) {
	        var aAttr = (a['dynatable-sortable-text'] && a['dynatable-sortable-text'][attr]) ? a['dynatable-sortable-text'][attr] : a[attr],
	            bAttr = (b['dynatable-sortable-text'] && b['dynatable-sortable-text'][attr]) ? b['dynatable-sortable-text'][attr] : b[attr],
	            comparison;
	        aAttr = aAttr.toLowerCase();
	        bAttr = bAttr.toLowerCase();
	        comparison = aAttr === bAttr ? 0 : (direction > 0 ? aAttr > bAttr : bAttr > aAttr);
	        // force false boolean value to -1, true to 1, and tie to 0
	        return comparison === false ? -1 : (comparison - 0);
	      },
	      originalPlacement: function(a, b) {
	        return a['dynatable-original-index'] - b['dynatable-original-index'];
	      }
	    };
	  };

	  // turn table headers into links which add sort to sorts array
	  function SortsHeaders(obj, settings) {
	    var _this = this;

	    this.initOnLoad = function() {
	      return settings.features.sort;
	    };

	    this.init = function() {
	      this.attach();
	    };

	    this.create = function(cell) {
	      var $cell = $(cell),
	          $link = $('<a></a>', {
	            'class': 'dynatable-sort-header',
	            href: '#',
	            html: $cell.html()
	          }),
	          id = $cell.data('dynatable-column'),
	          column = utility.findObjectInArray(settings.table.columns, {id: id});

	      $link.bind('click', function(e) {
	        _this.toggleSort(e, $link, column);
	        obj.process();

	        e.preventDefault();
	      });

	      if (this.sortedByColumn($link, column)) {
	        if (this.sortedByColumnValue(column) == 1) {
	          this.appendArrowUp($link);
	        } else {
	          this.appendArrowDown($link);
	        }
	      }

	      return $link;
	    };

	    this.removeAll = function() {
	      obj.$element.find(settings.table.headRowSelector).children('th,td').each(function(){
	        _this.removeAllArrows();
	        _this.removeOne(this);
	      });
	    };

	    this.removeOne = function(cell) {
	      var $cell = $(cell),
	          $link = $cell.find('.dynatable-sort-header');
	      if ($link.length) {
	        var html = $link.html();
	        $link.remove();
	        $cell.html($cell.html() + html);
	      }
	    };

	    this.attach = function() {
	      obj.$element.find(settings.table.headRowSelector).children('th,td').each(function(){
	        _this.attachOne(this);
	      });
	    };

	    this.attachOne = function(cell) {
	      var $cell = $(cell);
	      if (!$cell.data('dynatable-no-sort')) {
	        $cell.html(this.create(cell));
	      }
	    };

	    this.appendArrowUp = function($link) {
	      this.removeArrow($link);
	      $link.append("<span class='dynatable-arrow'> &#9650;</span>");
	    };

	    this.appendArrowDown = function($link) {
	      this.removeArrow($link);
	      $link.append("<span class='dynatable-arrow'> &#9660;</span>");
	    };

	    this.removeArrow = function($link) {
	      // Not sure why `parent()` is needed, the arrow should be inside the link from `append()` above
	      $link.find('.dynatable-arrow').remove();
	    };

	    this.removeAllArrows = function() {
	      obj.$element.find('.dynatable-arrow').remove();
	    };

	    this.toggleSort = function(e, $link, column) {
	      var sortedByColumn = this.sortedByColumn($link, column),
	          value = this.sortedByColumnValue(column);
	      // Clear existing sorts unless this is a multisort event
	      if (!settings.inputs.multisort || !utility.anyMatch(e, settings.inputs.multisort, function(evt, key) { return e[key]; })) {
	        this.removeAllArrows();
	        obj.sorts.clear();
	      }

	      // If sorts for this column are already set
	      if (sortedByColumn) {
	        // If ascending, then make descending
	        if (value == 1) {
	          for (var i = 0, len = column.sorts.length; i < len; i++) {
	            obj.sorts.add(column.sorts[i], -1);
	          }
	          this.appendArrowDown($link);
	        // If descending, remove sort
	        } else {
	          for (var i = 0, len = column.sorts.length; i < len; i++) {
	            obj.sorts.remove(column.sorts[i]);
	          }
	          this.removeArrow($link);
	        }
	      // Otherwise, if not already set, set to ascending
	      } else {
	        for (var i = 0, len = column.sorts.length; i < len; i++) {
	          obj.sorts.add(column.sorts[i], 1);
	        }
	        this.appendArrowUp($link);
	      }
	    };

	    this.sortedByColumn = function($link, column) {
	      return utility.allMatch(settings.dataset.sorts, column.sorts, function(sorts, sort) { return sort in sorts; });
	    };

	    this.sortedByColumnValue = function(column) {
	      return settings.dataset.sorts[column.sorts[0]];
	    };
	  };

	  function Queries(obj, settings) {
	    var _this = this;

	    this.initOnLoad = function() {
	      return settings.inputs.queries || settings.features.search;
	    };

	    this.init = function() {
	      var queriesUrl = window.location.search.match(new RegExp(settings.params.queries + '[^&=]*=[^&]*', 'g'));

	      settings.dataset.queries = queriesUrl ? utility.deserialize(queriesUrl)[settings.params.queries] : {};
	      if (settings.dataset.queries === "") { settings.dataset.queries = {}; }

	      if (settings.inputs.queries) {
	        this.setupInputs();
	      }
	    };

	    this.add = function(name, value) {
	      // reset to first page since query will change records
	      if (settings.features.paginate) {
	        settings.dataset.page = 1;
	      }
	      settings.dataset.queries[name] = value;
	      obj.$element.trigger('dynatable:queries:added', [name, value]);
	      return dt;
	    };

	    this.remove = function(name) {
	      delete settings.dataset.queries[name];
	      obj.$element.trigger('dynatable:queries:removed', name);
	      return dt;
	    };

	    this.run = function() {
	      for (query in settings.dataset.queries) {
	        if (settings.dataset.queries.hasOwnProperty(query)) {
	          var value = settings.dataset.queries[query];
	          if (_this.functions[query] === undefined) {
	            // Try to lazily evaluate query from column names if not explicitly defined
	            var queryColumn = utility.findObjectInArray(settings.table.columns, {id: query});
	            if (queryColumn) {
	              _this.functions[query] = function(record, queryValue) {
	                return record[query] == queryValue;
	              };
	            } else {
	              $.error("Query named '" + query + "' called, but not defined in queries.functions");
	              continue; // to skip to next query
	            }
	          }
	          // collect all records that return true for query
	          settings.dataset.records = $.map(settings.dataset.records, function(record) {
	            return _this.functions[query](record, value) ? record : null;
	          });
	        }
	      }
	      settings.dataset.queryRecordCount = obj.records.count();
	    };

	    // Shortcut for performing simple query from built-in search
	    this.runSearch = function(q) {
	      var origQueries = $.extend({}, settings.dataset.queries);
	      if (q) {
	        this.add('search', q);
	      } else {
	        this.remove('search');
	      }
	      if (!utility.objectsEqual(settings.dataset.queries, origQueries)) {
	        obj.process();
	      }
	    };

	    this.setupInputs = function() {
	      settings.inputs.queries.each(function() {
	        var $this = $(this),
	            event = $this.data('dynatable-query-event') || settings.inputs.queryEvent,
	            query = $this.data('dynatable-query') || $this.attr('name') || this.id,
	            queryFunction = function(e) {
	              var q = $(this).val();
	              if (q === "") { q = undefined; }
	              if (q === settings.dataset.queries[query]) { return false; }
	              if (q) {
	                _this.add(query, q);
	              } else {
	                _this.remove(query);
	              }
	              obj.process();
	              e.preventDefault();
	            };

	        $this
	          .attr('data-dynatable-query', query)
	          .bind(event, queryFunction)
	          .bind('keypress', function(e) {
	            if (e.which == 13) {
	              queryFunction.call(this, e);
	            }
	          });

	        if (settings.dataset.queries[query]) { $this.val(decodeURIComponent(settings.dataset.queries[query])); }
	      });
	    };

	    // Query functions for in-page querying
	    // each function should take a record and a value as input
	    // and output true of false as to whether the record is a match or not
	    this.functions = {
	      search: function(record, queryValue) {
	        var contains = false;
	        // Loop through each attribute of record
	        for (attr in record) {
	          if (record.hasOwnProperty(attr)) {
	            var attrValue = record[attr];
	            if (typeof(attrValue) === "string" && attrValue.toLowerCase().indexOf(queryValue.toLowerCase()) !== -1) {
	              contains = true;
	              // Don't need to keep searching attributes once found
	              break;
	            } else {
	              continue;
	            }
	          }
	        }
	        return contains;
	      }
	    };
	  };

	  function InputsSearch(obj, settings) {
	    var _this = this;

	    this.initOnLoad = function() {
	      return settings.features.search;
	    };

	    this.init = function() {
	      this.attach();
	    };

	    this.create = function() {
	      var $search = $('<input />', {
	            type: 'search',
	            id: 'dynatable-query-search-' + obj.element.id,
	            'data-dynatable-query': 'search',
	            value: settings.dataset.queries.search
	          }),
	          $searchSpan = $('<span></span>', {
	            id: 'dynatable-search-' + obj.element.id,
	            'class': 'dynatable-search',
	            text: settings.inputs.searchText
	          }).append($search);

	      $search
	        .bind(settings.inputs.queryEvent, function() {
	          obj.queries.runSearch($(this).val());
	        })
	        .bind('keypress', function(e) {
	          if (e.which == 13) {
	            obj.queries.runSearch($(this).val());
	            e.preventDefault();
	          }
	        });
	      return $searchSpan;
	    };

	    this.attach = function() {
	      var $target = settings.inputs.searchTarget ? $(settings.inputs.searchTarget) : obj.$element;
	      $target[settings.inputs.searchPlacement](this.create());
	    };
	  };

	  // provide a public function for selecting page
	  function PaginationPage(obj, settings) {
	    this.initOnLoad = function() {
	      return settings.features.paginate;
	    };

	    this.init = function() {
	      var pageUrl = window.location.search.match(new RegExp(settings.params.page + '=([^&]*)'));
	      // If page is present in URL parameters and pushState is enabled
	      // (meaning that it'd be possible for dynatable to have put the
	      // page parameter in the URL)
	      if (pageUrl && settings.features.pushState) {
	        this.set(pageUrl[1]);
	      } else {
	        this.set(1);
	      }
	    };

	    this.set = function(page) {
	      var newPage = parseInt(page, 10);
	      settings.dataset.page = newPage;
	      obj.$element.trigger('dynatable:page:set', newPage);
	    }
	  };

	  function PaginationPerPage(obj, settings) {
	    var _this = this;

	    this.initOnLoad = function() {
	      return settings.features.paginate;
	    };

	    this.init = function() {
	      var perPageUrl = window.location.search.match(new RegExp(settings.params.perPage + '=([^&]*)'));

	      // If perPage is present in URL parameters and pushState is enabled
	      // (meaning that it'd be possible for dynatable to have put the
	      // perPage parameter in the URL)
	      if (perPageUrl && settings.features.pushState) {
	        // Don't reset page to 1 on init, since it might override page
	        // set on init from URL
	        this.set(perPageUrl[1], true);
	      } else {
	        this.set(settings.dataset.perPageDefault, true);
	      }

	      if (settings.features.perPageSelect) {
	        this.attach();
	      }
	    };

	    this.create = function() {
	      var $select = $('<select>', {
	            id: 'dynatable-per-page-' + obj.element.id,
	            'class': 'dynatable-per-page-select'
	          });

	      for (var i = 0, len = settings.dataset.perPageOptions.length; i < len; i++) {
	        var number = settings.dataset.perPageOptions[i],
	            selected = settings.dataset.perPage == number ? 'selected="selected"' : '';
	        $select.append('<option value="' + number + '" ' + selected + '>' + number + '</option>');
	      }

	      $select.bind('change', function(e) {
	        _this.set($(this).val());
	        obj.process();
	      });

	      return $('<span />', {
	        'class': 'dynatable-per-page'
	      }).append("<span class='dynatable-per-page-label'>" + settings.inputs.perPageText + "</span>").append($select);
	    };

	    this.attach = function() {
	      var $target = settings.inputs.perPageTarget ? $(settings.inputs.perPageTarget) : obj.$element;
	      $target[settings.inputs.perPagePlacement](this.create());
	    };

	    this.set = function(number, skipResetPage) {
	      var newPerPage = parseInt(number);
	      if (!skipResetPage) { obj.paginationPage.set(1); }
	      settings.dataset.perPage = newPerPage;
	      obj.$element.trigger('dynatable:perPage:set', newPerPage);
	    };
	  };

	  // pagination links which update dataset.page attribute
	  function PaginationLinks(obj, settings) {
	    var _this = this;

	    this.initOnLoad = function() {
	      return settings.features.paginate;
	    };

	    this.init = function() {
	      this.attach();
	    };

	    this.create = function() {
	      var pageLinks = '<ul id="' + 'dynatable-pagination-links-' + obj.element.id + '" class="' + settings.inputs.paginationClass + '">',
	          pageLinkClass = settings.inputs.paginationLinkClass,
	          activePageClass = settings.inputs.paginationActiveClass,
	          disabledPageClass = settings.inputs.paginationDisabledClass,
	          pages = Math.ceil(settings.dataset.queryRecordCount / settings.dataset.perPage),
	          page = settings.dataset.page,
	          breaks = [
	            settings.inputs.paginationGap[0],
	            settings.dataset.page - settings.inputs.paginationGap[1],
	            settings.dataset.page + settings.inputs.paginationGap[2],
	            (pages + 1) - settings.inputs.paginationGap[3]
	          ];

	      pageLinks += '<li><span>' + settings.inputs.pageText + '</span></li>';

	      for (var i = 1; i <= pages; i++) {
	        if ( (i > breaks[0] && i < breaks[1]) || (i > breaks[2] && i < breaks[3])) {
	          // skip to next iteration in loop
	          continue;
	        } else {
	          var li = obj.paginationLinks.buildLink(i, i, pageLinkClass, page == i, activePageClass),
	              breakIndex,
	              nextBreak;

	          // If i is not between one of the following
	          // (1 + (settings.paginationGap[0]))
	          // (page - settings.paginationGap[1])
	          // (page + settings.paginationGap[2])
	          // (pages - settings.paginationGap[3])
	          breakIndex = $.inArray(i, breaks);
	          nextBreak = breaks[breakIndex + 1];
	          if (breakIndex > 0 && i !== 1 && nextBreak && nextBreak > (i + 1)) {
	            var ellip = '<li><span class="dynatable-page-break">&hellip;</span></li>';
	            li = breakIndex < 2 ? ellip + li : li + ellip;
	          }

	          if (settings.inputs.paginationPrev && i === 1) {
	            var prevLi = obj.paginationLinks.buildLink(page - 1, settings.inputs.paginationPrev, pageLinkClass + ' ' + settings.inputs.paginationPrevClass, page === 1, disabledPageClass);
	            li = prevLi + li;
	          }
	          if (settings.inputs.paginationNext && i === pages) {
	            var nextLi = obj.paginationLinks.buildLink(page + 1, settings.inputs.paginationNext, pageLinkClass + ' ' + settings.inputs.paginationNextClass, page === pages, disabledPageClass);
	            li += nextLi;
	          }

	          pageLinks += li;
	        }
	      }

	      pageLinks += '</ul>';

	      // only bind page handler to non-active and non-disabled page links
	      var selector = '#dynatable-pagination-links-' + obj.element.id + ' a.' + pageLinkClass + ':not(.' + activePageClass + ',.' + disabledPageClass + ')';
	      // kill any existing delegated-bindings so they don't stack up
	      $(document).undelegate(selector, 'click.dynatable');
	      $(document).delegate(selector, 'click.dynatable', function(e) {
	        $this = $(this);
	        $this.closest(settings.inputs.paginationClass).find('.' + activePageClass).removeClass(activePageClass);
	        $this.addClass(activePageClass);

	        obj.paginationPage.set($this.data('dynatable-page'));
	        obj.process();
	        e.preventDefault();
	      });

	      return pageLinks;
	    };

	    this.buildLink = function(page, label, linkClass, conditional, conditionalClass) {
	      var link = '<a data-dynatable-page=' + page + ' class="' + linkClass,
	          li = '<li';

	      if (conditional) {
	        link += ' ' + conditionalClass;
	        li += ' class="' + conditionalClass + '"';
	      }

	      link += '">' + label + '</a>';
	      li += '>' + link + '</li>';

	      return li;
	    };

	    this.attach = function() {
	      // append page links *after* delegate-event-binding so it doesn't need to
	      // find and select all page links to bind event
	      var $target = settings.inputs.paginationLinkTarget ? $(settings.inputs.paginationLinkTarget) : obj.$element;
	      $target[settings.inputs.paginationLinkPlacement](obj.paginationLinks.create());
	    };
	  };

	  utility = dt.utility = {
	    normalizeText: function(text, style) {
	      text = this.textTransform[style](text);
	      return text;
	    },
	    textTransform: {
	      trimDash: function(text) {
	        return text.replace(/^\s+|\s+$/g, "").replace(/\s+/g, "-");
	      },
	      camelCase: function(text) {
	        text = this.trimDash(text);
	        return text
	          .replace(/(\-[a-zA-Z])/g, function($1){return $1.toUpperCase().replace('-','');})
	          .replace(/([A-Z])([A-Z]+)/g, function($1,$2,$3){return $2 + $3.toLowerCase();})
	          .replace(/^[A-Z]/, function($1){return $1.toLowerCase();});
	      },
	      dashed: function(text) {
	        text = this.trimDash(text);
	        return this.lowercase(text);
	      },
	      underscore: function(text) {
	        text = this.trimDash(text);
	        return this.lowercase(text.replace(/(-)/g, '_'));
	      },
	      lowercase: function(text) {
	        return text.replace(/([A-Z])/g, function($1){return $1.toLowerCase();});
	      }
	    },
	    // Deserialize params in URL to object
	    // see http://stackoverflow.com/questions/1131630/javascript-jquery-param-inverse-function/3401265#3401265
	    deserialize: function(query) {
	      if (!query) return {};
	      // modified to accept an array of partial URL strings
	      if (typeof(query) === "object") { query = query.join('&'); }

	      var hash = {},
	          vars = query.split("&");

	      for (var i = 0; i < vars.length; i++) {
	        var pair = vars[i].split("="),
	            k = decodeURIComponent(pair[0]),
	            v, m;

	        if (!pair[1]) { continue };
	        v = decodeURIComponent(pair[1].replace(/\+/g, ' '));

	        // modified to parse multi-level parameters (e.g. "hi[there][dude]=whatsup" => hi: {there: {dude: "whatsup"}})
	        while (m = k.match(/([^&=]+)\[([^&=]+)\]$/)) {
	          var origV = v;
	          k = m[1];
	          v = {};

	          // If nested param ends in '][', then the regex above erroneously included half of a trailing '[]',
	          // which indicates the end-value is part of an array
	          if (m[2].substr(m[2].length-2) == '][') { // must use substr for IE to understand it
	            v[m[2].substr(0,m[2].length-2)] = [origV];
	          } else {
	            v[m[2]] = origV;
	          }
	        }

	        // If it is the first entry with this name
	        if (typeof hash[k] === "undefined") {
	          if (k.substr(k.length-2) != '[]') { // not end with []. cannot use negative index as IE doesn't understand it
	            hash[k] = v;
	          } else {
	            hash[k] = [v];
	          }
	        // If subsequent entry with this name and not array
	        } else if (typeof hash[k] === "string") {
	          hash[k] = v;  // replace it
	        // modified to add support for objects
	        } else if (typeof hash[k] === "object") {
	          hash[k] = $.extend({}, hash[k], v);
	        // If subsequent entry with this name and is array
	        } else {
	          hash[k].push(v);
	        }
	      }
	      return hash;
	    },
	    refreshQueryString: function(urlString, data, settings) {
	      var _this = this,
	          queryString = urlString.split('?'),
	          path = queryString.shift(),
	          urlOptions;

	      urlOptions = this.deserialize(urlString);

	      // Loop through each dynatable param and update the URL with it
	      for (attr in settings.params) {
	        if (settings.params.hasOwnProperty(attr)) {
	          var label = settings.params[attr];
	          // Skip over parameters matching attributes for disabled features (i.e. leave them untouched),
	          // because if the feature is turned off, then parameter name is a coincidence and it's unrelated to dynatable.
	          if (
	            (!settings.features.sort && attr == "sorts") ||
	              (!settings.features.paginate && _this.anyMatch(attr, ["page", "perPage", "offset"], function(attr, param) { return attr == param; }))
	          ) {
	            continue;
	          }

	          // Delete page and offset from url params if on page 1 (default)
	          if ((attr === "page" || attr === "offset") && data["page"] === 1) {
	            if (urlOptions[label]) {
	              delete urlOptions[label];
	            }
	            continue;
	          }

	          // Delete perPage from url params if default perPage value
	          if (attr === "perPage" && data[label] == settings.dataset.perPageDefault) {
	            if (urlOptions[label]) {
	              delete urlOptions[label];
	            }
	            continue;
	          }

	          // For queries, we're going to handle each possible query parameter individually here instead of
	          // handling the entire queries object below, since we need to make sure that this is a query controlled by dynatable.
	          if (attr == "queries" && data[label]) {
	            var queries = settings.inputs.queries || [],
	                inputQueries = $.makeArray(queries.map(function() { return $(this).attr('name') }));

	            if (settings.features.search) { inputQueries.push('search'); }

	            for (var i = 0, len = inputQueries.length; i < len; i++) {
	              var attr = inputQueries[i];
	              if (data[label][attr]) {
	                if (typeof urlOptions[label] === 'undefined') { urlOptions[label] = {}; }
	                urlOptions[label][attr] = data[label][attr];
	              } else {
	                if (urlOptions && urlOptions[label] && urlOptions[label][attr]) { delete urlOptions[label][attr]; }
	              }
	            }
	            continue;
	          }

	          // If we haven't returned true by now, then we actually want to update the parameter in the URL
	          if (data[label]) {
	            urlOptions[label] = data[label];
	          } else {
	            delete urlOptions[label];
	          }
	        }
	      }
	      return $.param(urlOptions);
	    },
	    // Get array of keys from object
	    // see http://stackoverflow.com/questions/208016/how-to-list-the-properties-of-a-javascript-object/208020#208020
	    keysFromObject: function(obj){
	      var keys = [];
	      for (var key in obj){
	        keys.push(key);
	      }
	      return keys;
	    },
	    // Find an object in an array of objects by attributes.
	    // E.g. find object with {id: 'hi', name: 'there'} in an array of objects
	    findObjectInArray: function(array, objectAttr) {
	      var _this = this,
	          foundObject;
	      for (var i = 0, len = array.length; i < len; i++) {
	        var item = array[i];
	        // For each object in array, test to make sure all attributes in objectAttr match
	        if (_this.allMatch(item, objectAttr, function(item, key, value) { return item[key] == value; })) {
	          foundObject = item;
	          break;
	        }
	      }
	      return foundObject;
	    },
	    // Return true if supplied test function passes for ALL items in an array
	    allMatch: function(item, arrayOrObject, test) {
	      // start off with true result by default
	      var match = true,
	          isArray = $.isArray(arrayOrObject);
	      // Loop through all items in array
	      $.each(arrayOrObject, function(key, value) {
	        var result = isArray ? test(item, value) : test(item, key, value);
	        // If a single item tests false, go ahead and break the array by returning false
	        // and return false as result,
	        // otherwise, continue with next iteration in loop
	        // (if we make it through all iterations without overriding match with false,
	        // then we can return the true result we started with by default)
	        if (!result) { return match = false; }
	      });
	      return match;
	    },
	    // Return true if supplied test function passes for ANY items in an array
	    anyMatch: function(item, arrayOrObject, test) {
	      var match = false,
	          isArray = $.isArray(arrayOrObject);

	      $.each(arrayOrObject, function(key, value) {
	        var result = isArray ? test(item, value) : test(item, key, value);
	        if (result) {
	          // As soon as a match is found, set match to true, and return false to stop the `$.each` loop
	          match = true;
	          return false;
	        }
	      });
	      return match;
	    },
	    // Return true if two objects are equal
	    // (i.e. have the same attributes and attribute values)
	    objectsEqual: function(a, b) {
	      for (attr in a) {
	        if (a.hasOwnProperty(attr)) {
	          if (!b.hasOwnProperty(attr) || a[attr] !== b[attr]) {
	            return false;
	          }
	        }
	      }
	      for (attr in b) {
	        if (b.hasOwnProperty(attr) && !a.hasOwnProperty(attr)) {
	          return false;
	        }
	      }
	      return true;
	    },
	    // Taken from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/105074#105074
	    randomHash: function() {
	      return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
	    },
	    // Adapted from http://stackoverflow.com/questions/377961/efficient-javascript-string-replacement/378001#378001
	    template: function(str, data) {
	      return str.replace(/{(\w*)}/g, function(match, key) {
	        return data.hasOwnProperty(key) ? data[key] : "";
	      });
	    }
	  };

	  //-----------------------------------------------------------------
	  // Build the dynatable plugin
	  //-----------------------------------------------------------------

	  // Object.create support test, and fallback for browsers without it
	  if ( typeof Object.create !== "function" ) {
	    Object.create = function (o) {
	      function F() {}
	      F.prototype = o;
	      return new F();
	    };
	  }

	  //-----------------------------------------------------------------
	  // Global dynatable plugin setting defaults
	  //-----------------------------------------------------------------

	  $.dynatableSetup = function(options) {
	    defaults = mergeSettings(options);
	  };

	  // Create dynatable plugin based on a defined object
	  $.dynatable = function( object ) {
	    $.fn['dynatable'] = function( options ) {
	      return this.each(function() {
	        if ( ! $.data( this, 'dynatable' ) ) {
	          $.data( this, 'dynatable', Object.create(object).init(this, options) );
	        }
	      });
	    };
	  };

	  $.dynatable(dt);

	})(jQuery);


/***/ },
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */,
/* 110 */,
/* 111 */,
/* 112 */,
/* 113 */,
/* 114 */,
/* 115 */,
/* 116 */,
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */,
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */,
/* 126 */,
/* 127 */,
/* 128 */,
/* 129 */,
/* 130 */,
/* 131 */,
/* 132 */,
/* 133 */,
/* 134 */,
/* 135 */,
/* 136 */,
/* 137 */,
/* 138 */,
/* 139 */,
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	(function(exports){
	crossfilter.version = "1.3.11";
	function crossfilter_identity(d) {
	  return d;
	}
	crossfilter.permute = permute;

	function permute(array, index) {
	  for (var i = 0, n = index.length, copy = new Array(n); i < n; ++i) {
	    copy[i] = array[index[i]];
	  }
	  return copy;
	}
	var bisect = crossfilter.bisect = bisect_by(crossfilter_identity);

	bisect.by = bisect_by;

	function bisect_by(f) {

	  // Locate the insertion point for x in a to maintain sorted order. The
	  // arguments lo and hi may be used to specify a subset of the array which
	  // should be considered; by default the entire array is used. If x is already
	  // present in a, the insertion point will be before (to the left of) any
	  // existing entries. The return value is suitable for use as the first
	  // argument to `array.splice` assuming that a is already sorted.
	  //
	  // The returned insertion point i partitions the array a into two halves so
	  // that all v < x for v in a[lo:i] for the left side and all v >= x for v in
	  // a[i:hi] for the right side.
	  function bisectLeft(a, x, lo, hi) {
	    while (lo < hi) {
	      var mid = lo + hi >>> 1;
	      if (f(a[mid]) < x) lo = mid + 1;
	      else hi = mid;
	    }
	    return lo;
	  }

	  // Similar to bisectLeft, but returns an insertion point which comes after (to
	  // the right of) any existing entries of x in a.
	  //
	  // The returned insertion point i partitions the array into two halves so that
	  // all v <= x for v in a[lo:i] for the left side and all v > x for v in
	  // a[i:hi] for the right side.
	  function bisectRight(a, x, lo, hi) {
	    while (lo < hi) {
	      var mid = lo + hi >>> 1;
	      if (x < f(a[mid])) hi = mid;
	      else lo = mid + 1;
	    }
	    return lo;
	  }

	  bisectRight.right = bisectRight;
	  bisectRight.left = bisectLeft;
	  return bisectRight;
	}
	var heap = crossfilter.heap = heap_by(crossfilter_identity);

	heap.by = heap_by;

	function heap_by(f) {

	  // Builds a binary heap within the specified array a[lo:hi]. The heap has the
	  // property such that the parent a[lo+i] is always less than or equal to its
	  // two children: a[lo+2*i+1] and a[lo+2*i+2].
	  function heap(a, lo, hi) {
	    var n = hi - lo,
	        i = (n >>> 1) + 1;
	    while (--i > 0) sift(a, i, n, lo);
	    return a;
	  }

	  // Sorts the specified array a[lo:hi] in descending order, assuming it is
	  // already a heap.
	  function sort(a, lo, hi) {
	    var n = hi - lo,
	        t;
	    while (--n > 0) t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);
	    return a;
	  }

	  // Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous
	  // slice of array a[lo:lo+n]. This method can also be used to update the heap
	  // incrementally, without incurring the full cost of reconstructing the heap.
	  function sift(a, i, n, lo) {
	    var d = a[--lo + i],
	        x = f(d),
	        child;
	    while ((child = i << 1) <= n) {
	      if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;
	      if (x <= f(a[lo + child])) break;
	      a[lo + i] = a[lo + child];
	      i = child;
	    }
	    a[lo + i] = d;
	  }

	  heap.sort = sort;
	  return heap;
	}
	var heapselect = crossfilter.heapselect = heapselect_by(crossfilter_identity);

	heapselect.by = heapselect_by;

	function heapselect_by(f) {
	  var heap = heap_by(f);

	  // Returns a new array containing the top k elements in the array a[lo:hi].
	  // The returned array is not sorted, but maintains the heap property. If k is
	  // greater than hi - lo, then fewer than k elements will be returned. The
	  // order of elements in a is unchanged by this operation.
	  function heapselect(a, lo, hi, k) {
	    var queue = new Array(k = Math.min(hi - lo, k)),
	        min,
	        i,
	        x,
	        d;

	    for (i = 0; i < k; ++i) queue[i] = a[lo++];
	    heap(queue, 0, k);

	    if (lo < hi) {
	      min = f(queue[0]);
	      do {
	        if (x = f(d = a[lo]) > min) {
	          queue[0] = d;
	          min = f(heap(queue, 0, k)[0]);
	        }
	      } while (++lo < hi);
	    }

	    return queue;
	  }

	  return heapselect;
	}
	var insertionsort = crossfilter.insertionsort = insertionsort_by(crossfilter_identity);

	insertionsort.by = insertionsort_by;

	function insertionsort_by(f) {

	  function insertionsort(a, lo, hi) {
	    for (var i = lo + 1; i < hi; ++i) {
	      for (var j = i, t = a[i], x = f(t); j > lo && f(a[j - 1]) > x; --j) {
	        a[j] = a[j - 1];
	      }
	      a[j] = t;
	    }
	    return a;
	  }

	  return insertionsort;
	}
	// Algorithm designed by Vladimir Yaroslavskiy.
	// Implementation based on the Dart project; see lib/dart/LICENSE for details.

	var quicksort = crossfilter.quicksort = quicksort_by(crossfilter_identity);

	quicksort.by = quicksort_by;

	function quicksort_by(f) {
	  var insertionsort = insertionsort_by(f);

	  function sort(a, lo, hi) {
	    return (hi - lo < quicksort_sizeThreshold
	        ? insertionsort
	        : quicksort)(a, lo, hi);
	  }

	  function quicksort(a, lo, hi) {
	    // Compute the two pivots by looking at 5 elements.
	    var sixth = (hi - lo) / 6 | 0,
	        i1 = lo + sixth,
	        i5 = hi - 1 - sixth,
	        i3 = lo + hi - 1 >> 1,  // The midpoint.
	        i2 = i3 - sixth,
	        i4 = i3 + sixth;

	    var e1 = a[i1], x1 = f(e1),
	        e2 = a[i2], x2 = f(e2),
	        e3 = a[i3], x3 = f(e3),
	        e4 = a[i4], x4 = f(e4),
	        e5 = a[i5], x5 = f(e5);

	    var t;

	    // Sort the selected 5 elements using a sorting network.
	    if (x1 > x2) t = e1, e1 = e2, e2 = t, t = x1, x1 = x2, x2 = t;
	    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;
	    if (x1 > x3) t = e1, e1 = e3, e3 = t, t = x1, x1 = x3, x3 = t;
	    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;
	    if (x1 > x4) t = e1, e1 = e4, e4 = t, t = x1, x1 = x4, x4 = t;
	    if (x3 > x4) t = e3, e3 = e4, e4 = t, t = x3, x3 = x4, x4 = t;
	    if (x2 > x5) t = e2, e2 = e5, e5 = t, t = x2, x2 = x5, x5 = t;
	    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;
	    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;

	    var pivot1 = e2, pivotValue1 = x2,
	        pivot2 = e4, pivotValue2 = x4;

	    // e2 and e4 have been saved in the pivot variables. They will be written
	    // back, once the partitioning is finished.
	    a[i1] = e1;
	    a[i2] = a[lo];
	    a[i3] = e3;
	    a[i4] = a[hi - 1];
	    a[i5] = e5;

	    var less = lo + 1,   // First element in the middle partition.
	        great = hi - 2;  // Last element in the middle partition.

	    // Note that for value comparison, <, <=, >= and > coerce to a primitive via
	    // Object.prototype.valueOf; == and === do not, so in order to be consistent
	    // with natural order (such as for Date objects), we must do two compares.
	    var pivotsEqual = pivotValue1 <= pivotValue2 && pivotValue1 >= pivotValue2;
	    if (pivotsEqual) {

	      // Degenerated case where the partitioning becomes a dutch national flag
	      // problem.
	      //
	      // [ |  < pivot  | == pivot | unpartitioned | > pivot  | ]
	      //  ^             ^          ^             ^            ^
	      // left         less         k           great         right
	      //
	      // a[left] and a[right] are undefined and are filled after the
	      // partitioning.
	      //
	      // Invariants:
	      //   1) for x in ]left, less[ : x < pivot.
	      //   2) for x in [less, k[ : x == pivot.
	      //   3) for x in ]great, right[ : x > pivot.
	      for (var k = less; k <= great; ++k) {
	        var ek = a[k], xk = f(ek);
	        if (xk < pivotValue1) {
	          if (k !== less) {
	            a[k] = a[less];
	            a[less] = ek;
	          }
	          ++less;
	        } else if (xk > pivotValue1) {

	          // Find the first element <= pivot in the range [k - 1, great] and
	          // put [:ek:] there. We know that such an element must exist:
	          // When k == less, then el3 (which is equal to pivot) lies in the
	          // interval. Otherwise a[k - 1] == pivot and the search stops at k-1.
	          // Note that in the latter case invariant 2 will be violated for a
	          // short amount of time. The invariant will be restored when the
	          // pivots are put into their final positions.
	          while (true) {
	            var greatValue = f(a[great]);
	            if (greatValue > pivotValue1) {
	              great--;
	              // This is the only location in the while-loop where a new
	              // iteration is started.
	              continue;
	            } else if (greatValue < pivotValue1) {
	              // Triple exchange.
	              a[k] = a[less];
	              a[less++] = a[great];
	              a[great--] = ek;
	              break;
	            } else {
	              a[k] = a[great];
	              a[great--] = ek;
	              // Note: if great < k then we will exit the outer loop and fix
	              // invariant 2 (which we just violated).
	              break;
	            }
	          }
	        }
	      }
	    } else {

	      // We partition the list into three parts:
	      //  1. < pivot1
	      //  2. >= pivot1 && <= pivot2
	      //  3. > pivot2
	      //
	      // During the loop we have:
	      // [ | < pivot1 | >= pivot1 && <= pivot2 | unpartitioned  | > pivot2  | ]
	      //  ^            ^                        ^              ^             ^
	      // left         less                     k              great        right
	      //
	      // a[left] and a[right] are undefined and are filled after the
	      // partitioning.
	      //
	      // Invariants:
	      //   1. for x in ]left, less[ : x < pivot1
	      //   2. for x in [less, k[ : pivot1 <= x && x <= pivot2
	      //   3. for x in ]great, right[ : x > pivot2
	      for (var k = less; k <= great; k++) {
	        var ek = a[k], xk = f(ek);
	        if (xk < pivotValue1) {
	          if (k !== less) {
	            a[k] = a[less];
	            a[less] = ek;
	          }
	          ++less;
	        } else {
	          if (xk > pivotValue2) {
	            while (true) {
	              var greatValue = f(a[great]);
	              if (greatValue > pivotValue2) {
	                great--;
	                if (great < k) break;
	                // This is the only location inside the loop where a new
	                // iteration is started.
	                continue;
	              } else {
	                // a[great] <= pivot2.
	                if (greatValue < pivotValue1) {
	                  // Triple exchange.
	                  a[k] = a[less];
	                  a[less++] = a[great];
	                  a[great--] = ek;
	                } else {
	                  // a[great] >= pivot1.
	                  a[k] = a[great];
	                  a[great--] = ek;
	                }
	                break;
	              }
	            }
	          }
	        }
	      }
	    }

	    // Move pivots into their final positions.
	    // We shrunk the list from both sides (a[left] and a[right] have
	    // meaningless values in them) and now we move elements from the first
	    // and third partition into these locations so that we can store the
	    // pivots.
	    a[lo] = a[less - 1];
	    a[less - 1] = pivot1;
	    a[hi - 1] = a[great + 1];
	    a[great + 1] = pivot2;

	    // The list is now partitioned into three partitions:
	    // [ < pivot1   | >= pivot1 && <= pivot2   |  > pivot2   ]
	    //  ^            ^                        ^             ^
	    // left         less                     great        right

	    // Recursive descent. (Don't include the pivot values.)
	    sort(a, lo, less - 1);
	    sort(a, great + 2, hi);

	    if (pivotsEqual) {
	      // All elements in the second partition are equal to the pivot. No
	      // need to sort them.
	      return a;
	    }

	    // In theory it should be enough to call _doSort recursively on the second
	    // partition.
	    // The Android source however removes the pivot elements from the recursive
	    // call if the second partition is too large (more than 2/3 of the list).
	    if (less < i1 && great > i5) {
	      var lessValue, greatValue;
	      while ((lessValue = f(a[less])) <= pivotValue1 && lessValue >= pivotValue1) ++less;
	      while ((greatValue = f(a[great])) <= pivotValue2 && greatValue >= pivotValue2) --great;

	      // Copy paste of the previous 3-way partitioning with adaptions.
	      //
	      // We partition the list into three parts:
	      //  1. == pivot1
	      //  2. > pivot1 && < pivot2
	      //  3. == pivot2
	      //
	      // During the loop we have:
	      // [ == pivot1 | > pivot1 && < pivot2 | unpartitioned  | == pivot2 ]
	      //              ^                      ^              ^
	      //            less                     k              great
	      //
	      // Invariants:
	      //   1. for x in [ *, less[ : x == pivot1
	      //   2. for x in [less, k[ : pivot1 < x && x < pivot2
	      //   3. for x in ]great, * ] : x == pivot2
	      for (var k = less; k <= great; k++) {
	        var ek = a[k], xk = f(ek);
	        if (xk <= pivotValue1 && xk >= pivotValue1) {
	          if (k !== less) {
	            a[k] = a[less];
	            a[less] = ek;
	          }
	          less++;
	        } else {
	          if (xk <= pivotValue2 && xk >= pivotValue2) {
	            while (true) {
	              var greatValue = f(a[great]);
	              if (greatValue <= pivotValue2 && greatValue >= pivotValue2) {
	                great--;
	                if (great < k) break;
	                // This is the only location inside the loop where a new
	                // iteration is started.
	                continue;
	              } else {
	                // a[great] < pivot2.
	                if (greatValue < pivotValue1) {
	                  // Triple exchange.
	                  a[k] = a[less];
	                  a[less++] = a[great];
	                  a[great--] = ek;
	                } else {
	                  // a[great] == pivot1.
	                  a[k] = a[great];
	                  a[great--] = ek;
	                }
	                break;
	              }
	            }
	          }
	        }
	      }
	    }

	    // The second partition has now been cleared of pivot elements and looks
	    // as follows:
	    // [  *  |  > pivot1 && < pivot2  | * ]
	    //        ^                      ^
	    //       less                  great
	    // Sort the second partition using recursive descent.

	    // The second partition looks as follows:
	    // [  *  |  >= pivot1 && <= pivot2  | * ]
	    //        ^                        ^
	    //       less                    great
	    // Simply sort it by recursive descent.

	    return sort(a, less, great + 1);
	  }

	  return sort;
	}

	var quicksort_sizeThreshold = 32;
	var crossfilter_array8 = crossfilter_arrayUntyped,
	    crossfilter_array16 = crossfilter_arrayUntyped,
	    crossfilter_array32 = crossfilter_arrayUntyped,
	    crossfilter_arrayLengthen = crossfilter_arrayLengthenUntyped,
	    crossfilter_arrayWiden = crossfilter_arrayWidenUntyped;

	if (typeof Uint8Array !== "undefined") {
	  crossfilter_array8 = function(n) { return new Uint8Array(n); };
	  crossfilter_array16 = function(n) { return new Uint16Array(n); };
	  crossfilter_array32 = function(n) { return new Uint32Array(n); };

	  crossfilter_arrayLengthen = function(array, length) {
	    if (array.length >= length) return array;
	    var copy = new array.constructor(length);
	    copy.set(array);
	    return copy;
	  };

	  crossfilter_arrayWiden = function(array, width) {
	    var copy;
	    switch (width) {
	      case 16: copy = crossfilter_array16(array.length); break;
	      case 32: copy = crossfilter_array32(array.length); break;
	      default: throw new Error("invalid array width!");
	    }
	    copy.set(array);
	    return copy;
	  };
	}

	function crossfilter_arrayUntyped(n) {
	  var array = new Array(n), i = -1;
	  while (++i < n) array[i] = 0;
	  return array;
	}

	function crossfilter_arrayLengthenUntyped(array, length) {
	  var n = array.length;
	  while (n < length) array[n++] = 0;
	  return array;
	}

	function crossfilter_arrayWidenUntyped(array, width) {
	  if (width > 32) throw new Error("invalid array width!");
	  return array;
	}
	function crossfilter_filterExact(bisect, value) {
	  return function(values) {
	    var n = values.length;
	    return [bisect.left(values, value, 0, n), bisect.right(values, value, 0, n)];
	  };
	}

	function crossfilter_filterRange(bisect, range) {
	  var min = range[0],
	      max = range[1];
	  return function(values) {
	    var n = values.length;
	    return [bisect.left(values, min, 0, n), bisect.left(values, max, 0, n)];
	  };
	}

	function crossfilter_filterAll(values) {
	  return [0, values.length];
	}
	function crossfilter_null() {
	  return null;
	}
	function crossfilter_zero() {
	  return 0;
	}
	function crossfilter_reduceIncrement(p) {
	  return p + 1;
	}

	function crossfilter_reduceDecrement(p) {
	  return p - 1;
	}

	function crossfilter_reduceAdd(f) {
	  return function(p, v) {
	    return p + +f(v);
	  };
	}

	function crossfilter_reduceSubtract(f) {
	  return function(p, v) {
	    return p - f(v);
	  };
	}
	exports.crossfilter = crossfilter;

	function crossfilter() {
	  var crossfilter = {
	    add: add,
	    remove: removeData,
	    dimension: dimension,
	    groupAll: groupAll,
	    size: size
	  };

	  var data = [], // the records
	      n = 0, // the number of records; data.length
	      m = 0, // a bit mask representing which dimensions are in use
	      M = 8, // number of dimensions that can fit in `filters`
	      filters = crossfilter_array8(0), // M bits per record; 1 is filtered out
	      filterListeners = [], // when the filters change
	      dataListeners = [], // when data is added
	      removeDataListeners = []; // when data is removed

	  // Adds the specified new records to this crossfilter.
	  function add(newData) {
	    var n0 = n,
	        n1 = newData.length;

	    // If there's actually new data to add…
	    // Merge the new data into the existing data.
	    // Lengthen the filter bitset to handle the new records.
	    // Notify listeners (dimensions and groups) that new data is available.
	    if (n1) {
	      data = data.concat(newData);
	      filters = crossfilter_arrayLengthen(filters, n += n1);
	      dataListeners.forEach(function(l) { l(newData, n0, n1); });
	    }

	    return crossfilter;
	  }

	  // Removes all records that match the current filters.
	  function removeData() {
	    var newIndex = crossfilter_index(n, n),
	        removed = [];
	    for (var i = 0, j = 0; i < n; ++i) {
	      if (filters[i]) newIndex[i] = j++;
	      else removed.push(i);
	    }

	    // Remove all matching records from groups.
	    filterListeners.forEach(function(l) { l(0, [], removed); });

	    // Update indexes.
	    removeDataListeners.forEach(function(l) { l(newIndex); });

	    // Remove old filters and data by overwriting.
	    for (var i = 0, j = 0, k; i < n; ++i) {
	      if (k = filters[i]) {
	        if (i !== j) filters[j] = k, data[j] = data[i];
	        ++j;
	      }
	    }
	    data.length = j;
	    while (n > j) filters[--n] = 0;
	  }

	  // Adds a new dimension with the specified value accessor function.
	  function dimension(value) {
	    var dimension = {
	      filter: filter,
	      filterExact: filterExact,
	      filterRange: filterRange,
	      filterFunction: filterFunction,
	      filterAll: filterAll,
	      top: top,
	      bottom: bottom,
	      group: group,
	      groupAll: groupAll,
	      dispose: dispose,
	      remove: dispose // for backwards-compatibility
	    };

	    var one = ~m & -~m, // lowest unset bit as mask, e.g., 00001000
	        zero = ~one, // inverted one, e.g., 11110111
	        values, // sorted, cached array
	        index, // value rank ↦ object id
	        newValues, // temporary array storing newly-added values
	        newIndex, // temporary array storing newly-added index
	        sort = quicksort_by(function(i) { return newValues[i]; }),
	        refilter = crossfilter_filterAll, // for recomputing filter
	        refilterFunction, // the custom filter function in use
	        indexListeners = [], // when data is added
	        dimensionGroups = [],
	        lo0 = 0,
	        hi0 = 0;

	    // Updating a dimension is a two-stage process. First, we must update the
	    // associated filters for the newly-added records. Once all dimensions have
	    // updated their filters, the groups are notified to update.
	    dataListeners.unshift(preAdd);
	    dataListeners.push(postAdd);

	    removeDataListeners.push(removeData);

	    // Incorporate any existing data into this dimension, and make sure that the
	    // filter bitset is wide enough to handle the new dimension.
	    m |= one;
	    if (M >= 32 ? !one : m & (1 << M) - 1) {
	      filters = crossfilter_arrayWiden(filters, M <<= 1);
	    }
	    preAdd(data, 0, n);
	    postAdd(data, 0, n);

	    // Incorporates the specified new records into this dimension.
	    // This function is responsible for updating filters, values, and index.
	    function preAdd(newData, n0, n1) {

	      // Permute new values into natural order using a sorted index.
	      newValues = newData.map(value);
	      newIndex = sort(crossfilter_range(n1), 0, n1);
	      newValues = permute(newValues, newIndex);

	      // Bisect newValues to determine which new records are selected.
	      var bounds = refilter(newValues), lo1 = bounds[0], hi1 = bounds[1], i;
	      if (refilterFunction) {
	        for (i = 0; i < n1; ++i) {
	          if (!refilterFunction(newValues[i], i)) filters[newIndex[i] + n0] |= one;
	        }
	      } else {
	        for (i = 0; i < lo1; ++i) filters[newIndex[i] + n0] |= one;
	        for (i = hi1; i < n1; ++i) filters[newIndex[i] + n0] |= one;
	      }

	      // If this dimension previously had no data, then we don't need to do the
	      // more expensive merge operation; use the new values and index as-is.
	      if (!n0) {
	        values = newValues;
	        index = newIndex;
	        lo0 = lo1;
	        hi0 = hi1;
	        return;
	      }

	      var oldValues = values,
	          oldIndex = index,
	          i0 = 0,
	          i1 = 0;

	      // Otherwise, create new arrays into which to merge new and old.
	      values = new Array(n);
	      index = crossfilter_index(n, n);

	      // Merge the old and new sorted values, and old and new index.
	      for (i = 0; i0 < n0 && i1 < n1; ++i) {
	        if (oldValues[i0] < newValues[i1]) {
	          values[i] = oldValues[i0];
	          index[i] = oldIndex[i0++];
	        } else {
	          values[i] = newValues[i1];
	          index[i] = newIndex[i1++] + n0;
	        }
	      }

	      // Add any remaining old values.
	      for (; i0 < n0; ++i0, ++i) {
	        values[i] = oldValues[i0];
	        index[i] = oldIndex[i0];
	      }

	      // Add any remaining new values.
	      for (; i1 < n1; ++i1, ++i) {
	        values[i] = newValues[i1];
	        index[i] = newIndex[i1] + n0;
	      }

	      // Bisect again to recompute lo0 and hi0.
	      bounds = refilter(values), lo0 = bounds[0], hi0 = bounds[1];
	    }

	    // When all filters have updated, notify index listeners of the new values.
	    function postAdd(newData, n0, n1) {
	      indexListeners.forEach(function(l) { l(newValues, newIndex, n0, n1); });
	      newValues = newIndex = null;
	    }

	    function removeData(reIndex) {
	      for (var i = 0, j = 0, k; i < n; ++i) {
	        if (filters[k = index[i]]) {
	          if (i !== j) values[j] = values[i];
	          index[j] = reIndex[k];
	          ++j;
	        }
	      }
	      values.length = j;
	      while (j < n) index[j++] = 0;

	      // Bisect again to recompute lo0 and hi0.
	      var bounds = refilter(values);
	      lo0 = bounds[0], hi0 = bounds[1];
	    }

	    // Updates the selected values based on the specified bounds [lo, hi].
	    // This implementation is used by all the public filter methods.
	    function filterIndexBounds(bounds) {
	      var lo1 = bounds[0],
	          hi1 = bounds[1];

	      if (refilterFunction) {
	        refilterFunction = null;
	        filterIndexFunction(function(d, i) { return lo1 <= i && i < hi1; });
	        lo0 = lo1;
	        hi0 = hi1;
	        return dimension;
	      }

	      var i,
	          j,
	          k,
	          added = [],
	          removed = [];

	      // Fast incremental update based on previous lo index.
	      if (lo1 < lo0) {
	        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {
	          filters[k = index[i]] ^= one;
	          added.push(k);
	        }
	      } else if (lo1 > lo0) {
	        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {
	          filters[k = index[i]] ^= one;
	          removed.push(k);
	        }
	      }

	      // Fast incremental update based on previous hi index.
	      if (hi1 > hi0) {
	        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {
	          filters[k = index[i]] ^= one;
	          added.push(k);
	        }
	      } else if (hi1 < hi0) {
	        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {
	          filters[k = index[i]] ^= one;
	          removed.push(k);
	        }
	      }

	      lo0 = lo1;
	      hi0 = hi1;
	      filterListeners.forEach(function(l) { l(one, added, removed); });
	      return dimension;
	    }

	    // Filters this dimension using the specified range, value, or null.
	    // If the range is null, this is equivalent to filterAll.
	    // If the range is an array, this is equivalent to filterRange.
	    // Otherwise, this is equivalent to filterExact.
	    function filter(range) {
	      return range == null
	          ? filterAll() : Array.isArray(range)
	          ? filterRange(range) : typeof range === "function"
	          ? filterFunction(range)
	          : filterExact(range);
	    }

	    // Filters this dimension to select the exact value.
	    function filterExact(value) {
	      return filterIndexBounds((refilter = crossfilter_filterExact(bisect, value))(values));
	    }

	    // Filters this dimension to select the specified range [lo, hi].
	    // The lower bound is inclusive, and the upper bound is exclusive.
	    function filterRange(range) {
	      return filterIndexBounds((refilter = crossfilter_filterRange(bisect, range))(values));
	    }

	    // Clears any filters on this dimension.
	    function filterAll() {
	      return filterIndexBounds((refilter = crossfilter_filterAll)(values));
	    }

	    // Filters this dimension using an arbitrary function.
	    function filterFunction(f) {
	      refilter = crossfilter_filterAll;

	      filterIndexFunction(refilterFunction = f);

	      lo0 = 0;
	      hi0 = n;

	      return dimension;
	    }

	    function filterIndexFunction(f) {
	      var i,
	          k,
	          x,
	          added = [],
	          removed = [];

	      for (i = 0; i < n; ++i) {
	        if (!(filters[k = index[i]] & one) ^ !!(x = f(values[i], i))) {
	          if (x) filters[k] &= zero, added.push(k);
	          else filters[k] |= one, removed.push(k);
	        }
	      }
	      filterListeners.forEach(function(l) { l(one, added, removed); });
	    }

	    // Returns the top K selected records based on this dimension's order.
	    // Note: observes this dimension's filter, unlike group and groupAll.
	    function top(k) {
	      var array = [],
	          i = hi0,
	          j;

	      while (--i >= lo0 && k > 0) {
	        if (!filters[j = index[i]]) {
	          array.push(data[j]);
	          --k;
	        }
	      }

	      return array;
	    }

	    // Returns the bottom K selected records based on this dimension's order.
	    // Note: observes this dimension's filter, unlike group and groupAll.
	    function bottom(k) {
	      var array = [],
	          i = lo0,
	          j;

	      while (i < hi0 && k > 0) {
	        if (!filters[j = index[i]]) {
	          array.push(data[j]);
	          --k;
	        }
	        i++;
	      }

	      return array;
	    }

	    // Adds a new group to this dimension, using the specified key function.
	    function group(key) {
	      var group = {
	        top: top,
	        all: all,
	        reduce: reduce,
	        reduceCount: reduceCount,
	        reduceSum: reduceSum,
	        order: order,
	        orderNatural: orderNatural,
	        size: size,
	        dispose: dispose,
	        remove: dispose // for backwards-compatibility
	      };

	      // Ensure that this group will be removed when the dimension is removed.
	      dimensionGroups.push(group);

	      var groups, // array of {key, value}
	          groupIndex, // object id ↦ group id
	          groupWidth = 8,
	          groupCapacity = crossfilter_capacity(groupWidth),
	          k = 0, // cardinality
	          select,
	          heap,
	          reduceAdd,
	          reduceRemove,
	          reduceInitial,
	          update = crossfilter_null,
	          reset = crossfilter_null,
	          resetNeeded = true,
	          groupAll = key === crossfilter_null;

	      if (arguments.length < 1) key = crossfilter_identity;

	      // The group listens to the crossfilter for when any dimension changes, so
	      // that it can update the associated reduce values. It must also listen to
	      // the parent dimension for when data is added, and compute new keys.
	      filterListeners.push(update);
	      indexListeners.push(add);
	      removeDataListeners.push(removeData);

	      // Incorporate any existing data into the grouping.
	      add(values, index, 0, n);

	      // Incorporates the specified new values into this group.
	      // This function is responsible for updating groups and groupIndex.
	      function add(newValues, newIndex, n0, n1) {
	        var oldGroups = groups,
	            reIndex = crossfilter_index(k, groupCapacity),
	            add = reduceAdd,
	            initial = reduceInitial,
	            k0 = k, // old cardinality
	            i0 = 0, // index of old group
	            i1 = 0, // index of new record
	            j, // object id
	            g0, // old group
	            x0, // old key
	            x1, // new key
	            g, // group to add
	            x; // key of group to add

	        // If a reset is needed, we don't need to update the reduce values.
	        if (resetNeeded) add = initial = crossfilter_null;

	        // Reset the new groups (k is a lower bound).
	        // Also, make sure that groupIndex exists and is long enough.
	        groups = new Array(k), k = 0;
	        groupIndex = k0 > 1 ? crossfilter_arrayLengthen(groupIndex, n) : crossfilter_index(n, groupCapacity);

	        // Get the first old key (x0 of g0), if it exists.
	        if (k0) x0 = (g0 = oldGroups[0]).key;

	        // Find the first new key (x1), skipping NaN keys.
	        while (i1 < n1 && !((x1 = key(newValues[i1])) >= x1)) ++i1;

	        // While new keys remain…
	        while (i1 < n1) {

	          // Determine the lesser of the two current keys; new and old.
	          // If there are no old keys remaining, then always add the new key.
	          if (g0 && x0 <= x1) {
	            g = g0, x = x0;

	            // Record the new index of the old group.
	            reIndex[i0] = k;

	            // Retrieve the next old key.
	            if (g0 = oldGroups[++i0]) x0 = g0.key;
	          } else {
	            g = {key: x1, value: initial()}, x = x1;
	          }

	          // Add the lesser group.
	          groups[k] = g;

	          // Add any selected records belonging to the added group, while
	          // advancing the new key and populating the associated group index.
	          while (!(x1 > x)) {
	            groupIndex[j = newIndex[i1] + n0] = k;
	            if (!(filters[j] & zero)) g.value = add(g.value, data[j]);
	            if (++i1 >= n1) break;
	            x1 = key(newValues[i1]);
	          }

	          groupIncrement();
	        }

	        // Add any remaining old groups that were greater than all new keys.
	        // No incremental reduce is needed; these groups have no new records.
	        // Also record the new index of the old group.
	        while (i0 < k0) {
	          groups[reIndex[i0] = k] = oldGroups[i0++];
	          groupIncrement();
	        }

	        // If we added any new groups before any old groups,
	        // update the group index of all the old records.
	        if (k > i0) for (i0 = 0; i0 < n0; ++i0) {
	          groupIndex[i0] = reIndex[groupIndex[i0]];
	        }

	        // Modify the update and reset behavior based on the cardinality.
	        // If the cardinality is less than or equal to one, then the groupIndex
	        // is not needed. If the cardinality is zero, then there are no records
	        // and therefore no groups to update or reset. Note that we also must
	        // change the registered listener to point to the new method.
	        j = filterListeners.indexOf(update);
	        if (k > 1) {
	          update = updateMany;
	          reset = resetMany;
	        } else {
	          if (!k && groupAll) {
	            k = 1;
	            groups = [{key: null, value: initial()}];
	          }
	          if (k === 1) {
	            update = updateOne;
	            reset = resetOne;
	          } else {
	            update = crossfilter_null;
	            reset = crossfilter_null;
	          }
	          groupIndex = null;
	        }
	        filterListeners[j] = update;

	        // Count the number of added groups,
	        // and widen the group index as needed.
	        function groupIncrement() {
	          if (++k === groupCapacity) {
	            reIndex = crossfilter_arrayWiden(reIndex, groupWidth <<= 1);
	            groupIndex = crossfilter_arrayWiden(groupIndex, groupWidth);
	            groupCapacity = crossfilter_capacity(groupWidth);
	          }
	        }
	      }

	      function removeData() {
	        if (k > 1) {
	          var oldK = k,
	              oldGroups = groups,
	              seenGroups = crossfilter_index(oldK, oldK);

	          // Filter out non-matches by copying matching group index entries to
	          // the beginning of the array.
	          for (var i = 0, j = 0; i < n; ++i) {
	            if (filters[i]) {
	              seenGroups[groupIndex[j] = groupIndex[i]] = 1;
	              ++j;
	            }
	          }

	          // Reassemble groups including only those groups that were referred
	          // to by matching group index entries.  Note the new group index in
	          // seenGroups.
	          groups = [], k = 0;
	          for (i = 0; i < oldK; ++i) {
	            if (seenGroups[i]) {
	              seenGroups[i] = k++;
	              groups.push(oldGroups[i]);
	            }
	          }

	          if (k > 1) {
	            // Reindex the group index using seenGroups to find the new index.
	            for (var i = 0; i < j; ++i) groupIndex[i] = seenGroups[groupIndex[i]];
	          } else {
	            groupIndex = null;
	          }
	          filterListeners[filterListeners.indexOf(update)] = k > 1
	              ? (reset = resetMany, update = updateMany)
	              : k === 1 ? (reset = resetOne, update = updateOne)
	              : reset = update = crossfilter_null;
	        } else if (k === 1) {
	          if (groupAll) return;
	          for (var i = 0; i < n; ++i) if (filters[i]) return;
	          groups = [], k = 0;
	          filterListeners[filterListeners.indexOf(update)] =
	          update = reset = crossfilter_null;
	        }
	      }

	      // Reduces the specified selected or deselected records.
	      // This function is only used when the cardinality is greater than 1.
	      function updateMany(filterOne, added, removed) {
	        if (filterOne === one || resetNeeded) return;

	        var i,
	            k,
	            n,
	            g;

	        // Add the added values.
	        for (i = 0, n = added.length; i < n; ++i) {
	          if (!(filters[k = added[i]] & zero)) {
	            g = groups[groupIndex[k]];
	            g.value = reduceAdd(g.value, data[k]);
	          }
	        }

	        // Remove the removed values.
	        for (i = 0, n = removed.length; i < n; ++i) {
	          if ((filters[k = removed[i]] & zero) === filterOne) {
	            g = groups[groupIndex[k]];
	            g.value = reduceRemove(g.value, data[k]);
	          }
	        }
	      }

	      // Reduces the specified selected or deselected records.
	      // This function is only used when the cardinality is 1.
	      function updateOne(filterOne, added, removed) {
	        if (filterOne === one || resetNeeded) return;

	        var i,
	            k,
	            n,
	            g = groups[0];

	        // Add the added values.
	        for (i = 0, n = added.length; i < n; ++i) {
	          if (!(filters[k = added[i]] & zero)) {
	            g.value = reduceAdd(g.value, data[k]);
	          }
	        }

	        // Remove the removed values.
	        for (i = 0, n = removed.length; i < n; ++i) {
	          if ((filters[k = removed[i]] & zero) === filterOne) {
	            g.value = reduceRemove(g.value, data[k]);
	          }
	        }
	      }

	      // Recomputes the group reduce values from scratch.
	      // This function is only used when the cardinality is greater than 1.
	      function resetMany() {
	        var i,
	            g;

	        // Reset all group values.
	        for (i = 0; i < k; ++i) {
	          groups[i].value = reduceInitial();
	        }

	        // Add any selected records.
	        for (i = 0; i < n; ++i) {
	          if (!(filters[i] & zero)) {
	            g = groups[groupIndex[i]];
	            g.value = reduceAdd(g.value, data[i]);
	          }
	        }
	      }

	      // Recomputes the group reduce values from scratch.
	      // This function is only used when the cardinality is 1.
	      function resetOne() {
	        var i,
	            g = groups[0];

	        // Reset the singleton group values.
	        g.value = reduceInitial();

	        // Add any selected records.
	        for (i = 0; i < n; ++i) {
	          if (!(filters[i] & zero)) {
	            g.value = reduceAdd(g.value, data[i]);
	          }
	        }
	      }

	      // Returns the array of group values, in the dimension's natural order.
	      function all() {
	        if (resetNeeded) reset(), resetNeeded = false;
	        return groups;
	      }

	      // Returns a new array containing the top K group values, in reduce order.
	      function top(k) {
	        var top = select(all(), 0, groups.length, k);
	        return heap.sort(top, 0, top.length);
	      }

	      // Sets the reduce behavior for this group to use the specified functions.
	      // This method lazily recomputes the reduce values, waiting until needed.
	      function reduce(add, remove, initial) {
	        reduceAdd = add;
	        reduceRemove = remove;
	        reduceInitial = initial;
	        resetNeeded = true;
	        return group;
	      }

	      // A convenience method for reducing by count.
	      function reduceCount() {
	        return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);
	      }

	      // A convenience method for reducing by sum(value).
	      function reduceSum(value) {
	        return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);
	      }

	      // Sets the reduce order, using the specified accessor.
	      function order(value) {
	        select = heapselect_by(valueOf);
	        heap = heap_by(valueOf);
	        function valueOf(d) { return value(d.value); }
	        return group;
	      }

	      // A convenience method for natural ordering by reduce value.
	      function orderNatural() {
	        return order(crossfilter_identity);
	      }

	      // Returns the cardinality of this group, irrespective of any filters.
	      function size() {
	        return k;
	      }

	      // Removes this group and associated event listeners.
	      function dispose() {
	        var i = filterListeners.indexOf(update);
	        if (i >= 0) filterListeners.splice(i, 1);
	        i = indexListeners.indexOf(add);
	        if (i >= 0) indexListeners.splice(i, 1);
	        i = removeDataListeners.indexOf(removeData);
	        if (i >= 0) removeDataListeners.splice(i, 1);
	        return group;
	      }

	      return reduceCount().orderNatural();
	    }

	    // A convenience function for generating a singleton group.
	    function groupAll() {
	      var g = group(crossfilter_null), all = g.all;
	      delete g.all;
	      delete g.top;
	      delete g.order;
	      delete g.orderNatural;
	      delete g.size;
	      g.value = function() { return all()[0].value; };
	      return g;
	    }

	    // Removes this dimension and associated groups and event listeners.
	    function dispose() {
	      dimensionGroups.forEach(function(group) { group.dispose(); });
	      var i = dataListeners.indexOf(preAdd);
	      if (i >= 0) dataListeners.splice(i, 1);
	      i = dataListeners.indexOf(postAdd);
	      if (i >= 0) dataListeners.splice(i, 1);
	      i = removeDataListeners.indexOf(removeData);
	      if (i >= 0) removeDataListeners.splice(i, 1);
	      m &= zero;
	      return filterAll();
	    }

	    return dimension;
	  }

	  // A convenience method for groupAll on a dummy dimension.
	  // This implementation can be optimized since it always has cardinality 1.
	  function groupAll() {
	    var group = {
	      reduce: reduce,
	      reduceCount: reduceCount,
	      reduceSum: reduceSum,
	      value: value,
	      dispose: dispose,
	      remove: dispose // for backwards-compatibility
	    };

	    var reduceValue,
	        reduceAdd,
	        reduceRemove,
	        reduceInitial,
	        resetNeeded = true;

	    // The group listens to the crossfilter for when any dimension changes, so
	    // that it can update the reduce value. It must also listen to the parent
	    // dimension for when data is added.
	    filterListeners.push(update);
	    dataListeners.push(add);

	    // For consistency; actually a no-op since resetNeeded is true.
	    add(data, 0, n);

	    // Incorporates the specified new values into this group.
	    function add(newData, n0) {
	      var i;

	      if (resetNeeded) return;

	      // Add the added values.
	      for (i = n0; i < n; ++i) {
	        if (!filters[i]) {
	          reduceValue = reduceAdd(reduceValue, data[i]);
	        }
	      }
	    }

	    // Reduces the specified selected or deselected records.
	    function update(filterOne, added, removed) {
	      var i,
	          k,
	          n;

	      if (resetNeeded) return;

	      // Add the added values.
	      for (i = 0, n = added.length; i < n; ++i) {
	        if (!filters[k = added[i]]) {
	          reduceValue = reduceAdd(reduceValue, data[k]);
	        }
	      }

	      // Remove the removed values.
	      for (i = 0, n = removed.length; i < n; ++i) {
	        if (filters[k = removed[i]] === filterOne) {
	          reduceValue = reduceRemove(reduceValue, data[k]);
	        }
	      }
	    }

	    // Recomputes the group reduce value from scratch.
	    function reset() {
	      var i;

	      reduceValue = reduceInitial();

	      for (i = 0; i < n; ++i) {
	        if (!filters[i]) {
	          reduceValue = reduceAdd(reduceValue, data[i]);
	        }
	      }
	    }

	    // Sets the reduce behavior for this group to use the specified functions.
	    // This method lazily recomputes the reduce value, waiting until needed.
	    function reduce(add, remove, initial) {
	      reduceAdd = add;
	      reduceRemove = remove;
	      reduceInitial = initial;
	      resetNeeded = true;
	      return group;
	    }

	    // A convenience method for reducing by count.
	    function reduceCount() {
	      return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);
	    }

	    // A convenience method for reducing by sum(value).
	    function reduceSum(value) {
	      return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);
	    }

	    // Returns the computed reduce value.
	    function value() {
	      if (resetNeeded) reset(), resetNeeded = false;
	      return reduceValue;
	    }

	    // Removes this group and associated event listeners.
	    function dispose() {
	      var i = filterListeners.indexOf(update);
	      if (i >= 0) filterListeners.splice(i);
	      i = dataListeners.indexOf(add);
	      if (i >= 0) dataListeners.splice(i);
	      return group;
	    }

	    return reduceCount();
	  }

	  // Returns the number of records in this crossfilter, irrespective of any filters.
	  function size() {
	    return n;
	  }

	  return arguments.length
	      ? add(arguments[0])
	      : crossfilter;
	}

	// Returns an array of size n, big enough to store ids up to m.
	function crossfilter_index(n, m) {
	  return (m < 0x101
	      ? crossfilter_array8 : m < 0x10001
	      ? crossfilter_array16
	      : crossfilter_array32)(n);
	}

	// Constructs a new array of size n, with sequential values from 0 to n - 1.
	function crossfilter_range(n) {
	  var range = crossfilter_index(n, n);
	  for (var i = -1; ++i < n;) range[i] = i;
	  return range;
	}

	function crossfilter_capacity(w) {
	  return w === 8
	      ? 0x100 : w === 16
	      ? 0x10000
	      : 0x100000000;
	}
	})(typeof exports !== 'undefined' && exports || this);


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }
/******/ ]);